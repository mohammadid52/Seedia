{"version":3,"sources":["hooks/useUser.ts","components/Spinner.tsx","components/VerticalProfileCard.tsx","pages/posts/RecentActivity.tsx"],"names":["useUser","profileUrl","userData","fetchProfile","iAmOwnerOfThisProfile","getUniqId","_id","useQuery","fetchUserById","enabled","isFetched","isLoading","data","refetch","otherUserData","Spinner","className","VerticalProfileCard","user","content","isBusiness","useAccountType","defaultContent","business","name","company","jobTitle","href","links","getProfile","alt","src","coverPicture","profilePicture","avatarPlaceholder","fullName","RecentActivity","route","useRouter","match","params","useState","limit","setLimit","userId","fetchActivity","isSuccess","activity","pageTitle","firstColClass","firstCol","followers","length","secondCol","dataLength","next","prev","hasMore","loader","undefined","endMessage","animation","animationData","title","map","_activity","idx","post","thirdColClass","thirdCol"],"mappings":"iGAAA,4BAuBeA,IAnBC,SACdC,EACAC,GAEI,IADJC,IACG,yDACGC,EACJF,GAAYG,YAAUJ,MAAV,OAA0BC,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAUI,KAElD,EAAgDC,mBAC9C,QACA,kBAAMC,YAAcP,KACpB,CAAEQ,SAAUL,GAAyBD,IAH/BO,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,KAAMC,EAApC,EAAoCA,QAM9BC,EAAgBJ,IAAcC,GAAaC,EAAKA,KAAKA,KAE3D,MAAO,CAAEE,gBAAeJ,YAAWC,YAAWP,wBAAuBS,a,4CCZxDE,IARC,WACd,OACE,qBAAKC,UAAU,wCAAf,SACE,qBAAKA,UAAU,kF,iCCHrB,mCA2DeC,IAtDa,SAAC,GAMtB,IAAD,IALJC,EAKI,EALJA,KAKI,IAJJC,eAII,MAJM,KAIN,EACIC,EAAeC,YAAeH,GAA9BE,WAEFE,EACJ,qCACE,mBAAGN,UAAU,qDAAb,SACGI,EAAU,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAMK,gBAAT,aAAG,EAAgBC,KAAnB,OAA0BN,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAMO,eAAhC,aAA0B,EAAeC,WAEtD,mBACEV,UAAU,oDACVW,KAAMC,IAAMC,WAAWX,GAFzB,SAIE,qBAAKF,UAAU,OAAf,oCAKN,OACE,sBAAKA,UAAU,aAAf,UACE,qBACEc,IAAI,GACJC,KACM,OAAJb,QAAI,IAAJA,OAAA,EAAAA,EAAMc,cAAN,OACId,QADJ,IACIA,OADJ,EACIA,EAAMc,aACN,qDAENhB,UAAU,6CAEZ,qBAAKA,UAAU,4BAAf,SACE,qBACEc,IAAI,GACJC,IAAKb,EAAKe,eAAiBf,EAAKe,eAAiBC,IACjDlB,UAAU,4GAGd,sBAAKA,UAAS,sBAAiBG,EAAU,GAAK,kBAA9C,UACE,mBACEQ,KAAMC,IAAMC,WAAWX,GAAM,GAC7BF,UAAU,oEAFZ,SAIGE,EAAKiB,WAEPhB,GAAWG,U,88yBC6FLc,UA9HQ,SAAC,GAAyC,IAAD,IAAtClC,EAAsC,EAAtCA,SAClBmC,EAAaC,cACXrC,GAAR,OAAuBoC,QAAvB,IAAuBA,GAAvB,UAAuBA,EAAOE,aAA9B,aAAuB,EAAcC,QAA7BvC,WACR,EAA0BwC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAASvC,YAAUJ,GAEzB,EAA2DM,mBAAS,mBAElE,kBAAMsC,YAAcD,EAAQF,MAFtB9B,EAAR,EAAQA,KAAMD,EAAd,EAAcA,UAAWD,EAAzB,EAAyBA,UAAWoC,EAApC,EAAoCA,UAAWjC,EAA/C,EAA+CA,QAUzCkC,GACHpC,GAAaD,GAAaoC,EAAYlC,EAAKA,KAAKA,KAAO,GAE1D,EAAiDZ,YAAQC,EAAYC,GAA7DY,EAAR,EAAQA,cACFI,EADN,EAAuBd,sBACcF,EAAWY,EACxCM,EAAeC,YAAeH,GAA9BE,WAER,OACE,sBAAKJ,UAAU,uDAAf,UACE,cAAC,IAAD,CAAiBd,SAAUA,IAC3B,cAAC,IAAD,CAAM8C,UAAS,4BAAuB9B,EAAKiB,SAA5B,cAEf,qBACEnB,UAAS,+DADX,SAGE,cAAC,IAAD,CACEiC,cAAa,0CACbC,SACE,qBAAKlC,UAAU,yBAAf,SACGN,IAAcC,EACb,cAAC,IAAD,CACEQ,QACE,gCACE,mBAAGH,UAAU,qDAAb,SACGI,EACGF,EAAKK,SAASC,KACdN,EAAKO,QAAQC,WAEnB,qBAAKV,UAAU,sIAAf,SACE,sBAAKA,UAAU,oFAAf,UACE,oBAAIA,UAAU,eAAd,uBACA,mBACEW,KAAMC,IAAMuB,YACZnC,UAAU,yDAFZ,UAIO,OAAJE,QAAI,IAAJA,GAAA,UAAAA,EAAMiC,iBAAN,eAAiBC,SAAU,YAMtClC,KAAMhB,IAGR,cAAC,IAAD,MAINmD,UACE,qBAAKrC,UAAU,8CAAf,SACGL,IAAcD,EACb,cAAC,IAAD,IAEA,mCACGqC,GAAYA,EAASK,OAAS,EAC7B,cAAC,IAAD,CACEE,WAAYP,EAASK,OACrBG,KAAM,kBA7DxBZ,GAAS,SAACa,GAAD,OAAUA,EAAO,WAC1B3C,KA6DkB4C,SAAS,EACTC,YAAQC,EACRC,WACE,cAAC,IAAD,CACEC,UAAWC,EACXC,MAAM,yBARZ,SAYE,sBAAK/C,UAAU,4BAAf,UACG+B,EAASiB,KAAI,SAACC,EAAWC,GAAZ,OACZ,cAAC,IAAD,CACEhE,SAAUA,EACV0C,OAAQA,EACRuB,KAAMF,EAAUE,UAGpB,cAAC,IAAD,CACEN,UAAWC,EACXC,MAAM,8BAKZ,cAAC,IAAD,CACEF,UAAWC,EACXC,MAAM,6BAOlBK,cAAc,WACdC,SACE,sBAAKrD,UAAU,aAAf,UACE,cAAC,IAAD,IACA,cAAC,IAAD","file":"static/js/50.22b20e7d.chunk.js","sourcesContent":["import { fetchUserById } from 'apis/queries'\nimport { getUniqId } from 'helpers'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { useQuery } from 'react-query'\nconst useUser = (\n  profileUrl: string,\n  userData?: IParent,\n  fetchProfile: boolean = true\n) => {\n  const iAmOwnerOfThisProfile =\n    userData && getUniqId(profileUrl) === userData?._id\n\n  const { isFetched, isLoading, data, refetch } = useQuery(\n    'user',\n    () => fetchUserById(profileUrl),\n    { enabled: !iAmOwnerOfThisProfile && fetchProfile }\n  )\n\n  const otherUserData = isFetched && !isLoading && data.data.data\n\n  return { otherUserData, isFetched, isLoading, iAmOwnerOfThisProfile, refetch }\n}\n\nexport default useUser\n","const Spinner = () => {\n  return (\n    <div className=\" flex m-4 justify-center items-center\">\n      <div className=\"animate-spin rounded-full h-24 w-24 border-t-2 border-b-2 border-pink-500\"></div>\n    </div>\n  )\n}\n\nexport default Spinner\n","import { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst VerticalProfileCard = ({\n  user,\n  content = null,\n}: {\n  user: IParent\n  content?: React.ReactNode\n}) => {\n  const { isBusiness } = useAccountType(user)\n\n  const defaultContent = (\n    <>\n      <p className=\"text-sm font-medium dark:text-white text-gray-500 \">\n        {isBusiness ? user?.business?.name : user?.company?.jobTitle}\n      </p>\n      <a\n        className=\"dark:text-white text-gray-900 text-lg font-medium\"\n        href={links.getProfile(user)}\n      >\n        <div className=\"mt-2\">View full profile</div>\n      </a>\n    </>\n  )\n\n  return (\n    <div className=\"plain-card\">\n      <img\n        alt=\"\"\n        src={\n          user?.coverPicture\n            ? user?.coverPicture\n            : 'https://source.unsplash.com/1600x900/?nature,water'\n        }\n        className=\"w-full lg:h-28 sm:h-24 object-cover h-20\"\n      />\n      <div className=\"flex justify-center -mt-8\">\n        <img\n          alt=\"\"\n          src={user.profilePicture ? user.profilePicture : avatarPlaceholder}\n          className=\"rounded-full border-solid lg:h-16 lg:w-16 h-12 w-12 dark:border-gray-800 border-white  border-2 -mt-3\"\n        />\n      </div>\n      <div className={`text-center ${content ? '' : 'px-3 pb-6 pt-2'}`}>\n        <a\n          href={links.getProfile(user, true)}\n          className=\"dark:text-white cursor-pointer text-gray-900 text-base font-bold \"\n        >\n          {user.fullName}\n        </a>\n        {content || defaultContent}\n      </div>\n    </div>\n  )\n}\n\nexport default VerticalProfileCard\n","import { fetchActivity } from 'apis/queries'\nimport animationData from 'assets/animation/caught-up.json'\nimport EmptyState from 'components/atoms/EmptyState'\nimport Meta from 'components/atoms/Meta/Meta'\nimport Post from 'components/posts/Post'\nimport SideCard from 'components/SideCard'\nimport Spinner from 'components/Spinner'\nimport VerticalProfileCard from 'components/VerticalProfileCard'\nimport { links } from 'constants/Links'\nimport { getUniqId } from 'helpers'\nimport useAccountType from 'hooks/useAccountType'\nimport { useRouter } from 'hooks/useRouter'\nimport useUser from 'hooks/useUser'\nimport { IActivity, IParent } from 'interfaces/UniversalInterface'\nimport DashboardHeader from 'pages/DashboardHeader'\nimport DashboardLayout from 'pages/DashboardLayout'\nimport { useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useQuery } from 'react-query'\n\nconst RecentActivity = ({ userData }: { userData: IParent }) => {\n  const route: any = useRouter()\n  const { profileUrl } = route?.match?.params\n  const [limit, setLimit] = useState(10)\n\n  const userId = getUniqId(profileUrl)\n\n  const { data, isLoading, isFetched, isSuccess, refetch } = useQuery(\n    `recent-activity`,\n    () => fetchActivity(userId, limit)\n  )\n\n  const onReachedAtLastPost = () => {\n    setLimit((prev) => prev + 10)\n    refetch()\n  }\n\n  const activity: IActivity[] =\n    !isLoading && isFetched && isSuccess ? data.data.data : []\n\n  const { otherUserData, iAmOwnerOfThisProfile } = useUser(profileUrl, userData)\n  const user = iAmOwnerOfThisProfile ? userData : otherUserData\n  const { isBusiness } = useAccountType(user)\n\n  return (\n    <div className=\"relative  dark:bg-gray-900 bg-gray-100 min-h-screen \">\n      <DashboardHeader userData={userData} />\n      <Meta pageTitle={`Recent Activity | ${user.fullName} | 13RMS`} />\n\n      <div\n        className={`h-auto pt-4 relative flow-root  transition-all duration-500 `}\n      >\n        <DashboardLayout\n          firstColClass={`   max-h-152 lg:block  xl:block w-full `}\n          firstCol={\n            <div className=\"flex flex-col gap-y-12\">\n              {isFetched && !isLoading ? (\n                <VerticalProfileCard\n                  content={\n                    <div>\n                      <p className=\"text-sm font-medium dark:text-white text-gray-500 \">\n                        {isBusiness\n                          ? user.business.name\n                          : user.company.jobTitle}\n                      </p>\n                      <div className=\"flex mt-4 gap-y-2  flex-col border-t py-2 text-xs font-medium text-gray-500 dark:text-gray-500 border-gray-200 dark:border-gray-700\">\n                        <div className=\"flex transition-all item-center px-4 py-1  dark:hover:bg-gray-700 justify-between\">\n                          <h6 className=\"font-medium \">Followers</h6>\n                          <a\n                            href={links.followers()}\n                            className=\"hover:underline cursor-pointer text-link font-semibold\"\n                          >\n                            {user?.followers?.length || 0}\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                  }\n                  user={userData}\n                />\n              ) : (\n                <Spinner />\n              )}\n            </div>\n          }\n          secondCol={\n            <div className=\"flex gap-y-4 mx-auto lg:max-w-2xl  flex-col\">\n              {isLoading && !isFetched ? (\n                <Spinner />\n              ) : (\n                <>\n                  {activity && activity.length > 0 ? (\n                    <InfiniteScroll\n                      dataLength={activity.length} //This is important field to render the next data\n                      next={() => onReachedAtLastPost()}\n                      hasMore={true}\n                      loader={undefined}\n                      endMessage={\n                        <EmptyState\n                          animation={animationData}\n                          title=\"You're all caught up\"\n                        />\n                      }\n                    >\n                      <div className=\"grid  grid-cols-1 gap-y-6\">\n                        {activity.map((_activity, idx) => (\n                          <Post\n                            userData={userData}\n                            userId={userId}\n                            post={_activity.post}\n                          />\n                        ))}\n                        <EmptyState\n                          animation={animationData}\n                          title=\"You're all caught up\"\n                        />\n                      </div>\n                    </InfiniteScroll>\n                  ) : (\n                    <EmptyState\n                      animation={animationData}\n                      title=\"You're all caught up\"\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          }\n          thirdColClass=\"lg:block\"\n          thirdCol={\n            <div className=\"space-y-12\">\n              <SideCard />\n              <SideCard />\n              {/* <Following\n                  showSingleCard\n                  list={userData?.following}\n                  interests={userData?.background?.interests}\n                /> */}\n            </div>\n          }\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default RecentActivity\n"],"sourceRoot":""}