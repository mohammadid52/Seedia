{"version":3,"sources":["pages/account/personal/CompanyStep.tsx"],"names":["CompanyStep","user","useState","isLoaded","history","useHistory","console","log","useEffect","other","accountFilled","push","links","DASHBAORD","accountFinishedStep","CHOOSE_TEMPLATE","LOCATION_P","renderPathByType","accountType","CHOOSE_ACCOUNT","redirection","setValues","useUserContext","onSubmit","values","a","setSaving","token","getAccessToken","updatedData","company","jobTitle","jobType","currentCompany","companyName","network","post","headers","Authorization","password","error","validationSchema","Yup","required","saving","title","withButton","text","onClick","EDUCATION","subtitle","className","initialValues","PersonalStepOne","enableReinitialize","label","id","name","type","fullWidth","rounded","gradient","loading"],"mappings":"0QA6KeA,UA7JK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KACrB,EAAmBC,oBAAS,GAArBC,EAAP,oBACMC,EAAUC,cAEhBC,QAAQC,IAAI,wBA8BZC,qBAAU,YA5BU,WAClB,GAAIP,EAAM,CAAC,IAAD,EACyB,QASiC,EATlE,GAAI,OAACA,QAAD,IAACA,GAAD,UAACA,EAAMQ,aAAP,aAAC,EAAaC,cAqBhB,OADAJ,QAAQC,IAAI,yBACLH,EAAQO,KAAKC,IAAMC,WApB1B,GAAwC,cAApC,UAAAZ,EAAKQ,aAAL,eAAYK,qBAGd,OADAR,QAAQC,IAAI,oCACLH,EAAQO,KAAKC,IAAMG,iBACrB,GAAwC,aAApC,UAAAd,EAAKQ,aAAL,eAAYK,qBAGrB,OADAR,QAAQC,IAAI,6BACLH,EAAQO,KAAKC,IAAMI,YACrB,GAAwC,mBAApC,UAAAf,EAAKQ,aAAL,eAAYK,qBAGrB,OAFAR,QAAQC,IAAI,wDAELH,EAAQO,KAAKM,YAAgB,UAAChB,EAAKQ,aAAN,aAAC,EAAYS,cAC5C,GAAwC,YAApC,UAAAjB,EAAKQ,aAAL,eAAYK,qBAErBR,QAAQC,IAAI,mCACLH,EAAQO,KAAKC,IAAMO,iBAWhCC,KACC,IAEH,IAAQC,EAAcC,cAAdD,UACFE,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAKfC,GAAU,GALK,SAOPC,EAAQC,cACVC,EARS,2BASR5B,GATQ,IAUX6B,QAAQ,2BAAD,OACF7B,QADE,IACFA,OADE,EACFA,EAAM6B,SADJ,IAELC,SAAUP,EAAOO,SACjBC,QAASR,EAAOQ,QAChBC,eAAgBT,EAAOS,eACvBC,YAAaV,EAAOS,iBAEtBxB,MAAM,2BAAD,OACAR,QADA,IACAA,OADA,EACAA,EAAMQ,OADN,IAEHK,oBAAqB,cAnBZ,SAsBPqB,IAAQC,KACZ,eADI,eAGCP,GAEL,CACEQ,QAAS,CAAEC,cAAeX,KA5BjB,cAiCNE,EAAYU,SACnBlB,EAAU,eAAKQ,IAEfzB,EAAQO,KAAKC,IAAMI,YApCN,kDAsCbV,QAAQkC,MAAR,MAtCa,yBAwCbd,GAAU,GAxCG,6EAAH,sDA4CRe,EAAmBC,IAAW,CAClCX,SAAUW,MAAaC,SAAS,6BAChCX,QAASU,MAAaC,SAAS,4BAC/BV,eAAgBS,MAAaC,SAC3B,0CAIJ,EAA4BzC,oBAAS,GAArC,mBAAO0C,EAAP,KAAelB,EAAf,KAEA,OAAQvB,EAGN,cAAC,IAAD,CACE0C,MAAM,sBACNC,WACE,cAAC,IAAD,CACEC,KAAK,8BACLC,QAAS,kBAAM5C,EAAQO,KAAKC,IAAMqC,cAGtCC,SACE,4EAC6C,uBAD7C,mBATJ,SAcE,cAAC,IAAD,CAAaC,UAAU,wCAAvB,SACE,qBAAKA,UAAU,sHAAf,SACE,cAAC,IAAD,CACEC,cAAeC,IACfZ,iBAAkBA,EAClBlB,SAAUA,EACV+B,oBAAkB,EAJpB,SAME,eAAC,IAAD,CAAMH,UAAU,YAAhB,UACE,cAAC,IAAD,CACEI,MAAM,wBACNC,GAAG,WACHC,KAAK,WACLd,UAAQ,IAEV,cAAC,IAAD,CACEY,MAAM,WACNC,GAAG,UACHC,KAAK,UACLd,UAAQ,IAGV,cAAC,IAAD,CACEY,MAAM,kBACNC,GAAG,iBACHC,KAAK,iBACLd,UAAQ,IAGV,8BACE,cAAC,IAAD,CACEe,KAAK,SACLC,WAAS,EACTC,QAAQ,aACRC,UAAQ,EACRC,QAASlB,EACTW,MAAM,2BApDpB,cAAC,IAAD","file":"static/js/6.871036bf.chunk.js","sourcesContent":["import AnimatedDiv from 'components/animation/AnimatedDiv'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport TextButton from 'components/atoms/TextButton'\nimport Loading from 'components/Loading'\nimport { links } from 'constants/Links'\nimport Layout from 'containers/Layout'\nimport { useUserContext } from 'context/UserContext'\nimport { Form, Formik } from 'formik'\nimport { getAccessToken, network, renderPathByType } from 'helpers'\nimport { PersonalStepOne } from 'initials'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport * as Yup from 'yup'\n\nconst CompanyStep = ({ user }: { user?: IParent }) => {\n  const [isLoaded] = useState(true)\n  const history = useHistory()\n\n  console.log('I am on company page')\n\n  const redirection = () => {\n    if (user) {\n      if (!user?.other?.accountFilled) {\n        if (user.other?.accountFinishedStep === 'location') {\n          // redirect to choose template page\n          console.log('redirect to choose template page')\n          return history.push(links.CHOOSE_TEMPLATE)\n        } else if (user.other?.accountFinishedStep === 'company') {\n          // redirect to location page\n          console.log('redirect to location page')\n          return history.push(links.LOCATION_P)\n        } else if (user.other?.accountFinishedStep === 'chooseAccount') {\n          console.log('get the accountType and redirect as per account type')\n          // get the accountType and redirect as per account type\n          return history.push(renderPathByType(user.other?.accountType))\n        } else if (user.other?.accountFinishedStep === 'signup') {\n          // redirect to choose Account page\n          console.log('redirect to choose Account page')\n          return history.push(links.CHOOSE_ACCOUNT)\n        }\n      } else {\n        //  redirect to dashboard\n        console.log('redirect to dashboard')\n        return history.push(links.DASHBAORD)\n      }\n    }\n  }\n\n  useEffect(() => {\n    redirection()\n  }, [])\n\n  const { setValues } = useUserContext()\n  const onSubmit = async (values: {\n    jobTitle: any\n    jobType: any\n    currentCompany: any\n  }) => {\n    setSaving(true)\n    try {\n      const token = getAccessToken()\n      let updatedData = {\n        ...user,\n        company: {\n          ...user?.company,\n          jobTitle: values.jobTitle,\n          jobType: values.jobType,\n          currentCompany: values.currentCompany,\n          companyName: values.currentCompany,\n        },\n        other: {\n          ...user?.other,\n          accountFinishedStep: 'company',\n        },\n      }\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      //@ts-ignore\n      delete updatedData.password\n      setValues({ ...updatedData })\n\n      history.push(links.LOCATION_P)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const validationSchema = Yup.object({\n    jobTitle: Yup.string().required('Please add your job title'),\n    jobType: Yup.string().required('Please add your job type'),\n    currentCompany: Yup.string().required(\n      'Please add your current company name'\n    ),\n  })\n\n  const [saving, setSaving] = useState(false)\n\n  return !isLoaded ? (\n    <Loading />\n  ) : (\n    <Layout\n      title=\"Company Information\"\n      withButton={\n        <TextButton\n          text=\"or create a student account\"\n          onClick={() => history.push(links.EDUCATION)}\n        />\n      }\n      subtitle={\n        <p>\n          Your profile helps you find new people and <br /> oppurtunites\n        </p>\n      }\n    >\n      <AnimatedDiv className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white dark:bg-gray-800 border border-transparent dark:border-gray-700  py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n          <Formik\n            initialValues={PersonalStepOne}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            enableReinitialize\n          >\n            <Form className=\"space-y-6\">\n              <FormInput\n                label=\"Most recent job title\"\n                id=\"jobTitle\"\n                name=\"jobTitle\"\n                required\n              />\n              <FormInput\n                label=\"Job Type\"\n                id=\"jobType\"\n                name=\"jobType\"\n                required\n              />\n\n              <FormInput\n                label=\"Current Company\"\n                id=\"currentCompany\"\n                name=\"currentCompany\"\n                required\n              />\n\n              <div>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  rounded=\"rounded-lg\"\n                  gradient\n                  loading={saving}\n                  label=\"Next Step\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </AnimatedDiv>\n    </Layout>\n  )\n}\n\nexport default CompanyStep\n"],"sourceRoot":""}