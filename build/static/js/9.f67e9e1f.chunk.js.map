{"version":3,"sources":["pages/account/personal/LocationStep.jsx"],"names":["yourhandle","require","LastStep","accountType","user","useState","isLoaded","history","useHistory","saving","setSaving","useEffect","hasOwnProperty","accountFilled","push","links","DASHBAORD","checkAccount","setValues","useUserContext","onSubmit","values","a","token","getAccessToken","updatedData","location","country","pincode","state","city","livesIn","other","accountFinishedStep","network","post","headers","Authorization","password","CHOOSE_TEMPLATE","console","error","validationSchema","Yup","required","matches","min","max","shortName","longName","selectedLocation","setSelectedLocation","countries","getCountries","disabledItem","msg","name","disabled","stateList","setStateList","cityList","setCityList","title","firstName","subtitle","className","initialValues","PersonalStepTwo","label","list","placeholder","onSelect","item","states","getStatesByShort","updated","map","length","updateStates","cities","getCities","updateCities","id","fullWidth","rounded","type","gradient","loading","text","onClick","PERSONAL_STEP_1","STUDENT_STEP_1"],"mappings":"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","file":"static/js/9.f67e9e1f.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport TextButton from 'components/atoms/TextButton'\nimport Loading from 'components/Loading'\nimport { useHistory } from 'react-router-dom'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { PersonalStepTwo } from 'initials'\nimport { links } from 'constants/Links'\nimport Layout from 'containers/Layout'\nimport { map } from 'lodash'\nimport { getAccessToken, network } from 'helpers'\nimport FormSelector from 'components/atoms/FormSelector'\nimport AnimatedDiv from 'components/animation/AnimatedDiv'\nimport { useUserContext } from 'context/UserContext'\n\nconst yourhandle = require('countrycitystatejson')\n\nconst LastStep = ({ accountType = 'personal', user }) => {\n  const [isLoaded] = useState(true)\n  const history = useHistory()\n\n  const [saving, setSaving] = useState(false)\n\n  const goBack = () => {\n    history.push(\n      accountType === 'personal' ? links.PERSONAL_STEP_1 : links.STUDENT_STEP_1\n    )\n  }\n\n  /**\n   * Check if account is already selected\n   */\n  const checkAccount = () => {\n    if (user && user.hasOwnProperty('accountFilled') && user?.accountFilled) {\n      return history.push(links.DASHBAORD)\n    }\n  }\n\n  useEffect(() => {\n    checkAccount()\n  }, [])\n\n  const { setValues } = useUserContext()\n\n  const onSubmit = async (values) => {\n    try {\n      const token = getAccessToken()\n      setSaving(true)\n\n      let updatedData = {\n        ...user,\n        location: {\n          ...user.location,\n          country: values.country,\n          pincode: values.pincode,\n          state: values.state,\n          city: values.city,\n          livesIn: `${values.city} ${values.country}`,\n        },\n        other: {\n          ...user.other,\n          accountFilled: false,\n          accountFinishedStep: 'location',\n        },\n      }\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      //@ts-ignore\n      delete updatedData.password\n      setValues({ ...updatedData })\n\n      history.push(links.CHOOSE_TEMPLATE)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n  const validationSchema = Yup.object({\n    state: Yup.string().required(),\n    country: Yup.string().required(),\n    city: Yup.string().required(),\n    pincode: Yup.string()\n      .required()\n      .matches(/^[0-9]+$/, 'Must be only digits')\n      .min(6, 'Must be exactly 6 digits')\n      .max(6, 'Must be exactly 6 digits'),\n  })\n\n  const [selectedLocation, setSelectedLocation] = useState({\n    country: { shortName: '', longName: '' },\n    state: '',\n    city: '',\n  })\n\n  const countries = yourhandle.getCountries()\n\n  const disabledItem = (msg) => [\n    {\n      name: msg,\n      disabled: true,\n    },\n  ]\n\n  const updateStates = (shortName) => {\n    const states = yourhandle.getStatesByShort(shortName)\n    const updated = map(states, (state) => ({ name: state }))\n    if (updated && updated.length > 0) {\n      setStateList(updated)\n    } else {\n      setStateList(disabledItem('No state found for selected country.'))\n    }\n  }\n\n  const updateCities = (shortName, state) => {\n    const cities = yourhandle.getCities(shortName, state)\n    const updated = map(cities, (city) => ({ name: city }))\n\n    if (updated && updated.length > 0) {\n      setCityList(updated)\n    } else {\n      setCityList(disabledItem('No city found for selected state.'))\n    }\n  }\n\n  const [stateList, setStateList] = useState([])\n\n  const [cityList, setCityList] = useState([])\n\n  return !isLoaded ? (\n    <Loading />\n  ) : (\n    <Layout\n      title={`Welcome, ${user?.firstName || 'Human'}!`}\n      subtitle={\n        <p>\n          Create a profile, connect with acquaintances and discuss topics that\n          interest you.\n        </p>\n      }\n    >\n      <AnimatedDiv className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white  border border-transparent dark:border-gray-700  dark:bg-gray-800 py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n          <Formik\n            initialValues={PersonalStepTwo}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            <Form className=\"space-y-6\">\n              <div>\n                <FormSelector\n                  label={'Country / region'}\n                  list={countries}\n                  name=\"country\"\n                  required\n                  placeholder={'Select country'}\n                  onSelect={(item) => {\n                    updateStates(item.shortName)\n\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      country: {\n                        shortName: item.shortName,\n                        longName: item.name,\n                      },\n                    })\n                  }}\n                />\n              </div>\n              <div>\n                <FormSelector\n                  label=\"State\"\n                  list={stateList}\n                  name=\"state\"\n                  required\n                  placeholder={'Select state'}\n                  onSelect={(item) => {\n                    updateCities(selectedLocation.country.shortName, item.name)\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      state: item.name,\n                    })\n                  }}\n                />\n              </div>\n\n              <div>\n                <FormSelector\n                  label={'Ctiy'}\n                  name=\"city\"\n                  list={cityList}\n                  required\n                  placeholder={'Select city'}\n                  onSelect={(item) => {\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      city: item.name,\n                    })\n                  }}\n                />\n              </div>\n              <FormInput\n                label=\"Postal Code\"\n                id=\"pincode\"\n                name=\"pincode\"\n                placeholder=\"Postal Code\"\n                required\n              />\n\n              <div>\n                <Button\n                  fullWidth\n                  rounded=\"rounded-lg\"\n                  type=\"submit\"\n                  gradient\n                  loading={saving}\n                  label=\"Finish Submit\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n        <TextButton\n          text=\"Edit company details\"\n          onClick={goBack}\n          className=\"inline-block mt-4\"\n        />\n      </AnimatedDiv>\n    </Layout>\n  )\n}\n\nexport default LastStep\n"],"sourceRoot":""}