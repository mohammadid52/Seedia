{"version":3,"sources":["pages/profile/Cover.tsx","pages/profile/About.tsx","pages/profile/Background.tsx","components/atoms/Tabs.tsx","pages/profile/Recommendations.tsx","pages/profile/ProfileOne.tsx"],"names":["Cover","company","userData","authUser","useState","type","show","showImageModal","setShowImageModal","token","getAccessToken","accountType","other","saving","setSaving","_image","setImage","onImageSelect","e","img","target","files","setValues","useUserContext","onSave","a","preventDefault","fd","FormData","append","config","headers","Authorization","network","post","data","location","updatedData","isCover","password","console","error","message","coverImageSelectorRef","React","useRef","profileImageSelectorRef","Modal","header","disableBackdropClose","open","setOpen","className","src","URL","createObjectURL","alt","Button","gradient","loading","disabled","onClick","label","ref","onChange","accept","coverPicture","profilePicture","fullName","Badge","textSize","rounded","color","jobTitle","business","name","pwvpCount","projects","length","followers","secondary","invert","current","click","bgColor","Icon","AiOutlineEdit","size","About","values","showModal","setShowModal","isEmpty","isBusiness","useEffect","setLocalFields","businessName","address","email","additionalInfo","currentCompany","latestCompany","previousCompany","livesIn","maritalStatus","initialState","localFields","updateState","value","setUnsavedChanges","unsavedChanges","showUnsaveModal","setShowUnsaveModal","KeyValue","text","id","title","onClose","NormalFormInput","Selector","onSelect","status","selectedItem","list","Card","cardTitle","withCardHeadings","content","hideCloseBtn","ModalContentByType","onExperienceSelectUpdate","onExperienceFieldUpdate","getValue","onInterestAdd","onExperienceRemove","addNewExperience","Section","sectionTitle","CgDetailsMore","summary","textarea","gridClass","placeholder","interests","map","interest","idx","experiences","experience","required","yearList","item","Divider","withButton","BiTrashAlt","onBtnClick","Background","background","addOnTrigger","newExperience","nanoid","companyName","joinDate","leaveDate","description","fieldName","update","remove","withSectionHeadings","isAvailable","EmptyState","subtitle","btnText","showEditOption","BtnIcon","PlusIcon","iconUrl","exp","Tabs","tabs","currentTab","setCurrentTab","htmlFor","defaultValue","find","tab","classNames","undefined","count","Recommendations","recommendation","fetchReceived","setFetchReceived","fetchGiven","setFetchGiven","fetchReceivedList","users","received","g","userId","_r","r","user","fetchGivenList","given","_g","onCancel","validationSchema","Yup","min","max","route","useRouter","userIdFromParam","match","params","onSubmit","initialValues","FormInput","recom","getUniqId","str","arr","split","Profile","viewMode","myId","decoded","jwt_decode","checkOnlyId","getProfileById","dispatch","useDispatch","loadUser","commonProps","Sidebar","style","maxWidth","Layout","firstCol","secondCol","Following","following","thirdCol","PublicProfileCard","ProfileStrength","PeopleAlsoViewed","CustomFooter"],"mappings":"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","file":"static/js/11.98b3348a.chunk.js","sourcesContent":["import Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport { ICompany, IParent } from 'interfaces/UniversalInterface'\nimport { useState } from 'react'\nimport { AiOutlineEdit } from 'react-icons/ai'\nimport React from 'react'\nimport { getAccessToken, network } from 'helpers'\nimport { useUserContext } from 'context/UserContext'\nimport Badge from 'components/atoms/Badge'\n\nconst Cover = ({\n  company,\n  userData,\n  authUser,\n}: {\n  company?: ICompany\n  userData: IParent\n  authUser: boolean\n}) => {\n  const [showImageModal, setShowImageModal] = useState({\n    type: '',\n    show: false,\n  })\n  const token = getAccessToken()\n\n  const accountType = userData?.other?.accountType || 'personal'\n\n  const [saving, setSaving] = useState(false)\n\n  const [_image, setImage] = useState('')\n\n  const onImageSelect = (e: any, type: string) => {\n    const img = e.target.files[0]\n    setImage(img)\n    setShowImageModal({ type, show: true })\n  }\n\n  const { setValues } = useUserContext()\n\n  const onSave = async (e: any) => {\n    e.preventDefault()\n    setSaving(true)\n\n    const fd = new FormData()\n    fd.append('image', _image)\n\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: token,\n      },\n    }\n\n    try {\n      const { data } = await network.post('/uploadImage', fd, config)\n\n      if (data && data.data && data.data.location) {\n        const updatedData = {\n          ...userData,\n          [isCover ? 'coverPicture' : 'profilePicture']: data.data.location,\n        }\n        //@ts-ignore\n        delete updatedData.password\n\n        setValues({ ...updatedData })\n\n        await network.post(\n          '/user/update',\n          {\n            ...updatedData,\n          },\n          {\n            headers: { Authorization: token },\n          }\n        )\n        setShowImageModal({ show: false, type: '' })\n      }\n    } catch (error) {\n      console.error(error.message)\n    }\n    setSaving(false)\n  }\n\n  const coverImageSelectorRef = React.useRef()\n  const profileImageSelectorRef = React.useRef()\n\n  //@ts-ignore\n  const showFileExplorerForCover = () => coverImageSelectorRef?.current?.click()\n  const showFileExplorerForProfile = () =>\n    //@ts-ignore\n    profileImageSelectorRef?.current?.click()\n\n  const coverImageStyles =\n    'max-h-72 rounded-md sm:overflow-hidden w-full  object-cover'\n  const profileImageStyles = 'md:h-32 md:w-32 sm:h-12 sm:w-12 rounded-full'\n  const isCover = showImageModal.type === 'cover'\n\n  return (\n    <>\n      <Modal\n        header={`${isCover ? 'Cover' : 'Profile'} Photo`}\n        disableBackdropClose\n        open={showImageModal.show}\n        setOpen={() => setShowImageModal({ show: false, type: '' })}\n      >\n        <div\n          className={`${\n            isCover\n              ? ' lg:min-w-256 sm:min-w-172 min-w-32'\n              : 'sm:min-w-64 sm:min-h-64'\n          }`}\n        >\n          <div\n            className={`relative ${\n              isCover\n                ? 'sm:min-h-72 min-h-48'\n                : 'min-h-48 flex items-center justify-center'\n            } `}\n          >\n            {_image && (\n              <img\n                className={`shadow-xl ${\n                  isCover ? coverImageStyles : profileImageStyles\n                }`}\n                src={URL.createObjectURL(_image)}\n                alt=\"People working on laptops\"\n              />\n            )}\n          </div>\n          <div className=\"mt-5 sm:mt-4 flex justify-end  items-center\">\n            <Button\n              gradient\n              loading={saving}\n              disabled={saving}\n              onClick={onSave}\n              type=\"submit\"\n              label=\"Save\"\n            />\n          </div>\n        </div>\n      </Modal>\n\n      {/* HIDDEN IMAGE INPUT */}\n      <input\n        // @ts-ignore\n        ref={coverImageSelectorRef}\n        className=\"hidden\"\n        type=\"file\"\n        onChange={(e: any) => onImageSelect(e, 'cover')}\n        accept=\"image/x-png,image/jpeg\"\n      />\n      {/* HIDDEN IMAGE INPUT */}\n      <input\n        // @ts-ignore\n        ref={profileImageSelectorRef}\n        className=\"hidden\"\n        type=\"file\"\n        onChange={(e: any) => onImageSelect(e, 'profile')}\n        accept=\"image/x-png,image/jpeg\"\n      />\n\n      <main className=\"\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-x-0 bottom-0 h-1/2 \" />\n          <div className=\"sm:px-6 lg:px-8 px-4\">\n            <div className=\"relative shadow-xl rounded-md sm:overflow-hidden\">\n              <div className=\"absolute inset-0\">\n                <img\n                  className=\"h-full w-full object-cover\"\n                  src={\n                    userData?.coverPicture\n                      ? userData?.coverPicture\n                      : 'https://source.unsplash.com/1600x900/?nature,water'\n                  }\n                  alt=\"People working on laptops\"\n                />\n                <div className=\"absolute inset-0 bg-gray-400 mix-blend-multiply\" />\n              </div>\n              <div className=\"relative px-4  py-16 sm:px-6 sm:py-24 lg:py-32 lg:px-8 flex items-center flex-col justify-center\">\n                <div className=\"relative\">\n                  <img\n                    src={\n                      userData?.profilePicture\n                        ? userData?.profilePicture\n                        : 'https://robohash.org/honey?set=set1'\n                    }\n                    className=\"md:h-32 md:w-32 sm:h-12 border-gradient border-transparent border-4 shadow-xl sm:w-12 rounded-full\"\n                    alt=\"user\"\n                  />\n                </div>\n                <h1 className=\"my-6 relative text-center text-2xl font-extrabold tracking-tight sm:text-2xl lg:text-4xl\">\n                  <span className=\"block text-white\">\n                    {userData?.fullName}{' '}\n                    <Badge\n                      className=\"absolute -right-20 top-0\"\n                      label={accountType}\n                      textSize=\"xs\"\n                      rounded=\"\"\n                      color={\n                        accountType === 'business'\n                          ? 'pink'\n                          : accountType === 'personal'\n                          ? 'yellow'\n                          : 'blue'\n                      }\n                    />\n                  </span>\n                  <span className=\"block text-white text-base tracking-wide font-medium\">\n                    {accountType === 'personal'\n                      ? company?.jobTitle\n                      : userData.business?.name}\n                  </span>\n                </h1>\n\n                <div className=\"flex items-center w-auto text-xl sm:border-t  border-white flex-col sm:flex-row border-t-none\">\n                  <div className=\"sm:border-r border-r-none border-white px-8 py-4 sm:border-b-none border-b\">\n                    <div className=\"text-center  text-white tracking-wide font-bold\">\n                      {userData.pwvpCount || 0}\n                    </div>\n                    <div className=\"text-gray-300 font-medium uppercase text-base mt-1 tracking-tight \">\n                      profile views\n                    </div>\n                  </div>\n                  <div className=\"sm:border-r  border-r-none border-white px-8 py-4 sm:border-b-none border-b\">\n                    <div className=\"text-center text-white tracking-wide font-bold\">\n                      {userData.projects ? userData.projects.length : 0}\n                    </div>\n                    <div className=\"text-gray-300 font-medium uppercase text-base mt-1 tracking-tight \">\n                      projects\n                    </div>\n                  </div>\n                  <div className=\"px-8 py-4 sm:border-b-none border-b\">\n                    <div className=\"text-center text-white tracking-wide font-bold \">\n                      {userData?.followers?.length || 0}\n                    </div>\n                    <div className=\"text-gray-300 font-medium uppercase text-base mt-1 tracking-tight \">\n                      connections\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* <----------- Edit Button -------------> */}\n              {authUser && (\n                <div className=\"absolute flex items-center gap-x-4 bottom-0 right-0 p-4\">\n                  <Button\n                    secondary\n                    invert\n                    onClick={showFileExplorerForProfile}\n                    bgColor=\"gray\"\n                    Icon={AiOutlineEdit}\n                    size=\"sm\"\n                    label={'Change profile photo'}\n                  />\n                  <Button\n                    secondary\n                    invert\n                    onClick={showFileExplorerForCover}\n                    bgColor=\"gray\"\n                    Icon={AiOutlineEdit}\n                    size=\"sm\"\n                    label={'Change cover photo'}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  )\n}\n\nexport default Cover\n","//@ts-nocheck\nimport Card from 'components/atoms/Card'\n\nimport Button from 'components/atoms/Button'\nimport { AiOutlineEdit } from 'react-icons/ai'\nimport Modal from 'components/atoms/Modal'\nimport { useEffect, useState } from 'react'\n\nimport NormalFormInput from 'components/atoms/NormalFormInput'\nimport Selector from 'components/atoms/Selector'\nimport { network } from 'helpers'\nimport { useUserContext } from 'context/UserContext'\nimport { isEmpty } from 'lodash'\nimport { IParent } from 'interfaces/UniversalInterface'\n\nconst About = ({\n  userData,\n  authUser,\n}: {\n  userData: IParent\n  authUser: boolean\n}) => {\n  const { setValues, values } = useUserContext()\n  const [showModal, setShowModal] = useState(false)\n\n  const {\n    company = {},\n    location = {},\n    business = {},\n  } = isEmpty(values) ? {} : values\n\n  const businessInitState = {\n    businessName: '',\n    address: '',\n    email: '',\n    additionalInfo: '',\n  }\n\n  const companyInitState = {\n    currentCompany: '',\n    previousCompany: '',\n    livesIn: '',\n    maritalStatus: '',\n  }\n\n  const accountType = userData?.other?.accountType\n  const isBusiness = accountType === 'business'\n  useEffect(() => {\n    if (!isEmpty(userData)) {\n      if (!isBusiness) {\n        setLocalFields({\n          currentCompany:\n            company?.currentCompany || company.latestCompany || '',\n          previousCompany: company?.previousCompany || '',\n          livesIn: location?.livesIn || '',\n          maritalStatus: userData?.maritalStatus || 'Unmarried',\n        })\n      } else {\n        setLocalFields({\n          businessName: business?.name,\n          address: location?.address,\n          email: business?.email,\n          additionalInfo: business?.additionalInfo,\n        })\n      }\n    }\n  }, [])\n\n  const [saving, setSaving] = useState(false)\n\n  const initialState = !isBusiness ? companyInitState : businessInitState\n\n  const [localFields, setLocalFields] = useState(initialState)\n\n  const updateState = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setUnsavedChanges(true)\n    setLocalFields({\n      ...localFields,\n      [name]: value,\n    })\n  }\n\n  const onSave = async () => {\n    try {\n      setSaving(true)\n      // @ts-ignore\n      const {\n        currentCompany,\n        address,\n        previousCompany,\n        maritalStatus,\n        businessName,\n        livesIn,\n        email,\n        additionalInfo,\n      } = localFields\n\n      let updatedData = { ...userData }\n\n      if (!isBusiness) {\n        updatedData = {\n          ...userData,\n          maritalStatus,\n          company: {\n            ...company,\n            currentCompany,\n            previousCompany,\n          },\n          location: {\n            ...location,\n            livesIn,\n          },\n        }\n      } else {\n        updatedData = {\n          ...userData,\n\n          business: {\n            ...business,\n            businessName,\n            email,\n            additionalInfo,\n          },\n          location: {\n            ...location,\n            address,\n          },\n        }\n      }\n      //@ts-ignore\n      delete updatedData.password\n      setValues({ ...updatedData })\n\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      // add data to local state\n      setShowModal(false)\n      setUnsavedChanges(false)\n      if (!showModal) {\n        setLocalFields(initialState)\n      }\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const onCancel = () => {\n    if (unsavedChanges) {\n      setShowUnsaveModal(true)\n    } else {\n      setShowUnsaveModal(false)\n\n      setUnsavedChanges(false)\n      if (!showModal) {\n        setLocalFields(initialState)\n      }\n    }\n    setShowModal(false)\n  }\n  const [unsavedChanges, setUnsavedChanges] = useState(false)\n\n  const [showUnsaveModal, setShowUnsaveModal] = useState(false)\n\n  const KeyValue = ({ label, text }: { label: string; text: string }) => {\n    return (\n      <div id={label}>\n        <span className=\"title block text-gray-400 text-sm\">{label}</span>\n        <span\n          title={text}\n          className=\"truncate data block text-sm  text-gray-900 dark:text-white\"\n        >\n          {text}\n        </span>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <Modal\n        onClose={onCancel}\n        open={showModal}\n        disableBackdropClose={false}\n        setOpen={() => setShowModal(false)}\n        header=\"Edit About\"\n      >\n        <div>\n          <div className=\"min-w-256  overflow-y-auto p-2 custom-scroll-mini darker my-4\">\n            {!isBusiness ? (\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <NormalFormInput\n                  name=\"currentCompany\"\n                  label=\"Current company name\"\n                  value={localFields.currentCompany}\n                  onChange={updateState}\n                />\n                <NormalFormInput\n                  name=\"previousCompany\"\n                  label=\"Previous company name\"\n                  value={localFields.previousCompany}\n                  onChange={updateState}\n                />\n                <NormalFormInput\n                  name=\"livesIn\"\n                  label=\"Lives in\"\n                  value={localFields.livesIn}\n                  onChange={updateState}\n                />\n                <Selector\n                  label=\"Marital Status\"\n                  onSelect={(status) =>\n                    setLocalFields({\n                      ...localFields,\n                      maritalStatus: status.name,\n                    })\n                  }\n                  selectedItem={localFields.maritalStatus}\n                  list={[\n                    { id: '0', name: 'Married' },\n                    { id: '1', name: 'Single' },\n                  ]}\n                />\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <NormalFormInput\n                  name=\"businessName\"\n                  label=\"Business name\"\n                  value={localFields.businessName}\n                  onChange={updateState}\n                />\n                <NormalFormInput\n                  name=\"address\"\n                  label=\"Business address\"\n                  value={localFields.address}\n                  onChange={updateState}\n                />\n                <NormalFormInput\n                  name=\"email\"\n                  label=\"Business email\"\n                  value={localFields.email}\n                  onChange={updateState}\n                />\n                <NormalFormInput\n                  name=\"email\"\n                  label=\"Additional info\"\n                  value={localFields.additionalInfo}\n                  onChange={updateState}\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"mt-5 sm:mt-4 flex justify-end space-x-4 items-center\">\n            <Button gradient onClick={onSave} label=\"Save\" />\n          </div>\n        </div>\n      </Modal>\n      <Card\n        cardTitle=\"About\"\n        withCardHeadings={\n          authUser && (\n            <>\n              <Button\n                secondary\n                invert\n                bgColor=\"gray\"\n                onClick={() => setShowModal(true)}\n                Icon={AiOutlineEdit}\n                size=\"sm\"\n                label={'Edit'}\n              />\n            </>\n          )\n        }\n        content={\n          !isBusiness ? (\n            <div className=\"space-y-4\">\n              <KeyValue label=\"Current company\" text={company.currentCompany} />\n              <KeyValue\n                label=\"Previous company\"\n                text={company.previousCompany}\n              />\n              <KeyValue label=\"Lives In\" text={location.livesIn} />\n              <KeyValue label=\"Marital Status\" text={userData.maritalStatus} />\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <KeyValue label=\"Business name\" text={business?.name} />\n              <KeyValue label=\"Address\" text={location?.address} />\n              <KeyValue label=\"Business email\" text={business?.email} />\n              <KeyValue\n                label=\"Additional info\"\n                text={business?.additionalInfo}\n              />\n            </div>\n          )\n        }\n      />\n      <Modal\n        hideCloseBtn\n        header=\"Discard changes\"\n        open={showUnsaveModal}\n        setOpen={setShowUnsaveModal}\n      >\n        <>\n          <h1 className=\"text-lg dark:text-white text-gray-900 min-w-96\">\n            You have unsaved changes\n          </h1>\n          <p className=\"text-gray-500 \">Do you want to save it?</p>\n\n          <div className=\"mt-5 sm:mt-4 flex justify-end space-x-4 items-center\">\n            <Button\n              gradient\n              onClick={() => {\n                setShowUnsaveModal(false)\n                setShowModal(true)\n              }}\n              invert\n              label=\"No thanks\"\n            />\n            <Button\n              gradient\n              label=\"Discard\"\n              onClick={() => {\n                setShowUnsaveModal(false)\n                setLocalFields(initialState)\n              }}\n              loading={saving}\n            />\n          </div>\n        </>\n      </Modal>\n    </>\n  )\n}\n\nexport default About\n","import Card from 'components/atoms/Card'\nimport { Fragment, useState } from 'react'\nimport Section from 'components/atoms/Section'\nimport { CgDetailsMore } from 'react-icons/cg'\nimport { AiOutlineEdit } from 'react-icons/ai'\nimport Button from 'components/atoms/Button'\nimport { isEmpty, map, remove, update } from 'lodash'\nimport Modal from 'components/atoms/Modal'\nimport {\n  IBackground,\n  IExperience,\n  IParent,\n} from 'interfaces/UniversalInterface'\nimport NormalFormInput from 'components/atoms/NormalFormInput'\nimport { isAvailable } from 'utils/wait'\nimport { useUserContext } from 'context/UserContext'\nimport { getAccessToken, network } from 'helpers'\nimport Selector from 'components/atoms/Selector'\nimport { yearList } from 'values/values'\nimport { nanoid } from 'nanoid'\nimport Divider from 'components/atoms/Divider'\nimport { BiTrashAlt } from 'react-icons/bi'\nimport { PlusIcon } from '@heroicons/react/solid'\nimport EmptyState from 'components/atoms/EmptyState'\n\nconst ModalContentByType = ({\n  type,\n  localFields,\n  onChange,\n  onExperienceSelectUpdate,\n  onExperienceFieldUpdate,\n  getValue,\n  onInterestAdd,\n  onExperienceRemove,\n  addNewExperience,\n}: {\n  type: string\n  localFields: ILocalFields\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  onInterestAdd: () => void\n  getValue: (fieldName: string, idx: number) => string\n  onExperienceFieldUpdate: (\n    e: React.ChangeEvent<HTMLInputElement>,\n    idx: number\n  ) => void\n  onExperienceSelectUpdate: (\n    fieldName: string,\n    itemName: string,\n    idx: number\n  ) => void\n  onExperienceRemove: (id: string) => void\n  addNewExperience: () => void\n}) => {\n  switch (type) {\n    case 'summary':\n      return (\n        <Section\n          sectionTitle=\"Summary\"\n          Icon={CgDetailsMore}\n          content={\n            <>\n              <NormalFormInput\n                value={localFields.summary}\n                id={'summary'}\n                textarea\n                gridClass=\"col-span-2\"\n                onChange={onChange}\n                placeholder=\"Tell everyone about yourself\"\n              />\n            </>\n          }\n        />\n      )\n    case 'interests':\n      return (\n        <Section\n          sectionTitle=\"Interests\"\n          Icon={CgDetailsMore}\n          content={\n            <>\n              <div className=\"flex flex-col items-start gap-y-4\">\n                <div className=\"gap-x-4 gap-y-4 flex items-center flex-wrap\">\n                  {localFields.interests && localFields.interests.length > 0 ? (\n                    map(localFields.interests, (interest: any, idx: number) => (\n                      <Button\n                        key={interest + '-' + idx}\n                        gradient\n                        invert\n                        bgColor=\"pink\"\n                        label={interest.name}\n                      />\n                    ))\n                  ) : (\n                    <p className=\"text-gray-600 dark:text-gray-400\">\n                      Please add interest\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-x-4 \">\n                  <NormalFormInput\n                    value={localFields.interest}\n                    id=\"interest\"\n                    placeholder=\"Enter interest name\"\n                    gridClass=\"col-span-2\"\n                    onChange={onChange}\n                  />\n                  <Button\n                    gradient\n                    size=\"sm\"\n                    className=\"\"\n                    onClick={onInterestAdd}\n                    bgColor=\"pink\"\n                    label={'+ Add'}\n                  />\n                </div>\n              </div>\n            </>\n          }\n        />\n      )\n    case 'experiences':\n      return (\n        <Section\n          sectionTitle=\"Experiences\"\n          key=\"experience-edit-tab-52\"\n          Icon={CgDetailsMore}\n          content={\n            <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n              {localFields.experiences && localFields.experiences.length > 0 ? (\n                <>\n                  {map(localFields.experiences, (experience, idx: number) => (\n                    <Fragment key={idx}>\n                      <NormalFormInput\n                        id={`jobTitle-${idx}`}\n                        required\n                        name=\"jobTitle\"\n                        value={getValue('jobTitle', idx)}\n                        label={'Job title'}\n                        placeholder=\"What was/is your role in the company? \"\n                        onChange={(e) => onExperienceFieldUpdate(e, idx)}\n                      />\n                      <NormalFormInput\n                        id=\"companyName\"\n                        required\n                        name=\"companyName\"\n                        value={getValue('companyName', idx)}\n                        label={'Company name'}\n                        placeholder=\"What was/is the company name? \"\n                        onChange={(e) => onExperienceFieldUpdate(e, idx)}\n                      />\n                      <Selector\n                        key=\"joinDate\"\n                        required\n                        selectedItem={getValue('joinDate', idx)}\n                        list={yearList}\n                        label={'Join date'}\n                        placeholder=\"Started from\"\n                        onSelect={(item) => {\n                          onExperienceSelectUpdate('joinDate', item.name, idx)\n                        }}\n                      />\n                      <Selector\n                        key=\"leaveDate\"\n                        required\n                        selectedItem={getValue('leaveDate', idx)}\n                        list={yearList}\n                        label={'Leave date'}\n                        placeholder=\"Left on\"\n                        onSelect={(item) => {\n                          onExperienceSelectUpdate('leaveDate', item.name, idx)\n                        }}\n                      />\n                      <div className=\"col-span-2\">\n                        <NormalFormInput\n                          id=\"description\"\n                          textarea\n                          value={getValue('description', idx)}\n                          name=\"description\"\n                          label={'Description'}\n                          placeholder=\"Add a short description\"\n                          onChange={(e) => onExperienceFieldUpdate(e, idx)}\n                        />\n                      </div>\n                      <div className=\"col-span-2 \">\n                        <Divider\n                          withButton\n                          Icon={BiTrashAlt}\n                          onBtnClick={() => onExperienceRemove(experience.id)}\n                        />\n                      </div>\n                    </Fragment>\n                  ))}\n                </>\n              ) : null}\n              <div className=\"col-span-2\">\n                <Button\n                  className=\"mx-auto\"\n                  onClick={addNewExperience}\n                  label=\"Add new experience\"\n                  bgColor=\"yellow\"\n                  size=\"sm\"\n                />\n              </div>\n            </div>\n          }\n        />\n      )\n    default:\n      return <div>Error</div>\n  }\n}\n\ninterface ILocalFields extends IBackground {\n  interest: string\n}\n\nconst Background = ({\n  userData,\n  authUser,\n}: {\n  userData: IParent\n  authUser: boolean\n}) => {\n  const [showModal, setShowModal] = useState({ show: false, type: '' })\n\n  const { setValues, values } = useUserContext()\n\n  const [saving, setSaving] = useState(false)\n\n  const onChange = (e: any) => {\n    setUnsavedChanges(true)\n    const { value, id } = e.target\n    setLocalFields({ ...localFields, [id]: value })\n  }\n\n  const { background = {} } = isEmpty(values) ? {} : values\n  const {\n    summary = '',\n    interests = [],\n    experiences = [],\n  }: IBackground = background\n\n  const initialState = {\n    interest: '',\n    interests: [],\n    summary: '',\n    experiences: [],\n  }\n  const [localFields, setLocalFields] = useState<ILocalFields>(initialState)\n  const token = getAccessToken()\n\n  const onInterestAdd = () => {\n    if (localFields.interest) {\n      setUnsavedChanges(true)\n      setLocalFields({\n        ...localFields,\n        interests: [\n          ...localFields.interests,\n          { name: localFields.interest, id: nanoid(12) },\n        ],\n        interest: '',\n      })\n    }\n  }\n\n  const addOnTrigger = (type: string) => {\n    if (type === 'summary') {\n      setLocalFields({ ...localFields, summary: summary || '' })\n    } else if (type === 'interests') {\n      setLocalFields({ ...localFields, interests: [...interests] || [] })\n    } else if (type === 'experiences') {\n      setLocalFields({\n        ...localFields,\n        experiences: [...experiences] || [],\n      })\n    }\n  }\n\n  const addNewExperience = () => {\n    const newExperience: IExperience = {\n      id: nanoid(6),\n      jobTitle: '',\n      companyName: '',\n      joinDate: '',\n      leaveDate: '',\n      description: '',\n    }\n    setLocalFields({\n      ...localFields,\n      // @ts-ignore\n      experiences: [...localFields.experiences, newExperience],\n    })\n  }\n\n  const onSave = async () => {\n    try {\n      setSaving(true)\n      const { summary, interests } = localFields\n\n      let updatedData = { ...userData }\n      if (showModal.type === 'summary') {\n        updatedData = {\n          ...userData,\n          background: {\n            ...background,\n            summary,\n          },\n        }\n      } else if (showModal.type === 'interests') {\n        updatedData = {\n          ...userData,\n          background: {\n            ...background,\n            interests,\n          },\n        }\n      } else if (showModal.type === 'experiences') {\n        updatedData = {\n          ...userData,\n\n          background: {\n            ...background,\n            experiences:\n              localFields.experiences && localFields.experiences.length > 0\n                ? [...localFields.experiences]\n                : experiences,\n          },\n        }\n      }\n\n      //@ts-ignore\n      delete updatedData.password\n\n      setValues({ ...updatedData })\n\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      // add data to local state\n      setShowModal({ ...showModal, show: false })\n      setUnsavedChanges(false)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const onCancel = () => {\n    if (unsavedChanges) {\n      setShowUnsaveModal(true)\n    } else {\n      setShowUnsaveModal(false)\n\n      setUnsavedChanges(false)\n      if (!showModal.show) {\n        setLocalFields(initialState)\n      }\n    }\n    setShowModal({ ...showModal, show: false })\n  }\n\n  const [unsavedChanges, setUnsavedChanges] = useState(false)\n\n  const [showUnsaveModal, setShowUnsaveModal] = useState(false)\n\n  const onExperienceFieldUpdate = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    idx: number\n  ) => {\n    const { value, id } = e.target\n    setUnsavedChanges(true)\n    if (localFields?.experiences && localFields?.experiences.length > 0) {\n      update(localFields?.experiences[idx], `${id}`, () => value)\n    }\n    setLocalFields({ ...localFields })\n  }\n\n  const onExperienceSelectUpdate = (\n    fieldName: string,\n    name: string,\n    idx: number\n  ) => {\n    setUnsavedChanges(true)\n    if (localFields?.experiences && localFields?.experiences.length > 0) {\n      update(localFields?.experiences[idx], `${fieldName}`, () => name)\n    }\n    setLocalFields({ ...localFields })\n  }\n\n  const getValue = (fieldName: string, idx: number): string => {\n    // @ts-ignore\n    return localFields.experiences[idx][fieldName]\n  }\n\n  const onExperienceRemove = (id: string) => {\n    setUnsavedChanges(true)\n    if (localFields?.experiences && localFields?.experiences.length > 0) {\n      remove(localFields.experiences, (item) => item.id === id)\n    }\n    setLocalFields({ ...localFields })\n  }\n\n  return (\n    <>\n      <Modal\n        disableBackdropClose={false}\n        open={showModal.show}\n        onClose={onCancel}\n        setOpen={() => setShowModal({ show: false, type: '' })}\n        header=\"Edit Background\"\n      >\n        <div>\n          <div className=\"overflow-y-hidden min-h-64 min-w-256 p-2 custom-scroll-mini darker my-4 max-h-full\">\n            <div className=\"space-y-12 \">\n              <ModalContentByType\n                addNewExperience={addNewExperience}\n                onChange={onChange}\n                onExperienceSelectUpdate={onExperienceSelectUpdate}\n                onExperienceFieldUpdate={onExperienceFieldUpdate}\n                onExperienceRemove={onExperienceRemove}\n                localFields={localFields}\n                onInterestAdd={onInterestAdd}\n                getValue={getValue}\n                type={showModal.type}\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-5 sm:mt-4 flex justify-end space-x-4 items-center\">\n            <Button\n              gradient\n              disabled={saving}\n              label=\"Save\"\n              onClick={onSave}\n              loading={saving}\n            />\n          </div>\n        </div>\n      </Modal>\n      <Card\n        cardTitle=\"Background\"\n        content={\n          <div className=\"space-y-10\">\n            <Section\n              sectionTitle=\"Summary\"\n              Icon={CgDetailsMore}\n              withSectionHeadings={\n                authUser &&\n                summary && (\n                  <div>\n                    <Button\n                      secondary\n                      invert\n                      bgColor=\"gray\"\n                      onClick={() => {\n                        addOnTrigger('summary')\n                        setShowModal({ show: true, type: 'summary' })\n                      }}\n                      Icon={AiOutlineEdit}\n                      size=\"sm\"\n                      label={'Edit'}\n                    />\n                  </div>\n                )\n              }\n              content={\n                <div>\n                  {isAvailable('summary', background) ? (\n                    <p>{summary}</p>\n                  ) : (\n                    <EmptyState\n                      title=\"No summary found\"\n                      subtitle=\"Add something about yourself.\"\n                      btnText=\"Add summary\"\n                      onBtnClick={() =>\n                        setShowModal({ show: true, type: 'summary' })\n                      }\n                      showEditOption={authUser}\n                      BtnIcon={PlusIcon}\n                      iconUrl={'/summary.png'}\n                    />\n                  )}\n                </div>\n              }\n            />\n            <Section\n              sectionTitle=\"Interests\"\n              Icon={CgDetailsMore}\n              withSectionHeadings={\n                interests &&\n                interests.length > 0 &&\n                authUser && (\n                  <div>\n                    <Button\n                      secondary\n                      invert\n                      bgColor=\"gray\"\n                      onClick={() => {\n                        addOnTrigger('interests')\n                        setShowModal({ show: true, type: 'interests' })\n                      }}\n                      Icon={AiOutlineEdit}\n                      size=\"sm\"\n                      label={'Edit'}\n                    />\n                  </div>\n                )\n              }\n              content={\n                <div>\n                  {interests && interests.length > 0 ? (\n                    <div className=\"flex items-center flex-wrap justify-start gap-x-4\">\n                      {map(interests, (interest: any, idx: number) => (\n                        <Button\n                          key={interest.id}\n                          className=\"pointer-events-none\"\n                          gradient\n                          invert\n                          bgColor=\"pink\"\n                          label={interest.name}\n                        />\n                      ))}\n                    </div>\n                  ) : (\n                    <EmptyState\n                      title=\"No interests added\"\n                      subtitle=\"Get started by adding your interests to your profile.\"\n                      btnText=\"Add interests\"\n                      BtnIcon={PlusIcon}\n                      showEditOption={authUser}\n                      iconUrl={'/interest.png'}\n                      onBtnClick={() =>\n                        setShowModal({ show: true, type: 'interests' })\n                      }\n                    />\n                  )}\n                </div>\n              }\n            />\n            <Section\n              sectionTitle=\"Experiences\"\n              Icon={CgDetailsMore}\n              withSectionHeadings={\n                authUser &&\n                experiences &&\n                experiences.length > 0 && (\n                  <div>\n                    <Button\n                      secondary\n                      invert\n                      bgColor=\"gray\"\n                      onClick={() => {\n                        addOnTrigger('experiences')\n                        setShowModal({ show: true, type: 'experiences' })\n                      }}\n                      Icon={AiOutlineEdit}\n                      size=\"sm\"\n                      label={'Edit'}\n                    />\n                  </div>\n                )\n              }\n              content={\n                <div className=\"space-y-8\">\n                  {experiences && experiences.length > 0 ? (\n                    map(experiences, (exp, idx: number) => {\n                      return (\n                        <div\n                          key={idx}\n                          className={` ${\n                            idx !== 1\n                              ? 'border-b border-gray-200 dark:border-gray-600 pb-4'\n                              : ''\n                          }`}\n                        >\n                          <h4 className=\"job_title font-medium dark:text-white text-gray-900\">\n                            {exp.jobTitle}\n                          </h4>\n                          <h5 className=\"company_name link-hover block text-left cursor-pointer \">\n                            {exp.companyName}\n                          </h5>\n                          <span className=\"job_duration text-gray-300 font-semibold text-sm\">\n                            {exp.joinDate} - {exp.leaveDate}\n                          </span>\n                          <p className=\"company_description text-gray-400 mt-3\">\n                            {exp.description}\n                          </p>\n                        </div>\n                      )\n                    })\n                  ) : (\n                    <EmptyState\n                      title=\"No experience\"\n                      subtitle=\"Get started by adding a new experience to your profile.\"\n                      btnText=\"Add experience\"\n                      BtnIcon={PlusIcon}\n                      showEditOption={authUser}\n                      onBtnClick={() => {\n                        if (experiences && experiences.length === 0) {\n                          addNewExperience()\n                        }\n                        setShowModal({ show: true, type: 'experiences' })\n                      }}\n                      iconUrl={'/experience.png'}\n                    />\n                  )}\n                </div>\n              }\n            />\n          </div>\n        }\n      />\n\n      <Modal\n        hideCloseBtn\n        header=\"Discard changes\"\n        open={showUnsaveModal}\n        setOpen={setShowUnsaveModal}\n      >\n        <>\n          <h1 className=\"text-lg dark:text-white text-gray-900 min-w-96\">\n            You have unsaved changes\n          </h1>\n          <p className=\"text-gray-500 \">Do you want to save it?</p>\n\n          <div className=\"mt-5 sm:mt-4 flex justify-end space-x-4 items-center\">\n            <Button\n              gradient\n              onClick={() => {\n                setShowUnsaveModal(false)\n                setShowModal({ ...showModal, show: true })\n              }}\n              invert\n              label=\"No thanks\"\n            />\n            <Button\n              gradient\n              label=\"Discard\"\n              onClick={() => {\n                setShowUnsaveModal(false)\n                setLocalFields(initialState)\n              }}\n            />\n          </div>\n        </>\n      </Modal>\n    </>\n  )\n}\n\nexport default Background\n","import { classNames } from 'utils/classNames'\n\nconst Tabs = ({\n  tabs,\n  currentTab,\n  setCurrentTab,\n}: {\n  tabs: { name: string; count: number }[]\n  currentTab: string\n  setCurrentTab: React.Dispatch<React.SetStateAction<string>>\n}) => {\n  return (\n    <div>\n      <div className=\"sm:hidden\">\n        <label htmlFor=\"tabs\" className=\"sr-only\">\n          Select a tab\n        </label>\n        <select\n          id=\"tabs\"\n          name=\"tabs\"\n          className=\"block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-pink-500 sm:text-sm rounded-md\"\n          //@ts-ignore\n          defaultValue={tabs.find((tab) => tab?.current)?.name}\n        >\n          {tabs.map((tab) => (\n            <option key={tab?.name}>{tab?.name}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"hidden sm:block\">\n        <div className=\"border-b border-gray-200 dark:border-gray-600\">\n          <nav className=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">\n            {tabs.map((tab) => (\n              <div\n                key={tab.name}\n                onClick={() => setCurrentTab(tab.name)}\n                className={classNames(\n                  tab.name === currentTab\n                    ? 'border-pink-500 text-pink-600'\n                    : 'border-transparent text-gray-400  ',\n                  'whitespace-nowrap cursor-pointer flex py-4 px-1 border-b-2 font-medium text-sm'\n                )}\n                aria-current={tab.name === currentTab ? 'page' : undefined}\n              >\n                {tab.name}\n                {tab.count ? (\n                  <span\n                    className={classNames(\n                      tab.name === currentTab\n                        ? 'bg-pink-100 text-pink-600'\n                        : 'bg-gray-100 text-gray-900',\n                      'hidden ml-3 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block'\n                    )}\n                  >\n                    {tab.count}\n                  </span>\n                ) : null}\n              </div>\n            ))}\n          </nav>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Tabs\n","import Card from 'components/atoms/Card'\nimport { useEffect, useState } from 'react'\nimport { map } from 'lodash'\nimport { IParent, IRecommendation } from 'interfaces/UniversalInterface'\nimport { getAccessToken, network } from 'helpers'\nimport Tabs from 'components/atoms/Tabs'\nimport Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport { Form, Formik } from 'formik'\nimport FormInput from 'components/atoms/FormInput'\nimport * as Yup from 'yup'\nimport { useRouter } from 'hooks/useRouter'\nimport { useUserContext } from 'context/UserContext'\n\nconst Recommendations = ({\n  recommendation,\n  authUser,\n  userData,\n  secondary = false,\n}: {\n  authUser: boolean\n  secondary?: boolean\n  userData: IParent\n  recommendation?: { received: IRecommendation[]; given: IRecommendation[] }\n}) => {\n  const [fetchReceived, setFetchReceived] = useState<any[]>([])\n\n  const [fetchGiven, setFetchGiven] = useState<any[]>([])\n  const fetchReceivedList = async () => {\n    try {\n      const config = {\n        users: map(recommendation?.received, (g) => g.userId),\n      }\n      const { data } = await network.post('/user/getUsers', config, {\n        headers: { Authorization: token },\n      })\n\n      const _r = map(data.data, (r, idx: number) => ({\n        text: recommendation?.received[idx]?.text || 'Not found',\n        user: r,\n      }))\n\n      setFetchReceived(_r)\n      // setFetchGiven(_g)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const fetchGivenList = async () => {\n    try {\n      const config = {\n        users: map(recommendation?.given, (g) => g.userId),\n      }\n      const { data } = await network.post('/user/getUsers', config, {\n        headers: { Authorization: token },\n      })\n\n      const _g = map(data.data, (g, idx: number) => ({\n        text: recommendation?.given[idx].text,\n        user: g,\n      }))\n\n      setFetchGiven(_g)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    if (recommendation && recommendation?.received.length > 0) {\n      fetchReceivedList()\n    }\n  }, [recommendation?.received])\n  useEffect(() => {\n    // @ts-ignore\n    if (recommendation && recommendation?.given.length > 0) {\n      fetchGivenList()\n    }\n  }, [recommendation?.given])\n\n  const tabs = [\n    {\n      name: 'Received',\n      count: recommendation?.received ? recommendation.received.length : 0,\n    },\n    {\n      name: 'Given',\n      count: recommendation?.given ? recommendation.given.length : 0,\n    },\n  ]\n  const [currentTab, setCurrentTab] = useState('Received')\n\n  const [showModal, setShowModal] = useState(false)\n  const onCancel = () => setShowModal(false)\n\n  const initialState = { recommendation: '' }\n  const validationSchema = Yup.object({\n    recommendation: Yup.string().min(50).max(250),\n  })\n  const route: any = useRouter()\n  const userIdFromParam = route?.match?.params?.userId\n\n  const { setValues } = useUserContext()\n  const token = getAccessToken()\n\n  const onSave = async (values: any) => {\n    setSaving(true)\n    try {\n      if (values.recommendation) {\n        const config = { text: values.recommendation }\n        await network.post(\n          `/user/giveRecommendation/${userIdFromParam}`,\n          config,\n          {\n            headers: { Authorization: token },\n          }\n        )\n        onCancel()\n\n        if (!authUser) {\n          setValues({\n            ...userData,\n            recommendation: {\n              received: [\n                // @ts-ignore\n                ...userData?.recommendation?.received,\n                { text: values.recommendation, userId: null },\n              ],\n              // @ts-ignore\n              given: [...userData?.recommendation?.given],\n            },\n          })\n          fetchReceivedList()\n        }\n      }\n    } catch (error) {\n      console.error(error.message)\n    } finally {\n      setSaving(false)\n    }\n  }\n  const [saving, setSaving] = useState(false)\n\n  return (\n    <>\n      <Modal\n        open={showModal}\n        onClose={onCancel}\n        setOpen={setShowModal}\n        header={'Add recommendation'}\n      >\n        <div className=\"\">\n          <div className=\"overflow-y-auto min-w-132 min-h-32  custom-scroll-mini darker mt-4 px-1\">\n            <Formik\n              onSubmit={onSave}\n              initialValues={initialState}\n              validationSchema={validationSchema}\n            >\n              <Form className=\"py-2\">\n                <FormInput\n                  textarea\n                  placeholder=\"Add your recommendation\"\n                  name=\"recommendation\"\n                  id=\"recommendation\"\n                />\n                <div className=\"mt-5 sm:mt-4 flex justify-end  items-center\">\n                  <Button\n                    gradient\n                    loading={saving}\n                    disabled={saving}\n                    onClick={onSave}\n                    type=\"submit\"\n                    label=\"Save\"\n                  />\n                </div>\n              </Form>\n            </Formik>\n          </div>\n        </div>\n      </Modal>\n      <Card\n        secondary={secondary}\n        cardTitle=\"Recommendations\"\n        withCardHeadings={\n          <>\n            <Tabs\n              tabs={tabs}\n              currentTab={currentTab}\n              setCurrentTab={setCurrentTab}\n            />\n          </>\n        }\n        content={\n          <div className=\"grid mt-6  sm:grid-cols-1 md:grid-cols-1 space-y-12\">\n            {currentTab === 'Received' &&\n              (fetchReceived && fetchReceived.length > 0 ? (\n                map(fetchReceived, (recom, idx) => {\n                  return (\n                    <div\n                      key={idx}\n                      className=\" rounded-md pb-2 border-gray-200 dark:border-gray-600 border relative w-full p-4\"\n                    >\n                      <p className=\"my-2 mt-4 italic text-gray-500 dark:text-gray-400 text-center font-medium text-lg\">\n                        “ {recom.text} ”\n                      </p>\n                      <div className=\"py-1 mt-1 dark:text-gray-400 flex items-center text-right italic\">\n                        By,\n                        <span className=\"mx-2 cursor-pointer flex items-center hover:underline\">\n                          {recom?.user?.fullName}\n                          <img\n                            src={\n                              recom?.user?.profilePicture\n                                ? recom?.user?.profilePicture\n                                : 'https://robohash.org/honey?set=set1'\n                            }\n                            alt=\"by-name\"\n                            className=\"h-6 w-6 rounded-full ml-2\"\n                          />\n                        </span>\n                      </div>\n                    </div>\n                  )\n                })\n              ) : (\n                <div>\n                  {authUser ? (\n                    <p className=\"text-center text-gray-400\">\n                      No recommendation given yet.\n                    </p>\n                  ) : (\n                    <Button\n                      label=\"Add recommendation\"\n                      className=\"flex\"\n                      gradient\n                      onClick={() => setShowModal(true)}\n                    />\n                  )}\n                </div>\n              ))}\n            {currentTab === 'Given' &&\n              (fetchGiven && fetchGiven.length > 0 ? (\n                map(fetchGiven, (recom, idx) => {\n                  return (\n                    <div\n                      key={idx}\n                      className=\" rounded-md pb-2 border-gray-200 dark:border-gray-600 border relative w-full p-4\"\n                    >\n                      <p className=\"my-2 mt-4 italic text-gray-500 dark:text-gray-400 text-center font-medium text-lg\">\n                        “ {recom.text} ”\n                      </p>\n                      <div className=\"py-1 mt-1 flex items-center dark:text-gray-400 text-right italic\">\n                        By,\n                        <span className=\"mx-2 cursor-pointer flex items-center hover:underline\">\n                          {recom?.user?.fullName}\n                          <img\n                            src={\n                              recom?.user?.profilePicture\n                                ? recom?.user?.profilePicture\n                                : 'https://robohash.org/honey?set=set1'\n                            }\n                            alt=\"by-name\"\n                            className=\"h-6 w-6 rounded-full ml-2\"\n                          />\n                        </span>\n                      </div>\n                    </div>\n                  )\n                })\n              ) : (\n                <div>\n                  <p className=\"text-center text-gray-400\">\n                    No recommendation given yet.\n                  </p>\n                </div>\n              ))}\n          </div>\n        }\n      />\n    </>\n  )\n}\n\nexport default Recommendations\n","import CustomFooter from 'components/CustomFooter'\nimport Cover from 'pages/profile/Cover'\nimport About from 'pages/profile/About'\nimport Background from 'pages/profile/Background'\nimport Recommendations from 'pages/profile/Recommendations'\nimport Following from 'pages/profile/Following'\nimport PeopleAlsoViewed from 'pages/profile/PeopleAlsoViewed'\nimport Layout from 'pages/profile/Layout'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { useRouter } from 'hooks/useRouter'\nimport { getAccessToken, network } from 'helpers'\nimport { useEffect } from 'react'\nimport { useUserContext } from 'context/UserContext'\nimport ProfileStrength from 'components/ProfileStrength'\nimport Sidebar from 'components/Sidebar'\nimport jwt_decode from 'jwt-decode'\nimport { useDispatch } from 'react-redux'\nimport { loadUser } from 'state/Redux/Actions/authActions'\nimport PublicProfileCard from 'components/PublicProfileCard'\n\nconst getUniqId = (str?: string) => {\n  if (str) {\n    const arr = str.split('_')\n    return arr[arr.length - 1]\n  }\n}\n\nconst Profile = ({ userData }: { userData: IParent }) => {\n  const route: any = useRouter()\n  const { viewMode, userId: userIdFromParam } = route?.match?.params\n\n  const { setValues } = useUserContext()\n\n  // #1 first get userId from params\n  // #2 check user id from token decoded object\n  // #3 if it matches then current user is authUser (owner of profile)\n  const authUser =\n    getUniqId(userIdFromParam) === userData.myId && viewMode === 'private'\n  const token = getAccessToken()\n  // @ts-ignore\n  var decoded = jwt_decode(token)\n\n  const checkOnlyId = getUniqId(userIdFromParam) === userData.myId\n\n  const getProfileById = async () => {\n    if (!authUser) {\n      const { data } = await network.post(\n        '/user/getById/' + userIdFromParam,\n        {},\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      // @ts-ignore\n      // @ts-ignore\n      setValues({ ...data.data, myId: decoded.id })\n    } else {\n      // @ts-ignore\n      setValues({ ...userData, myId: decoded.id })\n    }\n  }\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    getProfileById()\n    return () => {\n      dispatch(loadUser())\n    }\n  }, [userIdFromParam])\n\n  const commonProps = { authUser, userData }\n\n  return (\n    <div className=\"bg-gray-100 dark:bg-gray-800\">\n      <Sidebar />\n      <div className=\"flex\">\n        <div\n          className=\"mx-auto min-h-screen pt-8 w-full\"\n          style={{ maxWidth: '110rem' }}\n        >\n          <Cover {...commonProps} />\n\n          <div className=\"my-6\">\n            <Layout\n              firstCol={\n                <div className=\"space-y-12\">{<About {...commonProps} />}</div>\n              }\n              secondCol={\n                <div className=\"space-y-12\">\n                  <Background {...commonProps} />\n                  <Recommendations\n                    {...commonProps}\n                    recommendation={userData.recommendation}\n                  />\n                  <Following\n                    list={userData.following}\n                    interests={userData?.background?.interests}\n                  />\n                </div>\n              }\n              thirdCol={\n                <div className=\"space-y-12\">\n                  {checkOnlyId && <PublicProfileCard userData={userData} />}\n                  {checkOnlyId && <ProfileStrength {...commonProps} />}\n                  <PeopleAlsoViewed {...commonProps} />\n                </div>\n              }\n            />\n          </div>\n        </div>\n      </div>\n      <CustomFooter />\n    </div>\n  )\n}\n\nexport default Profile\n"],"sourceRoot":""}