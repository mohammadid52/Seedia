{"version":3,"sources":["components/atoms/Toggle.tsx","pages/account/student/EducationStep.jsx"],"names":["Toggle","enabled","setEnabled","text","subText","className","Group","as","Label","passive","Description","checked","onChange","classNames","EducationStep","user","history","useHistory","useState","saving","setSaving","useEffect","other","accountFilled","console","log","push","links","DASHBAORD","accountType","accountFinishedStep","CHOOSE_TEMPLATE","LOCATION_S","renderPathByType","CHOOSE_ACCOUNT","redirection","setValues","useUserContext","onSubmit","values","a","token","getAccessToken","updatedData","background","education","id","nanoid","name","grade","grade_subject","from","fields","start_year","to","end_year","network","post","headers","Authorization","password","STUDENT_STEP_2","error","validationSchema","Yup","required","above_sixteen","setFields","Layout","title","withButton","TextButton","onClick","BUSINESS_STEP_1","subtitle","AnimatedDiv","initialValues","StudentStepOne","enableReinitialize","FormInput","label","Selector","list","yearList","selectedItem","placeholder","onSelect","item","yearListWithFuture","color","Button","fullWidth","rounded","gradient","type","loading"],"mappings":"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","file":"static/js/8.2a232575.chunk.js","sourcesContent":["import { Switch } from '@headlessui/react'\nimport { classNames } from 'utils/classNames'\n\nconst Toggle = ({\n  enabled,\n  setEnabled,\n  text,\n  subText,\n  className,\n}: {\n  enabled: boolean\n  setEnabled: React.Dispatch<React.SetStateAction<boolean>>\n  text: string\n  subText?: string\n  className?: string\n}) => {\n  return (\n    <Switch.Group\n      as=\"div\"\n      className={`flex items-center justify-between ${className}`}\n    >\n      <span className=\"flex-grow flex flex-col items-start\">\n        <Switch.Label\n          as=\"span\"\n          className=\"text-sm font-medium text-white\"\n          passive\n        >\n          {text}\n        </Switch.Label>\n        <Switch.Description as=\"span\" className=\"text-sm text-gray-500\">\n          {subText}\n        </Switch.Description>\n      </span>\n      <Switch\n        checked={enabled}\n        onChange={setEnabled}\n        className={classNames(\n          enabled\n            ? 'bg-gradient-to-r from-pink-500 to-yellow-500'\n            : 'bg-gray-800',\n          'relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n        )}\n      >\n        <span\n          aria-hidden=\"true\"\n          className={classNames(\n            enabled ? 'translate-x-5' : 'translate-x-0',\n            'pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200'\n          )}\n        />\n      </Switch>\n    </Switch.Group>\n  )\n}\nexport default Toggle\n","/* eslint-disable quotes */\nimport AnimatedDiv from 'components/animation/AnimatedDiv'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport Selector from 'components/atoms/Selector'\nimport TextButton from 'components/atoms/TextButton'\nimport Toggle from 'components/atoms/Toggle'\nimport { links } from 'constants/Links'\nimport Layout from 'containers/Layout'\nimport { useUserContext } from 'context/UserContext'\nimport { Form, Formik } from 'formik'\nimport { getAccessToken, network, renderPathByType } from 'helpers'\nimport { StudentStepOne } from 'initials'\nimport { nanoid } from 'nanoid'\nimport { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { yearList, yearListWithFuture } from 'values/values'\nimport * as Yup from 'yup'\n\nconst EducationStep = ({ user }) => {\n  const history = useHistory()\n\n  const [saving, setSaving] = useState(false)\n\n  const redirection = () => {\n    if (user) {\n      if (!user?.other?.accountFilled) {\n        if (user.other?.accountType === 'education') {\n          if (user.other?.accountFinishedStep === 'location') {\n            // redirect to choose template page\n            console.log('redirect to choose template page')\n            return history.push(links.CHOOSE_TEMPLATE)\n          } else if (user.other?.accountFinishedStep === 'education') {\n            // redirect to location page\n            console.log('redirect to location page')\n            return history.push(links.LOCATION_S)\n          } else if (user.other?.accountFinishedStep === 'chooseAccount') {\n            console.log('get the accountType and redirect as per account type')\n            // get the accountType and redirect as per account type\n            return history.push(renderPathByType(user.other?.accountType))\n          } else if (user.other?.accountFinishedStep === 'signup') {\n            // redirect to choose Account page\n            console.log('redirect to choose Account page')\n            return history.push(links.CHOOSE_ACCOUNT)\n          }\n        } else {\n          if (user && user.other) {\n            console.log('get the accountType and redirect as per account type')\n            // get the accountType and redirect as per account type\n            return history.push(renderPathByType(user.other.accountType))\n          }\n        }\n      } else {\n        //  redirect to dashboard\n        console.log('redirect to dashboard')\n        return history.push(links.DASHBAORD)\n      }\n    }\n  }\n\n  useEffect(() => {\n    redirection()\n  }, [user?.other?.accountFilled, user?.other?.accountFinishedStep])\n\n  const { setValues } = useUserContext()\n\n  const onSubmit = async (values) => {\n    try {\n      const token = getAccessToken()\n\n      setSaving(true)\n      const updatedData = {\n        ...user,\n        background: {\n          ...user.background,\n          education: [\n            {\n              id: nanoid(9),\n              name: values.education,\n              grade: values.grade,\n              grade_subject: values.grade_subject,\n              from: fields.start_year,\n              to: fields.end_year,\n            },\n          ],\n        },\n        other: {\n          ...user.other,\n          accountFinishedStep: 'education',\n        },\n      }\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n      //@ts-ignore\n      delete updatedData.password\n      setValues({ ...updatedData })\n\n      history.push(links.STUDENT_STEP_2)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const validationSchema = Yup.object({\n    education: Yup.string().required('Please add education'),\n    grade: Yup.string().required('Please add grade'),\n    grade_subject: Yup.string().required('Please add grade subject'),\n  })\n\n  const [fields, setFields] = useState({\n    start_year: '',\n    end_year: '',\n    above_sixteen: false,\n  })\n\n  return (\n    <Layout\n      title=\"Education Information\"\n      withButton={\n        <TextButton\n          text=\"or create a business account\"\n          onClick={() => history.push(links.BUSINESS_STEP_1)}\n        />\n      }\n      subtitle={\n        <p>\n          Your profile helps you find new people and <br /> oppurtunites\n        </p>\n      }\n    >\n      <AnimatedDiv className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white dark:bg-gray-800 border border-white dark:border-gray-700 py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n          <Formik\n            initialValues={StudentStepOne}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            enableReinitialize\n          >\n            <Form className=\"space-y-6\">\n              <FormInput\n                label=\"Education\"\n                id=\"education\"\n                name=\"education\"\n                required\n              />\n\n              <FormInput\n                label=\"Grade / title\"\n                id=\"grade\"\n                name=\"grade\"\n                required\n              />\n              <FormInput\n                label=\"Graduation subject\"\n                id=\"grade_subject\"\n                name=\"grade_subject\"\n                required\n              />\n              <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2\">\n                <div className=\"\">\n                  <Selector\n                    label={'Start year'}\n                    list={yearList}\n                    selectedItem={fields.start_year}\n                    placeholder={'-'}\n                    onSelect={(item) =>\n                      setFields({\n                        ...fields,\n                        start_year: item.name,\n                      })\n                    }\n                  />\n                </div>\n\n                <div className=\"\">\n                  <Selector\n                    label={'End year (or expected)'}\n                    placeholder={'-'}\n                    list={yearListWithFuture}\n                    selectedItem={fields.end_year}\n                    onSelect={(item) =>\n                      setFields({\n                        ...fields,\n                        end_year: item.name,\n                      })\n                    }\n                  />\n                </div>\n              </div>\n              <div>\n                <Toggle\n                  className=\"mt-2\"\n                  enabled={fields.above_sixteen}\n                  text={\"I'm over 16 years old\"}\n                  setEnabled={() =>\n                    setFields({\n                      ...fields,\n                      above_sixteen: !fields.above_sixteen,\n                    })\n                  }\n                />\n              </div>\n              <div>\n                <TextButton\n                  color=\"gray\"\n                  onClick={() => history.push(links.CHOOSE_ACCOUNT)}\n                  text={\"I'm not a student\"}\n                  className=\"text-center py-2\"\n                />\n              </div>\n\n              <div>\n                <Button\n                  fullWidth\n                  rounded=\"rounded-lg\"\n                  gradient\n                  type=\"submit\"\n                  loading={saving}\n                  label=\"Next Step\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </AnimatedDiv>\n    </Layout>\n  )\n}\n\nexport default EducationStep\n"],"sourceRoot":""}