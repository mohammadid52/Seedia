{"version":3,"sources":["pages/account/personal/LocationStep.tsx"],"names":["yourhandle","require","LastStep","user","useState","isLoaded","history","useHistory","saving","setSaving","useEffect","other","accountFilled","console","log","push","links","DASHBAORD","accountFinishedStep","CHOOSE_TEMPLATE","LOCATION_P","renderPathByType","accountType","CHOOSE_ACCOUNT","redirection","setValues","useUserContext","onSubmit","values","a","token","getAccessToken","updatedData","location","country","pincode","state","city","livesIn","network","post","headers","Authorization","password","error","validationSchema","Yup","required","matches","min","max","shortName","longName","selectedLocation","setSelectedLocation","countries","getCountries","disabledItem","msg","name","disabled","stateList","setStateList","cityList","setCityList","title","firstName","subtitle","className","initialValues","PersonalStepTwo","label","list","placeholder","onSelect","item","states","getStatesByShort","updated","map","length","updateStates","cities","getCities","updateCities","id","fullWidth","rounded","type","gradient","loading","text","onClick","COMPANY","EDUCATION"],"mappings":"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","file":"static/js/7.c9f681a5.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport TextButton from 'components/atoms/TextButton'\nimport Loading from 'components/Loading'\nimport { useHistory } from 'react-router-dom'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { PersonalStepTwo } from 'initials'\nimport { links } from 'constants/Links'\nimport Layout from 'containers/Layout'\nimport { map } from 'lodash'\nimport { getAccessToken, network, renderPathByType } from 'helpers'\nimport FormSelector from 'components/atoms/FormSelector'\nimport AnimatedDiv from 'components/animation/AnimatedDiv'\nimport { useUserContext } from 'context/UserContext'\nimport { IParent } from 'interfaces/UniversalInterface'\n\nconst yourhandle = require('countrycitystatejson')\n\nconst LastStep = ({ user }: { user?: IParent }) => {\n  const [isLoaded] = useState(true)\n  const history = useHistory()\n\n  const [saving, setSaving] = useState(false)\n\n  const goBack = () => {\n    history.push(\n      user && user.other && user?.other.accountType === 'personal'\n        ? links.COMPANY\n        : links.EDUCATION\n    )\n  }\n  const redirection = () => {\n    if (user) {\n      if (!user?.other?.accountFilled) {\n        if (user.other?.accountFinishedStep === 'location') {\n          // redirect to choose template page\n          console.log('redirect to choose template page')\n          return history.push(links.CHOOSE_TEMPLATE)\n        } else if (user.other?.accountFinishedStep === 'company') {\n          // redirect to location page\n          console.log('redirect to location page')\n          return history.push(links.LOCATION_P)\n        } else if (user.other?.accountFinishedStep === 'chooseAccount') {\n          console.log('get the accountType and redirect as per account type')\n          // get the accountType and redirect as per account type\n          return history.push(renderPathByType(user.other?.accountType))\n        } else if (user.other?.accountFinishedStep === 'signup') {\n          // redirect to choose Account page\n          console.log('redirect to choose Account page')\n          return history.push(links.CHOOSE_ACCOUNT)\n        }\n      } else {\n        //  redirect to dashboard\n        console.log('redirect to dashboard')\n        return history.push(links.DASHBAORD)\n      }\n    }\n  }\n\n  useEffect(() => {\n    redirection()\n  }, [])\n\n  const { setValues } = useUserContext()\n\n  const onSubmit = async (values: {\n    country: any\n    pincode: any\n    state: any\n    city: any\n  }) => {\n    try {\n      const token = getAccessToken()\n      setSaving(true)\n\n      let updatedData = {\n        ...user,\n        location: {\n          ...user?.location,\n          country: values.country,\n          pincode: values.pincode,\n          state: values.state,\n          city: values.city,\n          livesIn: `${values.city} ${values.country}`,\n        },\n        other: {\n          ...user?.other,\n          accountFilled: false,\n          accountFinishedStep: 'location',\n        },\n      }\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      //@ts-ignore\n      delete updatedData.password\n      setValues({ ...updatedData })\n\n      history.push(links.CHOOSE_TEMPLATE)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n  const validationSchema = Yup.object({\n    state: Yup.string().required(),\n    country: Yup.string().required(),\n    city: Yup.string().required(),\n    pincode: Yup.string()\n      .required()\n      .matches(/^[0-9]+$/, 'Must be only digits')\n      .min(6, 'Must be exactly 6 digits')\n      .max(6, 'Must be exactly 6 digits'),\n  })\n\n  const [selectedLocation, setSelectedLocation] = useState({\n    country: { shortName: '', longName: '' },\n    state: '',\n    city: '',\n  })\n\n  const countries = yourhandle.getCountries()\n\n  const disabledItem = (msg: string) => [\n    {\n      name: msg,\n      disabled: true,\n    },\n  ]\n\n  const updateStates = (shortName: string) => {\n    const states = yourhandle.getStatesByShort(shortName)\n    const updated = map(states, (state) => ({ name: state }))\n    if (updated && updated.length > 0) {\n      setStateList(updated)\n    } else {\n      setStateList(disabledItem('No state found for selected country.'))\n    }\n  }\n\n  const updateCities = (shortName: string, state: any) => {\n    const cities = yourhandle.getCities(shortName, state)\n    const updated = map(cities, (city) => ({ name: city }))\n\n    if (updated && updated.length > 0) {\n      setCityList(updated)\n    } else {\n      setCityList(disabledItem('No city found for selected state.'))\n    }\n  }\n\n  const [stateList, setStateList] = useState<any[]>([])\n\n  const [cityList, setCityList] = useState<any>([])\n\n  return !isLoaded ? (\n    <Loading />\n  ) : (\n    <Layout\n      title={`Welcome, ${user?.firstName || 'Human'}!`}\n      subtitle={\n        <p>\n          Create a profile, connect with acquaintances and discuss topics that\n          interest you.\n        </p>\n      }\n    >\n      <AnimatedDiv className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white  border border-transparent dark:border-gray-700  dark:bg-gray-800 py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n          <Formik\n            initialValues={PersonalStepTwo}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            <Form className=\"space-y-6\">\n              <div>\n                <FormSelector\n                  label={'Country / region'}\n                  list={countries}\n                  name=\"country\"\n                  required\n                  placeholder={'Select country'}\n                  onSelect={(item) => {\n                    updateStates(item.shortName)\n\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      country: {\n                        shortName: item.shortName,\n                        longName: item.name,\n                      },\n                    })\n                  }}\n                />\n              </div>\n              <div>\n                <FormSelector\n                  label=\"State\"\n                  list={stateList}\n                  name=\"state\"\n                  required\n                  placeholder={'Select state'}\n                  onSelect={(item) => {\n                    updateCities(selectedLocation.country.shortName, item.name)\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      state: item.name,\n                    })\n                  }}\n                />\n              </div>\n\n              <div>\n                <FormSelector\n                  label={'Ctiy'}\n                  name=\"city\"\n                  list={cityList}\n                  required\n                  placeholder={'Select city'}\n                  onSelect={(item) => {\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      city: item.name,\n                    })\n                  }}\n                />\n              </div>\n              <FormInput\n                label=\"Postal Code\"\n                id=\"pincode\"\n                name=\"pincode\"\n                placeholder=\"Postal Code\"\n                required\n              />\n\n              <div>\n                <Button\n                  fullWidth\n                  rounded=\"rounded-lg\"\n                  type=\"submit\"\n                  gradient\n                  loading={saving}\n                  label=\"Finish Submit\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n        <TextButton\n          text=\"Edit company details\"\n          onClick={goBack}\n          className=\"inline-block mt-4\"\n        />\n      </AnimatedDiv>\n    </Layout>\n  )\n}\n\nexport default LastStep\n"],"sourceRoot":""}