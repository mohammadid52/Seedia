{"version":3,"sources":["components/VerticalProfileCard.tsx","components/SideCard.tsx","components/Tabs.tsx","hooks/useTabs.ts","pages/savedItems/MyItems.tsx"],"names":["VerticalProfileCard","user","content","isBusiness","useAccountType","defaultContent","className","business","name","company","jobTitle","href","links","getProfile","alt","src","coverPicture","profilePicture","avatarPlaceholder","fullName","news","readers","SideCard","secondary","cardTitle","map","_news","idx","Tabs","tabs","currentTab","setCurrentTab","htmlFor","id","defaultValue","find","tab","tabIndex","onClick","classNames","useTabs","initCurrentTab","useState","helpers","User","myFollowings","isPersonal","useFollow","_id","toString","following","addFollow","removeFollow","companyName","background","education","gradient","mutate","label","MyItems","userData","onProfiles","onPosts","useQuery","fetchedSavedItems","enabled","data","isLoading","isFetched","isSuccess","refetch","_users","fetchedSavedProfiles","onReachedAtLastPost","savedItems","savedProfiles","pageTitle","firstColClass","firstCol","followers","profileUrl","length","secondCol","dataLength","next","hasMore","loader","undefined","animation","animationData","title","post","userId","thirdColClass","thirdCol"],"mappings":"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","file":"static/js/33.39423d80.chunk.js","sourcesContent":["import { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst VerticalProfileCard = ({\n  user,\n  content = null,\n}: {\n  user: IParent\n  content?: React.ReactNode\n}) => {\n  const { isBusiness } = useAccountType(user)\n\n  const defaultContent = (\n    <>\n      <p className=\"text-sm font-medium dark:text-white text-gray-500 \">\n        {isBusiness ? user?.business?.name : user?.company?.jobTitle}\n      </p>\n      <a\n        className=\"dark:text-white text-gray-900 text-lg font-medium\"\n        href={links.getProfile(user)}\n      >\n        <div className=\"mt-2\">View full profile</div>\n      </a>\n    </>\n  )\n\n  return (\n    <div className=\"plain-card\">\n      <img\n        alt=\"\"\n        src={\n          user?.coverPicture\n            ? user?.coverPicture\n            : 'https://source.unsplash.com/1600x900/?nature,water'\n        }\n        className=\"w-full lg:h-28 sm:h-24 object-cover h-20\"\n      />\n      <div className=\"flex justify-center -mt-8\">\n        <img\n          alt=\"\"\n          src={user.profilePicture ? user.profilePicture : avatarPlaceholder}\n          className=\"rounded-full  border-gradient border-transparent  lg:h-16 lg:w-16 h-12 w-12 dark:border-gray-800 border-white  border-2 -mt-3\"\n        />\n      </div>\n      <div className={`text-center ${content ? '' : 'px-3 pb-6 pt-2'}`}>\n        <a\n          href={links.getProfile(user, true)}\n          className=\"dark:text-white cursor-pointer text-gray-900 text-base font-bold \"\n        >\n          {user.fullName}\n        </a>\n        {content || defaultContent}\n      </div>\n    </div>\n  )\n}\n\nexport default VerticalProfileCard\n","import Card from 'components/atoms/Card'\nimport { map } from 'lodash'\n\nconst news = [\n  { name: 'WHO sets global vaccination goals', readers: '54,460' },\n  { name: 'WHO sets global vaccination goals', readers: '54,460' },\n\n  { name: 'WHO sets global vaccination goals', readers: '54,460' },\n]\n\nconst SideCard = () => {\n  return (\n    <Card\n      className=\"\"\n      secondary\n      cardTitle=\"13RMS News\"\n      content={\n        <div className=\"text-left  cursor-pointer \">\n          <ul className=\"flex flex-col gap-y-4\">\n            {map(news, (_news, idx: number) => (\n              <li key={idx} className=\" pl-2\">\n                <h6 className=\"text-xs font-semibold mb-1 uppercase link-hover dark:text-white text-gray-900 \">\n                  {_news.name}\n                </h6>\n                <p className=\"text-gray-500 uppercase text-xs italic\">\n                  Top news â€¢ {_news.readers} readers\n                </p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      }\n    />\n  )\n}\n\nexport default SideCard\n","import { classNames } from 'utils/classNames'\n\nexport interface ITab {\n  name: string\n}\n\nexport interface TabsProps {\n  tabs: ITab[]\n  currentTab: string\n  setCurrentTab: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst Tabs = ({ tabs, currentTab, setCurrentTab }: TabsProps) => {\n  return (\n    <div>\n      <div className=\"sm:hidden\">\n        <label htmlFor=\"tabs\" className=\"sr-only\">\n          Select a tab\n        </label>\n\n        <select\n          id=\"tabs\"\n          name=\"tabs\"\n          className=\"block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n          defaultValue={tabs.find((tab) => tab.name === currentTab).name}\n        >\n          {tabs.map((tab) => (\n            <option key={tab.name}>{tab.name}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"hidden sm:block\">\n        <div className=\"\">\n          <nav className=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">\n            {tabs.map((tab) => (\n              <div\n                tabIndex={0}\n                key={tab.name}\n                onClick={() => setCurrentTab(tab.name)}\n                className={classNames(\n                  currentTab === tab.name\n                    ? ' gradient-text border-b-2 dark:border-pink-700 border-pink-200'\n                    : 'dark:hover:text-pink-600 border-transparent border-b-2 text-gray-500 hover:text-gray-700 dark:hover:border-gray-600 hover:border-gray-300',\n                  'whitespace-nowrap py-4 cursor-pointer px-1  font-medium text-sm'\n                )}\n              >\n                {tab.name}\n              </div>\n            ))}\n          </nav>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Tabs\n","import { ITab } from 'components/Tabs'\nimport { useState } from 'react'\n\nconst useTabs = (tabs: ITab[]) => {\n  const initCurrentTab = tabs[0].name\n  const [currentTab, setCurrentTab] = useState(initCurrentTab)\n\n  const helpers = tabs.map((tab) => tab.name === currentTab)\n\n  return { currentTab, setCurrentTab, helpers }\n}\n\nexport default useTabs\n","import { fetchedSavedItems, fetchedSavedProfiles } from 'apis/queries'\nimport animationData from 'assets/animation/caught-up.json'\nimport Button from 'components/atoms/Button'\nimport EmptyState from 'components/atoms/EmptyState'\nimport Meta from 'components/atoms/Meta/Meta'\nimport Post from 'components/posts/Post'\nimport SideCard from 'components/SideCard'\nimport Spinner from 'components/Spinner'\nimport Tabs from 'components/Tabs'\n\nimport VerticalProfileCard from 'components/VerticalProfileCard'\nimport { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport useFollow from 'hooks/useFollow'\nimport useTabs from 'hooks/useTabs'\nimport { IParent, IPost } from 'interfaces/UniversalInterface'\nimport DashboardHeader from 'pages/DashboardHeader'\nimport DashboardLayout from 'pages/DashboardLayout'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useQuery } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst User = ({\n  user,\n  myFollowings,\n}: {\n  user?: IParent\n  myFollowings: string[]\n}) => {\n  const { isBusiness, isPersonal } = useAccountType(user)\n  const { following, addFollow, removeFollow } = useFollow(\n    myFollowings || [],\n    user._id.toString()\n  )\n  return (\n    <a\n      href={links.getProfile(user)}\n      key={user._id}\n      className={`p-2 py-4 relative cursor-pointer border-b border-gray-200 dark:border-gray-700 dark:hover:bg-gray-800 hover:bg-gray-100  transition-all`}\n    >\n      <div className=\"flex  cursor-pointer items-center \">\n        <img\n          src={user.profilePicture || avatarPlaceholder}\n          alt=\"\"\n          className=\"rounded-full  border-gradient border-transparent border-2 mr-2 h-12 w-12\"\n        />\n        <div>\n          <h4 className=\"dark:text-white text-gray-900\">{user.fullName}</h4>\n          <p className=\"dark:text-gray-500 text-gray-600 text-sm\">\n            {isBusiness\n              ? user?.business?.name\n              : isPersonal\n              ? user?.company?.companyName\n              : user?.background?.education &&\n                user?.background?.education[0].name}\n          </p>\n        </div>\n        <div className=\"absolute  right-2\">\n          <Button\n            gradient\n            onClick={() => {\n              following\n                ? removeFollow.mutate(user?._id)\n                : addFollow.mutate(user?._id)\n            }}\n            label={following ? 'Unfollow' : 'Follow'}\n          />\n        </div>\n      </div>\n    </a>\n  )\n}\n\nconst MyItems = ({ userData }: { userData: IParent }) => {\n  const tabs = [{ name: 'Profiles' }, { name: 'Posts' }]\n\n  const { currentTab, setCurrentTab, helpers } = useTabs(tabs)\n  const [onProfiles, onPosts] = helpers\n\n  const { data, isLoading, isFetched, isSuccess, refetch } = useQuery(\n    `saved-items`,\n    fetchedSavedItems,\n    { enabled: onPosts }\n  )\n\n  const _users = useQuery(`saved-profiles`, fetchedSavedProfiles, {\n    enabled: onProfiles,\n  })\n\n  const onReachedAtLastPost = () => {\n    refetch()\n  }\n\n  const savedItems: IPost[] =\n    !isLoading && isFetched && isSuccess ? data.data.data : []\n  const savedProfiles: IParent[] =\n    !_users.isLoading && _users.isFetched && _users.isSuccess\n      ? _users.data.data.data\n      : []\n\n  const { isBusiness } = useAccountType(userData)\n\n  return (\n    <div className=\"relative  dark:bg-gray-900 bg-gray-100 min-h-screen \">\n      <DashboardHeader userData={userData} />\n      <Meta pageTitle={`Recent Activity | ${userData.fullName} | 13RMS`} />\n\n      <div\n        className={`h-auto pt-4 relative flow-root  transition-all duration-500 `}\n      >\n        <DashboardLayout\n          firstColClass={`   max-h-152 lg:block  xl:block w-full `}\n          firstCol={\n            <div className=\"flex flex-col gap-y-12\">\n              <VerticalProfileCard\n                content={\n                  <div>\n                    <p className=\"text-sm font-medium dark:text-white text-gray-500 \">\n                      {isBusiness\n                        ? userData.business.name\n                        : userData.company.jobTitle}\n                    </p>\n                    <div className=\"flex mt-4 gap-y-2  flex-col border-t py-2 text-xs font-medium text-gray-500 dark:text-gray-500 border-gray-200 dark:border-gray-700\">\n                      <div className=\"flex transition-all item-center px-4 py-1  dark:hover:bg-gray-700 justify-between\">\n                        <h6 className=\"font-medium \">Followers</h6>\n                        <a\n                          href={links.followers(userData.profileUrl)}\n                          className=\"hover:underline cursor-pointer text-link font-semibold\"\n                        >\n                          {userData?.followers?.length || 0}\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                }\n                user={userData}\n              />\n            </div>\n          }\n          secondCol={\n            <div className=\"flex gap-y-4 mx-auto lg:max-w-2xl  flex-col\">\n              {isLoading && !isFetched ? (\n                <Spinner />\n              ) : (\n                <div className=\"space-y-12 \">\n                  <div className=\"plain-card w-full  px-4\">\n                    <Tabs\n                      tabs={tabs}\n                      currentTab={currentTab}\n                      setCurrentTab={setCurrentTab}\n                    />\n                  </div>\n                  {onProfiles &&\n                    (savedProfiles && savedProfiles.length > 0 ? (\n                      <InfiniteScroll\n                        dataLength={savedProfiles.length} //This is important field to render the next data\n                        next={() => onReachedAtLastPost()}\n                        hasMore={true}\n                        loader={undefined}\n                      >\n                        <div className=\"flex flex-col gap-y-6\">\n                          {savedProfiles.map((user, idx) => {\n                            return (\n                              <User\n                                myFollowings={userData.following}\n                                key={user._id}\n                                user={user}\n                              />\n                            )\n                          })}\n                        </div>\n                      </InfiniteScroll>\n                    ) : (\n                      <EmptyState\n                        animation={animationData}\n                        title=\"You're all caught up\"\n                      />\n                    ))}\n                  {onPosts &&\n                    (savedItems && savedItems.length > 0 ? (\n                      <InfiniteScroll\n                        dataLength={savedItems.length} //This is important field to render the next data\n                        next={() => onReachedAtLastPost()}\n                        hasMore={true}\n                        loader={undefined}\n                      >\n                        <div className=\"grid  grid-cols-1 gap-y-6\">\n                          {savedItems.map((post, idx) => (\n                            <Post\n                              key={post._id}\n                              userData={userData}\n                              userId={userData._id.toString()}\n                              post={post}\n                            />\n                          ))}\n                        </div>\n                      </InfiniteScroll>\n                    ) : (\n                      <EmptyState\n                        animation={animationData}\n                        title=\"You're all caught up\"\n                      />\n                    ))}\n                </div>\n              )}\n            </div>\n          }\n          thirdColClass=\"lg:block\"\n          thirdCol={\n            <div className=\"space-y-12\">\n              <SideCard />\n              <SideCard />\n              {/* <Following\n                  showSingleCard\n                  list={userData?.following}\n                  interests={userData?.background?.interests}\n                /> */}\n            </div>\n          }\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default MyItems\n"],"sourceRoot":""}