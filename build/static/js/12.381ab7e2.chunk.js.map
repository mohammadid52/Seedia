{"version":3,"sources":["pages/account/personal/LocationStep.jsx"],"names":["yourhandle","require","LastStep","accountType","useState","isLoaded","setIsLoaded","history","useHistory","useUserContext","values","setValues","saving","setSaving","setTimeout","validationSchema","Yup","pincode","required","country","state","city","errors","shortName","longName","selectedLocation","setSelectedLocation","countries","getCountries","stateList","setStateList","cityList","setCityList","title","subtitle","className","initialValues","PersonalStepTwo","onSubmit","_values","wait","then","location","window","localStorage","setItem","JSON","stringify","personal","console","log","push","links","DASHBAORD","error","label","list","selectedItem","placeholder","onSelect","item","states","getStatesByShort","updated","map","name","updateStates","cities","getCities","updateCities","id","fullWidth","rounded","type","gradient","loading","text","onClick"],"mappings":"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","file":"static/js/12.381ab7e2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport Selector from 'components/atoms/Selector'\nimport TextButton from 'components/atoms/TextButton'\nimport Loading from 'components/Loading'\nimport { useHistory } from 'react-router-dom'\nimport { wait } from 'utils/wait'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { PersonalStepTwo } from 'initials'\nimport { useUserContext } from 'context/UserContext'\nimport { links } from 'constants/Links'\nimport Layout from 'containers/Layout'\nimport { map } from 'lodash'\n\nconst yourhandle = require('countrycitystatejson')\n\nconst LastStep = ({ accountType = 'personal' }) => {\n  const [isLoaded, setIsLoaded] = useState(false)\n  const history = useHistory()\n  const { values, setValues } = useUserContext()\n\n  const [saving, setSaving] = useState(false)\n\n  setTimeout(() => {\n    setIsLoaded(true)\n  }, 1000)\n\n  const goBack = () => {\n    history.push('/account/personal/edit-profile/company')\n  }\n\n  // for test purpose\n\n  const addDataToLS = () => {\n    window.localStorage.setItem(accountType, JSON.stringify(values.personal))\n    window.localStorage.setItem('accountType', values.accountType)\n    console.log(`Successfully added ${accountType} account to local storage`)\n  }\n\n  // const validateOtherFields = () => {\n  //   let isValid = true\n  //   const { country, state, city } = selectedLocation\n  //   if (!country.longName || !country.shortName) {\n  //     isValid = false\n  //     errors.country = 'Please select country'\n  //   } else {\n  //     isValid = true\n  //     errors.country = ''\n  //   }\n  //   if (!state) {\n  //     isValid = false\n  //     errors.state = 'Please select state'\n  //   } else {\n  //     isValid = true\n  //     errors.state = ''\n  //   }\n  //   if (!city) {\n  //     isValid = false\n  //     errors.city = 'Please select city'\n  //   } else {\n  //     isValid = true\n  //     errors.city = ''\n  //   }\n\n  //   setErrors({ ...errors })\n  //   return isValid\n  // }\n\n  const onSubmit = (_values) => {\n    try {\n      setSaving(true)\n      wait(3000).then(() => {\n        setSaving(false)\n        setValues({\n          ...values,\n          [accountType]: {\n            ...values[accountType],\n            location: {\n              ...values.location,\n              country: selectedLocation.country.longName,\n              state: selectedLocation.state,\n              city: selectedLocation.city,\n              pincode: _values.pincode,\n            },\n          },\n        })\n        addDataToLS()\n        history.push(links.DASHBAORD)\n      })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  const validationSchema = Yup.object({\n    pincode: Yup.string().required('Please add this field'),\n  })\n\n  const [errors] = useState({\n    country: '',\n    state: '',\n    city: '',\n  })\n\n  const [selectedLocation, setSelectedLocation] = useState({\n    country: { shortName: '', longName: '' },\n    state: '',\n    city: '',\n  })\n\n  const countries = yourhandle.getCountries()\n\n  const updateStates = (shortName) => {\n    const states = yourhandle.getStatesByShort(shortName)\n    const updated = map(states, (state) => ({ name: state }))\n    setStateList(updated)\n  }\n\n  const updateCities = (shortName, state) => {\n    const cities = yourhandle.getCities(shortName, state)\n    const updated = map(cities, (city) => ({ name: city }))\n    setCityList(updated)\n  }\n\n  const [stateList, setStateList] = useState([])\n\n  const [cityList, setCityList] = useState([])\n\n  return !isLoaded ? (\n    <Loading />\n  ) : (\n    <Layout\n      title=\"Welcome, Mohammad!\"\n      subtitle={\n        <p>\n          Create a profile, connect with acquaintances and discuss topics that\n          interest you.\n        </p>\n      }\n    >\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white dark:bg-gray-800 py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n          <Formik\n            initialValues={PersonalStepTwo}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            <Form className=\"space-y-6\">\n              <div className=\"mt-6\">\n                <Selector\n                  label={'Country / region'}\n                  list={countries}\n                  required\n                  error={errors.country}\n                  selectedItem={selectedLocation.country.longName}\n                  placeholder={'Select location'}\n                  onSelect={(item) => {\n                    updateStates(item.shortName)\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      country: {\n                        shortName: item.shortName,\n                        longName: item.name,\n                      },\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"mt-6\">\n                <Selector\n                  label={'State'}\n                  list={stateList}\n                  error={errors.state}\n                  required\n                  selectedItem={selectedLocation.state}\n                  placeholder={'Select location'}\n                  onSelect={(item) => {\n                    updateCities(selectedLocation.country.shortName, item.name)\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      state: item.name,\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"mt-6\">\n                <Selector\n                  label={'Ctiy'}\n                  list={cityList}\n                  required\n                  error={errors.city}\n                  selectedItem={selectedLocation.city}\n                  placeholder={'Select location'}\n                  onSelect={(item) => {\n                    setSelectedLocation({\n                      ...selectedLocation,\n                      city: item.name,\n                    })\n                  }}\n                />\n              </div>\n              <FormInput\n                label=\"Postal Code\"\n                id=\"pincode\"\n                name=\"pincode\"\n                required\n              />\n\n              <div>\n                <Button\n                  fullWidth\n                  rounded=\"rounded-lg\"\n                  type=\"submit\"\n                  gradient\n                  loading={saving}\n                  label=\"Finish Submit\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n        <TextButton\n          text=\"Go back\"\n          onClick={goBack}\n          className=\"inline-block mt-4\"\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default LastStep\n"],"sourceRoot":""}