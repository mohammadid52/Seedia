{"version":3,"sources":["components/Copyright.jsx","hooks/useForm.tsx","components/atoms/FormInput.tsx","../../../src/utils/calculate-active-index.ts","../../../../src/components/listbox/listbox.tsx","../../../src/hooks/use-disposables.ts","../../../src/hooks/use-computed.ts","components/atoms/Selector.jsx"],"names":["navigation","name","href","Copyright","year","Date","getFullYear","className","aria-label","map","item","useForm","initialFields","errorInitialFields","useState","fields","setFields","errors","setErrors","onChange","e","target","id","value","FormInput","label","type","placeholder","error","gridClass","required","htmlFor","aria-invalid","aria-describedby","aria-hidden","Focus","useDisposables","d","useEffect","useComputed","cb","dependencies","setValue","cbRef","useRef","useIsoMorphicEffect","calculateActiveIndex","action","resolvers","items","currentActiveIndex","activeIndex","nextActiveIndex","idx","all","x","Error","assertNever","ListboxStates","ActionTypes","reducers","state","activeOptionIndex","listboxState","Closed","Open","disabled","resolveItems","resolveActiveIndex","resolveId","resolveDisabled","searchQuery","match","option","options","dataRef","nextOptions","currentActiveOption","a","ListboxContext","createContext","useListboxContext","component","context","useContext","err","Listbox","stateReducer","DEFAULT_LISTBOX_TAG","props","passThroughProps","reducerBag","useReducer","propsRef","current","labelRef","createRef","buttonRef","optionsRef","dispatch","useWindowEvent","event","CloseListbox","isFocusableElement","FocusableMode","slot","useMemo","open","State","render","defaultTag","Button","forwardRefWithAs","useSyncRefs","useId","handleKeyDown","useCallback","Keys","OpenListbox","focus","First","Last","handleKeyUp","handleClick","isDisabledReactIssue7711","preventScroll","labelledby","passthroughProps","propsWeControl","ref","onKeyDown","onKeyUp","onClick","OptionsRenderFeatures","Features","Options","searchDisposables","usesOpenClosedState","useOpenClosed","visible","container","document","key","disposables","Next","Previous","ClearSearch","role","tabIndex","features","Label","Option","active","selected","bag","select","block","handleFocus","Nothing","handleMove","handleLeave","onFocus","onPointerMove","onMouseMove","onPointerLeave","onMouseLeave","classNames","classes","filter","Boolean","join","Selector","list","selectedItem","onSelect","show","as","Fragment","leave","leaveFrom","leaveTo","static"],"mappings":"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","file":"static/js/2.b1c61d2e.chunk.js","sourcesContent":["const navigation = [\n  { name: 'Accessibility', href: '#/' },\n  { name: 'User Agreement', href: '#/' },\n  { name: 'Privacy & Policy', href: '#/' },\n  { name: 'Cookies', href: '#/' },\n]\nconst Copyright = () => {\n  const year = new Date().getFullYear()\n  return (\n    <footer className=\"\">\n      <div className=\"max-w-7xl mx-auto pt-16 px-4 overflow-hidden sm:px-6 lg:px-8\">\n        <nav\n          className=\"-mx-5 lg:flex md:flex sm:grid sm:place-content-center sm:grid-cols-1 flex-wrap justify-center\"\n          aria-label=\"Footer\"\n        >\n          {navigation.map((item) => (\n            <div key={item.name} className=\"text-center px-5 py-2\">\n              <a\n                href={item.href}\n                className=\"text-base text-gray-500 hover:text-gray-900\"\n              >\n                {item.name}\n              </a>\n            </div>\n          ))}\n        </nav>\n\n        <p className=\"mt-8 text-center text-base text-gray-400\">\n          &copy; {year} Workflow, Inc. All rights reserved.\n        </p>\n      </div>\n    </footer>\n  )\n}\n\nexport default Copyright\n","import { useState } from 'react'\n\nconst useForm = (\n  initialFields: { [key: string]: string },\n  errorInitialFields: { [key: string]: string }\n) => {\n  const [fields, setFields] = useState(initialFields)\n  const [errors, setErrors] = useState(errorInitialFields)\n  const onChange = (e: any) => {\n    const { id, value } = e.target\n    setFields({ ...fields, [id]: value })\n    setErrors({ ...errors, [id]: '' })\n  }\n\n  return { fields, setFields, onChange, errors, setErrors }\n}\n\nexport default useForm\n","import React from 'react'\nimport { ExclamationCircleIcon } from '@heroicons/react/solid'\n\nconst FormInput = ({\n  label,\n  id,\n  name,\n  type = 'text',\n  placeholder,\n  error,\n  value,\n  onChange,\n  gridClass,\n  required,\n}: {\n  label?: string\n  id?: string\n  name?: string\n  required?: boolean\n  type?: string\n  placeholder?: string\n  error?: string\n  value: string\n  onChange: () => void\n  gridClass?: string\n}) => {\n  const errorClass = `border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500`\n  return (\n    <div className={gridClass}>\n      <label htmlFor={name} className=\"block text-sm font-medium text-gray-700\">\n        {label}{' '}\n        {required && (\n          <span className=\"text-red-500 font-medium text-base\">*</span>\n        )}\n      </label>\n      <div className=\"mt-1 relative rounded-md shadow-sm\">\n        <input\n          type={type}\n          name={name}\n          id={id}\n          className={`block border w-full pr-10 ${\n            error\n              ? errorClass\n              : 'focus:ring-yellow-500 focus:border-yellow-500 border-gray-300'\n          } sm:text-sm rounded-md`}\n          placeholder={placeholder}\n          value={value}\n          required={required}\n          onChange={onChange}\n          aria-invalid=\"true\"\n          aria-describedby=\"email-error\"\n        />\n        {error && (\n          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n            <ExclamationCircleIcon\n              className=\"h-5 w-5 text-red-500\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        )}\n      </div>\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\" id={`${name || id}-error`}>\n          {error}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default FormInput\n","function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n","import React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useId } from '../../hooks/use-id'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useComputed } from '../../hooks/use-computed'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Props } from '../../types'\nimport { Features, forwardRefWithAs, PropsForFeatures, render } from '../../utils/render'\nimport { match } from '../../utils/match'\nimport { disposables } from '../../utils/disposables'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\n\nenum ListboxStates {\n  Open,\n  Closed,\n}\n\ntype ListboxOptionDataRef = MutableRefObject<{\n  textValue?: string\n  disabled: boolean\n  value: unknown\n}>\n\ninterface StateDefinition {\n  listboxState: ListboxStates\n  propsRef: MutableRefObject<{ value: unknown; onChange(value: unknown): void }>\n  labelRef: MutableRefObject<HTMLLabelElement | null>\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  optionsRef: MutableRefObject<HTMLUListElement | null>\n  disabled: boolean\n  options: { id: string; dataRef: ListboxOptionDataRef }[]\n  searchQuery: string\n  activeOptionIndex: number | null\n}\n\nenum ActionTypes {\n  OpenListbox,\n  CloseListbox,\n\n  SetDisabled,\n\n  GoToOption,\n  Search,\n  ClearSearch,\n\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseListbox }\n  | { type: ActionTypes.OpenListbox }\n  | { type: ActionTypes.SetDisabled; disabled: boolean }\n  | { type: ActionTypes.GoToOption; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToOption; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterOption; id: string; dataRef: ListboxOptionDataRef }\n  | { type: ActionTypes.UnregisterOption; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    return { ...state, activeOptionIndex: null, listboxState: ListboxStates.Closed }\n  },\n  [ActionTypes.OpenListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Open) return state\n    return { ...state, listboxState: ListboxStates.Open }\n  },\n  [ActionTypes.SetDisabled](state, action) {\n    if (state.disabled === action.disabled) return state\n    return { ...state, disabled: action.disabled }\n  },\n  [ActionTypes.GoToOption](state, action) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.options,\n      resolveActiveIndex: () => state.activeOptionIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) return state\n    return { ...state, searchQuery: '', activeOptionIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.options.findIndex(\n      option =>\n        !option.dataRef.current.disabled &&\n        option.dataRef.current.textValue?.startsWith(searchQuery)\n    )\n\n    if (match === -1 || match === state.activeOptionIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeOptionIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterOption]: (state, action) => ({\n    ...state,\n    options: [...state.options, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterOption]: (state, action) => {\n    let nextOptions = state.options.slice()\n    let currentActiveOption =\n      state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null\n\n    let idx = nextOptions.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextOptions.splice(idx, 1)\n\n    return {\n      ...state,\n      options: nextOptions,\n      activeOptionIndex: (() => {\n        if (idx === state.activeOptionIndex) return null\n        if (currentActiveOption === null) return null\n\n        // If we removed the option before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextOptions.indexOf(currentActiveOption)\n      })(),\n    }\n  },\n}\n\nlet ListboxContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nListboxContext.displayName = 'ListboxContext'\n\nfunction useListboxContext(component: string) {\n  let context = useContext(ListboxContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Listbox.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_LISTBOX_TAG = Fragment\ninterface ListboxRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\n\nexport function Listbox<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string>(\n  props: Props<TTag, ListboxRenderPropArg, 'value' | 'onChange'> & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let reducerBag = useReducer(stateReducer, {\n    listboxState: ListboxStates.Closed,\n    propsRef: { current: { value, onChange } },\n    labelRef: createRef(),\n    buttonRef: createRef(),\n    optionsRef: createRef(),\n    disabled,\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null,\n  } as StateDefinition)\n  let [{ listboxState, propsRef, optionsRef, buttonRef }, dispatch] = reducerBag\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = onChange\n  }, [onChange, propsRef])\n  useIsoMorphicEffect(() => dispatch({ type: ActionTypes.SetDisabled, disabled }), [disabled])\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (listboxState !== ListboxStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (optionsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseListbox })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<ListboxRenderPropArg>(\n    () => ({ open: listboxState === ListboxStates.Open, disabled }),\n    [listboxState, disabled]\n  )\n\n  return (\n    <ListboxContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(listboxState, {\n          [ListboxStates.Open]: State.Open,\n          [ListboxStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passThroughProps,\n          slot,\n          defaultTag: DEFAULT_LISTBOX_TAG,\n          name: 'Listbox',\n        })}\n      </OpenClosedProvider>\n    </ListboxContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'aria-labelledby'\n  | 'disabled'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-listbox-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n          })\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n          })\n          break\n      }\n    },\n    [dispatch, state, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (state.listboxState === ListboxStates.Open) {\n        dispatch({ type: ActionTypes.CloseListbox })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        dispatch({ type: ActionTypes.OpenListbox })\n      }\n    },\n    [dispatch, d, state]\n  )\n\n  let labelledby = useComputed(() => {\n    if (!state.labelRef.current) return undefined\n    return [state.labelRef.current.id, id].join(' ')\n  }, [state.labelRef.current, id])\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.optionsRef.current?.id,\n    'aria-expanded': state.disabled ? undefined : state.listboxState === ListboxStates.Open,\n    'aria-labelledby': labelledby,\n    disabled: state.disabled,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Listbox.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype LabelPropsWeControl = 'id' | 'ref' | 'onClick'\n\nfunction Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let [state] = useListboxContext([Listbox.name, Label.name].join('.'))\n  let id = `headlessui-listbox-label-${useId()}`\n\n  let handleClick = useCallback(() => state.buttonRef.current?.focus({ preventScroll: true }), [\n    state.buttonRef,\n  ])\n\n  let slot = useMemo<LabelRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let propsWeControl = { ref: state.labelRef, id, onClick: handleClick }\n  return render({\n    props: { ...props, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: 'Listbox.Label',\n  })\n}\n\n// ---\n\nlet DEFAULT_OPTIONS_TAG = 'ul' as const\ninterface OptionsRenderPropArg {\n  open: boolean\n}\ntype OptionsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet OptionsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Options = forwardRefWithAs(function Options<\n  TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG\n>(\n  props: Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl> &\n    PropsForFeatures<typeof OptionsRenderFeatures>,\n  ref: Ref<HTMLUListElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Options.name].join('.'))\n  let optionsRef = useSyncRefs(state.optionsRef, ref)\n\n  let id = `headlessui-listbox-options-${useId()}`\n  let d = useDisposables()\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.listboxState === ListboxStates.Open\n  })()\n\n  useIsoMorphicEffect(() => {\n    let container = state.optionsRef.current\n    if (!container) return\n    if (state.listboxState !== ListboxStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.listboxState, state.optionsRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLUListElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          if (state.activeOptionIndex !== null) {\n            let { dataRef } = state.options[state.activeOptionIndex]\n            state.propsRef.current.onChange(dataRef.current.value)\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          return d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [d, dispatch, searchDisposables, state]\n  )\n\n  let labelledby = useComputed(() => state.labelRef.current?.id ?? state.buttonRef.current?.id, [\n    state.labelRef.current,\n    state.buttonRef.current,\n  ])\n\n  let slot = useMemo<OptionsRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeOptionIndex === null ? undefined : state.options[state.activeOptionIndex]?.id,\n    'aria-labelledby': labelledby,\n    id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0,\n    ref: optionsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTIONS_TAG,\n    features: OptionsRenderFeatures,\n    visible,\n    name: 'Listbox.Options',\n  })\n})\n\n// ---\n\nlet DEFAULT_OPTION_TAG = 'li' as const\ninterface OptionRenderPropArg {\n  active: boolean\n  selected: boolean\n  disabled: boolean\n}\ntype ListboxOptionPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'aria-selected'\n  | 'onPointerLeave'\n  | 'onMouseLeave'\n  | 'onPointerMove'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in Listbox itself.\n  // But today is not that day..\n  TType = Parameters<typeof Listbox>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, ListboxOptionPropsWeControl | 'value'> & {\n    disabled?: boolean\n    value: TType\n  }\n) {\n  let { disabled = false, value, ...passthroughProps } = props\n  let [state, dispatch] = useListboxContext([Listbox.name, Option.name].join('.'))\n  let id = `headlessui-listbox-option-${useId()}`\n  let active =\n    state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false\n  let selected = state.propsRef.current.value === value\n\n  let bag = useRef<ListboxOptionDataRef['current']>({ disabled, value })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n  useIsoMorphicEffect(() => {\n    bag.current.value = value\n  }, [bag, value])\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  let select = useCallback(() => state.propsRef.current.onChange(value), [state.propsRef, value])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterOption, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterOption, id })\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!selected) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n    document.getElementById(id)?.focus?.()\n  }, [state.listboxState])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.listboxState])\n\n  let handleClick = useCallback(\n    (event: { preventDefault: Function }) => {\n      if (disabled) return event.preventDefault()\n      select()\n      dispatch({ type: ActionTypes.CloseListbox })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n    },\n    [dispatch, state.buttonRef, disabled, select]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<OptionRenderPropArg>(() => ({ active, selected, disabled }), [\n    active,\n    selected,\n    disabled,\n  ])\n  let propsWeControl = {\n    id,\n    role: 'option',\n    tabIndex: disabled === true ? undefined : -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    disabled: undefined, // Never forward the `disabled` prop\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'Listbox.Option',\n  })\n}\n\n// ---\n\nListbox.Button = Button\nListbox.Label = Label\nListbox.Options = Options\nListbox.Option = Option\n","import { useState, useEffect } from 'react'\n\nimport { disposables } from '../utils/disposables'\n\nexport function useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  let [d] = useState(disposables)\n  useEffect(() => () => d.dispose(), [d])\n  return d\n}\n","import { useState, useRef } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nexport function useComputed<T>(cb: () => T, dependencies: React.DependencyList) {\n  let [value, setValue] = useState(cb)\n  let cbRef = useRef(cb)\n  useIsoMorphicEffect(() => {\n    cbRef.current = cb\n  }, [cb])\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies])\n  return value\n}\n","/* This example requires Tailwind CSS v2.0+ */\nimport { Fragment } from 'react'\nimport { Listbox, Transition } from '@headlessui/react'\nimport { CheckIcon, SelectorIcon } from '@heroicons/react/solid'\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nconst Selector = ({ list, label, selectedItem, onSelect }) => {\n  return (\n    <Listbox value={selectedItem} onChange={onSelect}>\n      {({ open }) => (\n        <>\n          {label && (\n            <Listbox.Label className=\"block text-sm font-medium text-gray-700\">\n              {label}\n            </Listbox.Label>\n          )}\n          <div className=\"mt-1 relative\">\n            <Listbox.Button className=\"bg-white relative w-full border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\n              <span className=\"block truncate\">{selectedItem.name}</span>\n              <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                <SelectorIcon\n                  className=\"h-5 w-5 text-gray-400\"\n                  aria-hidden=\"true\"\n                />\n              </span>\n            </Listbox.Button>\n\n            <Transition\n              show={open}\n              as={Fragment}\n              leave=\"transition ease-in duration-100\"\n              leaveFrom=\"opacity-100\"\n              leaveTo=\"opacity-0\"\n            >\n              <Listbox.Options\n                static\n                className=\"pl-0 absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\n              >\n                {list.map((item) => (\n                  <Listbox.Option\n                    key={item.id}\n                    className={({ active }) =>\n                      classNames(\n                        active ? 'text-white bg-indigo-600' : 'text-gray-900',\n                        'cursor-default select-none relative py-2 pl-3 pr-9'\n                      )\n                    }\n                    value={item}\n                  >\n                    {({ selected, active }) => (\n                      <>\n                        <span\n                          className={classNames(\n                            selected ? 'font-semibold' : 'font-normal',\n                            'block truncate'\n                          )}\n                        >\n                          {item.name}\n                        </span>\n\n                        {selected ? (\n                          <CheckIcon\n                            className={classNames(\n                              active ? 'text-white' : 'text-indigo-600',\n                              'absolute inset-y-0 right-0 flex items-center pr-4 h-5 w-5'\n                            )}\n                            aria-hidden=\"true\"\n                          />\n                        ) : null}\n                      </>\n                    )}\n                  </Listbox.Option>\n                ))}\n              </Listbox.Options>\n            </Transition>\n          </div>\n        </>\n      )}\n    </Listbox>\n  )\n}\nexport default Selector\n"],"sourceRoot":""}