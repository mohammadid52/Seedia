{"version":3,"sources":["components/atoms/Modal.tsx","utils/wait.ts","components/atoms/Divider.tsx","../../../src/hooks/use-focus-trap.ts","../../../src/hooks/use-inert-others.ts","../../../src/internal/portal-force-root.tsx","../../../../src/components/portal/portal.tsx","../../../src/internal/stack-context.tsx","../../../../src/components/dialog/dialog.tsx","pages/Settings.tsx"],"names":["Modal","open","setOpen","children","header","onClose","disableBackdropClose","hideCloseBtn","fixedBottom","disablePadding","Root","show","as","Fragment","static","style","zIndex","className","noop","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","type","onClick","wait","timeout","Promise","resolve","setTimeout","isAvailable","fieldName","inThis","hasOwnProperty","Divider","withButton","Icon","text","onBtnClick","height","Features","useFocusTrap","container","features","All","initialFocus","containers","restoreElement","useRef","window","document","previousActiveElement","mounted","useIsMounted","featuresRestoreFocus","Boolean","featuresInitialFocus","useEffect","focusElement","activeElement","focusIn","Focus","FocusResult","console","useWindowEvent","event","Keys","allContainers","Set","previous","toElement","contains","interactables","originals","inert","element","restore","original","ForcePortalRootContext","createContext","ForcePortalRoot","props","value","force","usePortalTarget","forceInRoot","useContext","groupTarget","useState","existingRoot","root","target","setTarget","DEFAULT_PORTAL_TAG","Portal","passthroughProps","ready","useServerHandoffComplete","useIsoMorphicEffect","createPortal","render","defaultTag","name","DEFAULT_GROUP_TAG","PortalGroupContext","StackMessage","StackContext","StackProvider","onUpdate","parentUpdate","notify","useCallback","args","DialogStates","ActionTypes","reducers","state","action","titleId","id","DialogContext","useDialogContext","component","context","err","Error","Dialog","stateReducer","match","DialogRenderFeatures","DialogRoot","forwardRefWithAs","rest","nestedDialogCount","setNestedDialogCount","usesOpenClosedState","useOpenClosed","State","internalDialogRef","dialogRef","useSyncRefs","hasOpen","hasOnClose","dialogState","visible","useReducer","descriptionId","dispatch","close","setTitleId","enabled","hasNestedDialogs","hasParentDialog","position","parent","FocusTrapFeatures","leaf","child","interactable","useInertOthers","overflow","paddingRight","scrollbarWidth","observer","IntersectionObserver","entries","entry","useDescriptions","describedby","DescriptionProvider","useId","contextBag","useMemo","slot","Open","propsWeControl","ref","role","message","count","React","overlayRef","handleClick","isDisabledReactIssue7711","Object","Title","Description","Settings","userData","currentTemplate","other","template","updateDocumentTitle","changingTemplate","setChangingTemplate","setValues","useUserContext","token","getAccessToken","history","useHistory","showDeleteModal","setShowDeleteModal","useDispatch","deleteAccount","a","network","delete","headers","Authorization","logOut","error","secondary","bgColor","invert","label","primary","background","updatedData","password","then","post","disabled","loading","loadingText","color","dateTime","createdOn","moment","format","goBack","gradient"],"mappings":"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","file":"static/js/42.faf2cdc1.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { Dialog, Transition } from '@headlessui/react'\nimport { XIcon } from '@heroicons/react/outline'\nimport { noop } from 'lodash'\n\nconst Modal = ({\n  open = false,\n  setOpen,\n  children,\n  header,\n  onClose,\n  disableBackdropClose = true,\n  hideCloseBtn = false,\n  fixedBottom,\n  disablePadding = false,\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  children: React.ReactNode\n  header?: string\n\n  disableBackdropClose?: boolean\n  hideCloseBtn?: boolean\n  disablePadding?: boolean\n  fixedBottom?: React.ReactNode\n  onClose?: () => void\n}) => {\n  return (\n    <Transition.Root show={open} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        static\n        style={{ zIndex: 9999 }}\n        className=\"fixed inset-0 overflow-y-auto\"\n        open={open}\n        onClose={!disableBackdropClose ? (onClose ? onClose : setOpen) : noop}\n      >\n        <div\n          className={`pb-20 flex items-end justify-center min-h-screen pt-4 px-4 text-center sm:block sm:p-0`}\n        >\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed dark:bg-black inset-0 bg-gray-500 opacity-50 transition-opacity\" />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n            aria-hidden=\"true\"\n          >\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div\n              className={`inline-block overflow-visible align-bottom  bg-white dark:bg-gray-900 rounded-lg ${\n                disablePadding ? '' : 'px-4 sm:p-6'\n              } pt-5  text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-top   pb-4`}\n            >\n              {!hideCloseBtn && (\n                <div className=\"hidden sm:block absolute top-0 right-0 pt-6 pr-6\">\n                  <button\n                    type=\"button\"\n                    className=\"bg-white dark:bg-gray-900 rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500\"\n                    onClick={() => (onClose ? onClose() : setOpen(false))}\n                  >\n                    <span className=\"sr-only\">Close</span>\n                    <XIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                  </button>\n                </div>\n              )}\n              <div className=\"modal-body\">\n                {header && (\n                  <div className=\"modal-header divider dark:divider px-4\">\n                    <h3 className=\"dark:text-white text-gray-900 text-xl font-normal\">\n                      {header}\n                    </h3>\n                  </div>\n                )}\n                <div className=\"\">{children}</div>\n                {fixedBottom && (\n                  <div className=\"absolute dark:border-gray-800 border-t bg-white dark:bg-gray-900 bottom-0 mx-6 inset-x-0\">\n                    {fixedBottom}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  )\n}\nexport default Modal\n","export const wait = (timeout: number) => {\n  return new Promise((resolve) => setTimeout(resolve, timeout))\n}\nexport const isAvailable = (fieldName: string, inThis: any) =>\n  inThis && inThis.hasOwnProperty(fieldName) && inThis[fieldName] !== ''\n","const Divider = ({\n  className,\n  withButton,\n  Icon,\n  text,\n  onBtnClick,\n}: {\n  className?: string\n  withButton?: boolean\n  Icon?: any\n  text?: string\n  onBtnClick?: () => void\n}) => {\n  return withButton ? (\n    <div className=\"relative\">\n      <div className=\"absolute inset-0 flex items-center\" aria-hidden=\"true\">\n        <div className=\"w-full border-t dark:border-gray-700 border-gray-400\" />\n      </div>\n      <div className=\"relative flex justify-center\">\n        <span\n          onClick={onBtnClick}\n          className={`${className} bg-white text-xs dark:bg-gray-900 px-2 text-gray-600`}\n        >\n          {text}\n          {Icon && <Icon />}\n        </span>\n      </div>\n    </div>\n  ) : (\n    <div\n      style={{ height: 1 }}\n      className={`my-4 dark:bg-gray-700 bg-gray-400 ${className}`}\n    />\n  )\n}\n\nexport default Divider\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        console.warn('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Handle `Escape` to close\n  useWindowEvent('keydown', event => {\n    if (event.key !== Keys.Escape) return\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    event.preventDefault()\n    event.stopPropagation()\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (event.target !== event.currentTarget) return\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n","import { useState, useEffect } from 'react'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport Button from 'components/atoms/Button'\nimport Divider from 'components/atoms/Divider'\nimport moment from 'moment'\nimport { getAccessToken, network, updateDocumentTitle } from 'helpers'\nimport { useUserContext } from 'context/UserContext'\nimport { wait } from 'utils/wait'\nimport Modal from 'components/atoms/Modal'\nimport { logOut } from 'state/Redux/Actions/authActions'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nexport default function Settings({ userData }: { userData: IParent }) {\n  const currentTemplate = userData.other?.template || 1\n\n  useEffect(() => {\n    updateDocumentTitle('Settings', true)\n  }, [])\n\n  const [changingTemplate, setChangingTemplate] = useState(false)\n\n  const { setValues } = useUserContext()\n\n  const token = getAccessToken()\n\n  const history = useHistory()\n\n  const changeTemplate = () => {\n    setChangingTemplate(true)\n    try {\n      let updatedData = {\n        ...userData,\n        other: {\n          ...userData.other,\n          template: currentTemplate === 1 ? 2 : 1,\n        },\n      }\n      //@ts-ignore\n      delete updatedData.password\n\n      setValues({ ...updatedData })\n      wait(1000).then(async () => {\n        await network.post(\n          '/user/update',\n          {\n            ...updatedData,\n          },\n          {\n            headers: { Authorization: token },\n          }\n        )\n      })\n    } catch (error) {\n      console.error(error.message)\n    } finally {\n      setChangingTemplate(false)\n    }\n  }\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n\n  const dispatch = useDispatch()\n\n  const deleteAccount = async () => {\n    try {\n      await network.delete('/user', {\n        headers: { Authorization: token },\n      })\n      dispatch(logOut(history))\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-900 h-screen\">\n      <Modal\n        header=\"Delete Account\"\n        open={showDeleteModal}\n        setOpen={() => setShowDeleteModal(false)}\n      >\n        <div className=\"min-h-32 min-w-96\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-lg dark:text-white text-gray-900 min-w-96\">\n              Are you sure you want to delete your account?\n            </h1>\n            <p className=\"text-gray-500 \">You won't able to recover it</p>\n          </div>\n\n          <div className=\"mt-5 sm:mt-4 flex justify-end space-x-4 items-center\">\n            <Button\n              secondary\n              bgColor=\"gray\"\n              onClick={() => {\n                setShowDeleteModal(false)\n              }}\n              invert\n              label=\"No thanks\"\n            />\n            <Button\n              primary\n              style={{ background: 'red' }}\n              label=\"Delete\"\n              onClick={deleteAccount}\n            />\n          </div>\n        </div>\n      </Modal>\n      <main className=\"bg-white dark:bg-gray-900 max-w-lg mx-auto pt-10 pb-12 px-4 lg:pb-16\">\n        <form>\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-base leading-6 font-medium dark:text-white text-gray-900\">\n                Profile Settings\n              </h1>\n              <p className=\"mt-1 text-xs text-gray-500 \">\n                You can change your profile settings here.\n              </p>\n            </div>\n            <div>\n              <Button\n                invert\n                onClick={changeTemplate}\n                disabled={changingTemplate}\n                loading={changingTemplate}\n                loadingText={`Changing template to ${\n                  currentTemplate === 1 ? 'Two' : 'One'\n                }`}\n                secondary\n                bgColor=\"gray\"\n                style={{ color: 'teal' }}\n                label={`Change template to ${\n                  currentTemplate === 1 ? 'Two' : 'One'\n                }`}\n              />\n            </div>\n\n            <Divider />\n            <div>\n              <h1 className=\"text-base leading-6 font-medium dark:text-white text-gray-900\">\n                Account Settings\n              </h1>\n              <p className=\"mt-1 text-xs text-gray-500 \">\n                You can change your account settings here.\n              </p>\n            </div>\n            <div>\n              <Button\n                invert\n                onClick={() => setShowDeleteModal(true)}\n                secondary\n                style={{ color: '#F87171' }}\n                bgColor=\"gray\"\n                label=\"Delete this account\"\n              />\n            </div>\n\n            <p className=\"text-sm text-gray-500\">\n              This account was created on{' '}\n              <time dateTime=\"2017-01-05T20:35:40\" className=\"font-semibold\">\n                {userData.other?.createdOn\n                  ? moment(userData.other?.createdOn).format('LL')\n                  : 'January 5, 2017, 8:35:40 PM'}\n              </time>\n              .\n            </p>\n            <Divider withButton text=\"End\" />\n\n            <Button onClick={history.goBack} gradient label={'GO BACK'} />\n          </div>\n        </form>\n      </main>\n    </div>\n  )\n}\n"],"sourceRoot":""}