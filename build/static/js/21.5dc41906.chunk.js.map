{"version":3,"sources":["components/atoms/Modal.tsx","assets/svg/placeholder.png","components/VerticalProfileCard.tsx","components/DiscoverButton.tsx","pages/dashboard/PostPhotoModal.tsx","components/event/CreateEvent.tsx","pages/dashboard/PostModal.tsx","pages/dashboard/PostInput.tsx","assets/svg/no-posts.svg","components/UserListModal.tsx","pages/groups/InviteUserModal.tsx","pages/groups/SingleGroupView.tsx"],"names":["Modal","open","setOpen","children","header","onClose","disableBackdropClose","hideCloseBtn","fixedBottom","disablePadding","Root","show","as","Fragment","static","style","zIndex","className","noop","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","type","onClick","VerticalProfileCard","user","content","isBusiness","useAccountType","defaultContent","business","name","company","jobTitle","href","links","getProfile","alt","src","coverPicture","profilePicture","avatarPlaceholder","fullName","DiscoverCard","extraItems","useQuery","fetchEvents","isFetched","isLoading","data","shortEventsData","groups","length","map","ev","viewEvent","_id","eventName","item","link","PostPhotoModal","isPhoto","postingIn","customInId","setNotification","useNotifications","usePostContext","setPosts","posts","useMutation","addPost","onSuccess","post","unshift","title","buttonText","buttonUrl","postById","postUrl","mutate","isError","error","useState","media","setMedia","upload","uploadMediaToServer","a","modifiedData","postData","postType","text","altText","postedIn","id","nanoid","url","location","postImageRef","useRef","onAltText","setOnAltText","setAltText","value","onChange","e","target","textarea","rows","gradient","rounded","invert","label","size","URL","createObjectURL","controls","controlsList","current","click","ref","img","files","accept","loading","preventDefault","fd","FormData","append","CreateEvent","eventData","validationSchema","Yup","required","min","max","eventDescription","initialValues","startDate","Date","endDate","startTime","endTime","timezone","formRef","postMutation","createEvent","message","eventId","values","setValues","uploadMultipleImages","b","finalImageList","coverPhoto","find","originalname","profilePhoto","setCoverPhoto","setProfilePhoto","uploadFunction","setTimeout","onSubmit","editMode","isEmpty","useEffect","setSelectedTimeZone","profileImageSelectorRef","coverImageSelectorRef","selectedTimeZone","enableReinitialize","innerRef","showFileExplorerForCover","placeholder","showFileExplorerForProfile","selectedItem","list","t","cols","errors","toString","disabled","PostModal","setShowOtherModals","FormInput","gridClass","hideBorders","textClass","Button","Icon","HiOutlinePhotograph","BsCameraVideo","bgColor","PostInput","customButtons","showPostModal","setShowPostModal","showOtherModals","showEventModal","setShowEventModal","defaultButtons","BiCalendarEvent","RiArticleLine","Card","UsersListModal","userList","getType","isPersonal","window","onUserClick","companyName","background","education","InviteUserModal","followingList","group","refetchGroup","selectedUsers","setSelectedUsers","config","users","fetchUsers","isSuccess","sendInvite","unselectAll","sendingInvites","errorSendingInvites","localUsers","setLocalUsers","members","loadingText","targetIdArray","groupId","onSendInvite","toLowerCase","searchedList","filter","firstName","includes","lastName","alreadyMember","g","requestSent","requests","findIndex","remove","checked","Boolean","d","userId","Spinner","Error","ExitGroup","showModal","setShowModal","history","useHistory","exitGroup","push","targetId","SingleGroupView","userData","useParams","isMember","undefined","verifyMember","FEED","fetchGroupById","refetch","groupData","fetchPost","fetchMultiplePostsById","enabled","showGroupMembersModal","setShowGroupMembersModal","Loading","isOwner","createdBy","isAdmin","admin","authorized","postCount","count","DashboardHeader","Meta","pageTitle","following","DashboardLayout","firstColClass","firstCol","moment","createdOn","format","followers","profileUrl","secondCol","groupName","CgPoll","endMessage","dataLength","scrollableTarget","next","hasMore","loader","Post","NoPosts","thirdColClass","thirdCol","cardTitle","slice","member","groupDescription","groupRules","_admin"],"mappings":"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","file":"static/js/21.5dc41906.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { Dialog, Transition } from '@headlessui/react'\nimport { XIcon } from '@heroicons/react/outline'\nimport { noop } from 'lodash'\n\nconst Modal = ({\n  open = false,\n  setOpen,\n  children,\n  header,\n  onClose,\n  disableBackdropClose = true,\n  hideCloseBtn = false,\n  fixedBottom,\n  disablePadding = false,\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  children: React.ReactNode\n  header?: string\n\n  disableBackdropClose?: boolean\n  hideCloseBtn?: boolean\n  disablePadding?: boolean\n  fixedBottom?: React.ReactNode\n  onClose?: () => void\n}) => {\n  return (\n    <Transition.Root show={open} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        static\n        style={{ zIndex: 9999 }}\n        className=\"fixed inset-0 overflow-y-auto\"\n        open={open}\n        onClose={!disableBackdropClose ? (onClose ? onClose : setOpen) : noop}\n      >\n        <div\n          className={`pb-20 flex items-end justify-center min-h-screen pt-4 px-4 text-center sm:block sm:p-0`}\n        >\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed dark:bg-black inset-0 bg-gray-500 opacity-50 transition-opacity\" />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n            aria-hidden=\"true\"\n          >\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div\n              className={`inline-block overflow-visible align-bottom  bg-white dark:bg-gray-900 rounded-lg ${\n                disablePadding ? '' : 'px-4 sm:p-6'\n              } pt-5  text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-top   pb-4`}\n            >\n              {!hideCloseBtn && (\n                <div className=\"hidden sm:block absolute top-0 right-0 pt-6 pr-6\">\n                  <button\n                    type=\"button\"\n                    className=\"bg-white dark:bg-gray-900 rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500\"\n                    onClick={() => (onClose ? onClose() : setOpen(false))}\n                  >\n                    <span className=\"sr-only\">Close</span>\n                    <XIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                  </button>\n                </div>\n              )}\n              <div className=\"modal-body\">\n                {header && (\n                  <div className=\"modal-header divider dark:divider px-2\">\n                    <h3 className=\"dark:text-white text-gray-900 text-xl font-normal\">\n                      {header}\n                    </h3>\n                  </div>\n                )}\n                <div className=\"\">{children}</div>\n                {fixedBottom && (\n                  <div className=\"absolute dark:border-gray-800 border-t bg-white dark:bg-gray-900 bottom-0 mx-6 inset-x-0\">\n                    {fixedBottom}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  )\n}\nexport default Modal\n","export default __webpack_public_path__ + \"static/media/placeholder.c69d1bed.png\";","import { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst VerticalProfileCard = ({\n  user,\n  content = null,\n}: {\n  user: IParent\n  content?: React.ReactNode\n}) => {\n  const { isBusiness } = useAccountType(user)\n\n  const defaultContent = (\n    <>\n      <p className=\"text-sm font-medium dark:text-white text-gray-500 \">\n        {isBusiness ? user?.business?.name : user?.company?.jobTitle}\n      </p>\n      <a\n        className=\"dark:text-white text-gray-900 text-lg font-medium\"\n        href={links.getProfile(user)}\n      >\n        <div className=\"mt-2\">View full profile</div>\n      </a>\n    </>\n  )\n\n  return (\n    <div className=\"plain-card\">\n      <img\n        alt=\"\"\n        src={\n          user?.coverPicture\n            ? user?.coverPicture\n            : 'https://source.unsplash.com/1600x900/?nature,water'\n        }\n        className=\"w-full lg:h-28 sm:h-24 object-cover h-20\"\n      />\n      <div className=\"flex justify-center -mt-8\">\n        <img\n          alt=\"\"\n          src={user.profilePicture ? user.profilePicture : avatarPlaceholder}\n          className=\"rounded-full border-solid lg:h-16 lg:w-16 h-12 w-12 dark:border-gray-800 border-white  border-2 -mt-3\"\n        />\n      </div>\n      <div className={`text-center ${content ? '' : 'px-3 pb-6 pt-2'}`}>\n        <a\n          href={links.getProfile(user, true)}\n          className=\"dark:text-white cursor-pointer text-gray-900 text-base font-bold \"\n        >\n          {user.fullName}\n        </a>\n        {content || defaultContent}\n      </div>\n    </div>\n  )\n}\n\nexport default VerticalProfileCard\n","import { links } from 'constants/Links'\nimport { useQuery } from 'react-query'\nimport { fetchEvents } from 'apis/queries'\n\nconst DiscoverCard = ({\n  extraItems,\n}: {\n  extraItems?: { name: string; link: string }[]\n}) => {\n  const { isFetched, isLoading, data } = useQuery('short-event-names', () =>\n    fetchEvents(true)\n  )\n\n  const shortEventsData: { _id: string; eventName: string }[] =\n    isFetched && !isLoading ? data?.data?.data : []\n  return (\n    <div className=\"rounded-lg  border dark:border-gray-700  border-gray-200  overflow-hidden lg:max-w-xs bg-white dark:bg-gray-800 \">\n      <div className=\"\">\n        <div className=\"p-4 flex flex-col gap-y-3 text-xs font-medium text-link\">\n          <a href={links.groups()} className=\"hover:underline cursor-pointer\">\n            Groups\n          </a>\n          <div className=\"flex flex-col\">\n            <div className=\" cursor-pointer flex  items-center justify-between\">\n              <div className=\"hover:underline \">Events</div>\n              <div className=\"text-gray-900 dark:text-gray-500 text-base hover:bg-gray-700 rounded-full h-6 transition-all w-6 flex items-center justify-center\">\n                +\n              </div>\n            </div>\n            {shortEventsData &&\n              shortEventsData.length > 0 &&\n              shortEventsData.map((ev) => (\n                <a\n                  href={links.viewEvent(ev._id)}\n                  className=\"py-2 text-xs font-medium text-gray-500 dark:text-gray-500 hover:underline cursor-pointer\"\n                >\n                  {ev.eventName}\n                </a>\n              ))}\n          </div>\n          <div className=\"hover:underline cursor-pointer\">Followed Hastags</div>\n          {extraItems &&\n            extraItems.length > 0 &&\n            extraItems.map((item) => (\n              <a\n                href={item.link}\n                key={item.name}\n                className=\"hover:underline cursor-pointer\"\n              >\n                {item.name}\n              </a>\n            ))}\n        </div>\n        <div className=\"flex items-center cursor-pointer hover:bg-gray-200 transition-all dark:hover:bg-gray-700 gap-y-2  justify-center px-4 border-t py-4  text-sm font-medium text-gray-500 dark:text-gray-500 border-gray-200 dark:border-gray-700\">\n          <p>Discover more</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DiscoverCard\n","import { addPost, uploadMediaToServer } from 'apis/mutations'\nimport Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport NormalFormInput from 'components/atoms/NormalFormInput'\nimport { links } from 'constants/Links'\nimport { useNotifications } from 'context/NotificationContext'\nimport { usePostContext } from 'context/PostContext'\nimport { IPost } from 'interfaces/UniversalInterface'\nimport { nanoid } from 'nanoid'\nimport React, { useRef, useState } from 'react'\nimport { useMutation } from 'react-query'\n\nconst PostPhotoModal = ({\n  open,\n  setOpen,\n  isPhoto = true,\n  postingIn = 'general',\n  customInId,\n}: {\n  open: boolean\n  postingIn?: IPost['postedIn']\n  customInId?: string\n  isPhoto: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n}) => {\n  const { setNotification } = useNotifications()\n\n  const { setPosts, posts } = usePostContext()\n\n  const { mutate, isLoading, isError, error } = useMutation(addPost, {\n    onSuccess: (data) => {\n      const post = data.data.data\n      posts.unshift(post)\n      setPosts([...posts])\n\n      setOpen(false)\n      setNotification({\n        show: true,\n        title: 'New post added.',\n        buttonText: 'View',\n        buttonUrl: links.postById(post.postUrl),\n      })\n    },\n  })\n\n  const [media, setMedia] = useState(null)\n\n  const upload = useMutation(uploadMediaToServer, {\n    onSuccess: (a) => {\n      const modifiedData = {\n        postData: {\n          postType: 'withPhoto',\n          text: altText || '',\n          postedIn: postingIn,\n          customInId: customInId,\n          links: [\n            {\n              id: nanoid(12),\n              url: a?.data?.data?.location,\n              type: isPhoto ? 'image' : 'video',\n            },\n          ],\n        },\n      }\n      mutate(modifiedData)\n    },\n  })\n\n  const postImageRef: any = useRef()\n\n  const onImageSelect = (e: any) => {\n    const img = e.target.files[0]\n    setMedia(img)\n  }\n\n  const showFileExplorer = () => postImageRef?.current?.click()\n\n  const onCancel = () => {\n    setMedia(null)\n    setOpen(false)\n  }\n\n  const onSubmit = (e: any) => {\n    e.preventDefault()\n    const fd = new FormData()\n    fd.append('image', media)\n\n    upload.mutate(fd)\n  }\n\n  const [onAltText, setOnAltText] = useState(false)\n  const [altText, setAltText] = useState('')\n\n  const onAltTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target\n    setAltText(value)\n  }\n\n  return (\n    <Modal\n      disablePadding\n      setOpen={setOpen}\n      header={`Edit your ${isPhoto ? 'photo' : 'video'}`}\n      open={open}\n    >\n      <div className=\" min-w-132 max-w-132 min-h-56 max-h-132 flex items-center justify-center overflow-y-auto\">\n        {media ? (\n          <div className=\"\">\n            {onAltText ? (\n              <div className=\"px-12\">\n                <h4 className=\"mb-1 text-gray-600 dark:text-gray-500\">\n                  Alt text\n                </h4>\n                <p className=\"dark:text-gray-700 text-gray-400 mb-2\">\n                  Alt text describes images for people who have trouble seeing\n                  them. If you don’t add alt text, it may be automatically\n                  generated after you post. You can edit it anytime.\n                </p>\n                <NormalFormInput\n                  value={altText}\n                  onChange={onAltTextChange}\n                  textarea\n                  rows={6}\n                />\n                <div className=\"mt-5 gap-x-4 px-4 m-1 sm:mt-4 flex justify-end  items-center\">\n                  <Button\n                    gradient\n                    rounded=\"rounded-full\"\n                    onClick={() => {\n                      setAltText('')\n                      setOnAltText(false)\n                    }}\n                    invert\n                    label=\"Cancel\"\n                    size=\"sm\"\n                  />\n                  <Button\n                    gradient\n                    rounded=\"rounded-full\"\n                    label=\"Save\"\n                    onClick={() => {\n                      setOnAltText(false)\n                    }}\n                    size=\"sm\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div>\n                {isPhoto ? (\n                  <img\n                    className=\"w-full\"\n                    src={URL.createObjectURL(media)}\n                    alt=\"\"\n                  />\n                ) : (\n                  <video\n                    controls\n                    className=\"w-full\"\n                    controlsList=\"nodownload\"\n                    src={URL.createObjectURL(media)}\n                  />\n                )}\n              </div>\n            )}\n            <div className=\"absolute bottom-5 left-5 pt-4 mb-2 pl-4\">\n              <Button\n                onClick={() => setOnAltText(!onAltText)}\n                invert={!onAltText}\n                label=\"Alt text\"\n              />\n            </div>\n          </div>\n        ) : (\n          <Button\n            onClick={showFileExplorer}\n            label={`Select ${isPhoto ? 'image' : 'video'} to share`}\n            gradient\n            invert\n            size=\"lg\"\n          />\n        )}\n\n        {/* HIDDEN IMAGE INPUT */}\n        <input\n          // @ts-ignore\n          ref={postImageRef}\n          className=\"hidden\"\n          type=\"file\"\n          onChange={onImageSelect}\n          accept={isPhoto ? 'image/*' : 'video/*'}\n        />\n      </div>\n      <div className=\"mt-5 border-t border-gray-200 dark:border-gray-700 pt-4 gap-x-4 px-4 m-1 sm:mt-4 flex justify-end  items-center\">\n        <Button\n          gradient\n          rounded=\"rounded-full\"\n          onClick={onCancel}\n          invert\n          label=\"Cancel\"\n          size=\"lg\"\n        />\n        <Button\n          gradient\n          rounded=\"rounded-full\"\n          loading={isLoading || upload.isLoading}\n          label=\"Done\"\n          onClick={onSubmit}\n          size=\"lg\"\n        />\n      </div>\n      {isError && <p className=\"text-red-500 text-sm\">{error}</p>}\n    </Modal>\n  )\n}\n\nexport default PostPhotoModal\n","import { addPost, createEvent, uploadMultipleImages } from 'apis/mutations'\nimport placeholder from 'assets/svg/placeholder.png'\nimport Error from 'components/alerts/Error'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport FormSelector from 'components/atoms/FormSelector'\nimport Modal from 'components/atoms/Modal'\nimport { links } from 'constants/Links'\nimport { useNotifications } from 'context/NotificationContext'\nimport { Form, Formik } from 'formik'\nimport { IEvent } from 'interfaces/UniversalInterface'\nimport { isEmpty, map } from 'lodash'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { AiOutlineEdit } from 'react-icons/ai'\nimport { useMutation } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport { timezone } from 'values/values'\nimport * as Yup from 'yup'\n\nconst CreateEvent = ({\n  open,\n  setOpen,\n  eventData,\n  fullName = '',\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  eventData?: IEvent\n  fullName: string\n}) => {\n  const validationSchema = Yup.object({\n    eventName: Yup.string().required('Event Name is required').min(10).max(150),\n    eventDescription: Yup.string()\n      .required('Event Description is required')\n      .min(10)\n      .max(600),\n\n    // startTime\n  })\n\n  // @ts-ignore\n  const initialValues: IEvent = {\n    eventName: eventData?.eventName || '',\n    eventDescription: eventData?.eventDescription || '',\n    startDate: eventData?.startDate || new Date(),\n    endDate: eventData?.endDate || new Date(),\n    startTime: eventData?.startTime || '',\n    endTime: eventData?.endTime || '',\n    timezone: eventData?.timezone || '',\n  }\n\n  const formRef = useRef()\n  const { setNotification } = useNotifications()\n\n  const postMutation = useMutation(addPost)\n\n  const { mutate, isLoading, isError, error } = useMutation(createEvent, {\n    onSuccess: (data) => {\n      // console.log(data)\n      const message = data.data.message\n      const eventId = data.data.data\n      setNotification({\n        show: true,\n        title: message,\n        buttonText: 'View',\n        buttonUrl: links.viewEvent(eventId),\n      })\n\n      postMutation.mutate({\n        postData: {\n          text: `${fullName} has organized an event.`,\n          postType: 'event',\n          customInId: eventId,\n        },\n      })\n    },\n  })\n\n  const [values, setValues] = useState(null)\n\n  const upload = useMutation(uploadMultipleImages, {\n    onSuccess: (a, b) => {\n      if (values) {\n        if (a.data.data && a.data.data.length) {\n          const finalImageList: any[] = map(a.data.data, (img) => img)\n\n          mutate({\n            ...values,\n            coverPhoto: finalImageList.find(\n              (img) => img.originalname === coverPhoto.name\n            )?.location,\n\n            profilePhoto: finalImageList.find(\n              (img) => img.originalname === profilePhoto.name\n            )?.location,\n          })\n        } else {\n          mutate({\n            ...values,\n          })\n        }\n        setOpen(false)\n        setCoverPhoto(null)\n        setProfilePhoto(null)\n      }\n    },\n  })\n\n  const uploadFunction = () => {\n    const fd = new FormData()\n\n    fd.append('images', profilePhoto)\n    fd.append('images', coverPhoto)\n\n    setTimeout(() => {\n      upload.mutate(fd)\n    }, 500)\n  }\n\n  const onSubmit = async (values: any) => {\n    setValues({ ...values })\n    uploadFunction()\n  }\n\n  const editMode = !isEmpty(eventData)\n\n  useEffect(() => {\n    if (editMode) {\n      setCoverPhoto(eventData.coverPicture)\n      setProfilePhoto(eventData.profilePicture)\n      setSelectedTimeZone(eventData?.timezone || timezone[0].text)\n    }\n  }, [editMode])\n\n  const profileImageSelectorRef = useRef()\n\n  const showFileExplorerForProfile = () =>\n    //@ts-ignore\n    profileImageSelectorRef?.current?.click()\n\n  const coverImageSelectorRef = useRef()\n\n  const showFileExplorerForCover = () =>\n    //@ts-ignore\n    coverImageSelectorRef?.current?.click()\n\n  const [profilePhoto, setProfilePhoto] = useState<any>()\n\n  const [coverPhoto, setCoverPhoto] = useState<any>()\n\n  const [selectedTimeZone, setSelectedTimeZone] = useState(timezone[0].text)\n\n  return (\n    <Modal\n      disablePadding\n      setOpen={setOpen}\n      header={`${editMode ? 'Edit' : 'Create'} event`}\n      open={open}\n    >\n      <div className=\" min-w-200 pb-4  max-w-200 min-h-164 max-h-164 overflow-y-auto\">\n        <div className=\"px-1\">\n          {/* HIDDEN IMAGE INPUT */}\n          <input\n            // @ts-ignore\n            ref={coverImageSelectorRef}\n            className=\"hidden\"\n            type=\"file\"\n            onChange={(e) => setCoverPhoto(e.target.files[0])}\n            accept=\"image/x-png,image/jpeg\"\n          />\n          {/* HIDDEN IMAGE INPUT */}\n          <input\n            // @ts-ignore\n            ref={profileImageSelectorRef}\n            className=\"hidden\"\n            type=\"file\"\n            onChange={(e) => setProfilePhoto(e.target.files[0])}\n            accept=\"image/x-png,image/jpeg\"\n          />\n\n          <Formik\n            initialValues={initialValues}\n            enableReinitialize={editMode}\n            innerRef={formRef}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            <Form className=\"space-y-6 \">\n              <div className=\" overflow-hidden  bg-white dark:bg-gray-900\">\n                <div className=\"relative  group\">\n                  <div className=\"absolute top-0 right-0 p-4\">\n                    <AiOutlineEdit className=\"bg-gray-100   transition-all hover:bg-gray-300 duration-300 rounded-full p-2 text-gray-700 h-8 w-8\" />\n                  </div>\n                  <img\n                    alt=\"\"\n                    onClick={() => showFileExplorerForCover()}\n                    src={\n                      coverPhoto\n                        ? typeof coverPhoto === 'string'\n                          ? coverPhoto\n                          : URL.createObjectURL(coverPhoto)\n                        : placeholder\n                    }\n                    className=\"w-full lg:h-36 sm:h-24 object-cover h-20\"\n                  />\n                </div>\n                <div className=\"flex  relative justify-start mr-8 ml-8 -mt-12\">\n                  <img\n                    onClick={() => showFileExplorerForProfile()}\n                    alt=\"\"\n                    src={\n                      profilePhoto\n                        ? typeof profilePhoto === 'string'\n                          ? profilePhoto\n                          : URL.createObjectURL(profilePhoto)\n                        : avatarPlaceholder\n                    }\n                    className=\" border-solid  lg:h-24 lg:w-24 h-16 w-16  border-white border-2 -mt-3\"\n                  />\n                </div>\n              </div>\n              <div className=\"px-8 space-y-4\">\n                <h3 className=\"dark:text-white text-gray-900 font-semibold \">\n                  Details\n                </h3>\n                <FormInput\n                  label=\"Event Name\"\n                  id=\"eventName\"\n                  name=\"eventName\"\n                  required\n                />\n\n                <FormSelector\n                  label=\"Timezone\"\n                  required\n                  name=\"timezone\"\n                  selectedItem={selectedTimeZone}\n                  list={timezone.map((t) => ({ name: t.text, id: t.value }))}\n                  placeholder=\"What is the purpose of this group?\"\n                />\n\n                <div className=\"flex items-center justify-between w-full gap-x-2\">\n                  <div className=\"grid grid-cols-2 \">\n                    <div className=\"mx-2\">\n                      <FormInput\n                        name=\"startDate\"\n                        label=\"Start date\"\n                        type=\"date\"\n                      />\n                    </div>\n                    <div className=\"mx-2\">\n                      <FormInput\n                        name=\"startTime\"\n                        label=\"Start time\"\n                        required\n                        type=\"time\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 \">\n                    <div className=\"mx-2\">\n                      <FormInput name=\"endDate\" label=\"End date\" type=\"date\" />\n                    </div>\n                    <div className=\"mx-2\">\n                      <FormInput\n                        name=\"endTime\"\n                        required\n                        label=\"End time\"\n                        type=\"time\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <FormInput\n                  label=\"Description\"\n                  required\n                  id=\"eventDescription\"\n                  name=\"eventDescription\"\n                  placeholder=\"Ex. Topics, schedule, etc.\"\n                  textarea\n                  rows={2}\n                  cols={255}\n                />\n              </div>\n\n              {isError && (\n                <div className=\"px-8\">\n                  <Error errors={[error.toString()]} />\n                </div>\n              )}\n              <div className=\"flex p-4 items-center justify-end\">\n                <Button\n                  rounded=\"rounded-full\"\n                  loading={upload.isLoading || isLoading}\n                  disabled={upload.isLoading || isLoading}\n                  gradient\n                  size=\"lg\"\n                  type=\"submit\"\n                  label=\"Submit\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\nexport default CreateEvent\n","import { addPost } from 'apis/mutations'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport Modal from 'components/atoms/Modal'\nimport { links } from 'constants/Links'\nimport { useNotifications } from 'context/NotificationContext'\nimport { usePostContext } from 'context/PostContext'\nimport { Form, Formik } from 'formik'\nimport { IPost } from 'interfaces/UniversalInterface'\nimport { useRef } from 'react'\nimport { BsCameraVideo } from 'react-icons/bs'\nimport { HiOutlinePhotograph } from 'react-icons/hi'\nimport { useMutation } from 'react-query'\n\nconst PostModal = ({\n  open,\n  setOpen,\n  setShowOtherModals,\n  postingIn = 'general',\n  customInId,\n}: {\n  open: boolean\n  postingIn?: IPost['postedIn']\n  customInId?: string\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  setShowOtherModals: React.Dispatch<React.SetStateAction<string>>\n}) => {\n  const { setNotification } = useNotifications()\n  const { setPosts, posts } = usePostContext()\n\n  const { mutate, isLoading, isError, error } = useMutation(addPost, {\n    onSuccess: (data) => {\n      const post = data.data.data\n      posts.unshift(post)\n      setPosts([...posts])\n      setOpen(false)\n      setNotification({\n        show: true,\n        title: 'New post added.',\n        buttonText: 'View',\n        buttonUrl: links.postById(post.postUrl),\n      })\n    },\n  })\n\n  const initialValues = {\n    text: '',\n  }\n\n  const formRef = useRef()\n\n  const onSubmit = (values: { text: string }) => {\n    mutate({\n      postData: {\n        text: values.text,\n        postedIn: postingIn,\n        customInId: postingIn !== 'general' ? customInId : null,\n      },\n    })\n  }\n\n  return (\n    <Modal setOpen={setOpen} header=\"Create a post\" open={open}>\n      <div className=\" min-w-132 min-h-56 max-h-132 overflow-y-auto\">\n        <Formik\n          innerRef={formRef}\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n        >\n          <Form>\n            <FormInput\n              gridClass=\"hideBorders\"\n              hideBorders\n              textClass=\"text-sm text-gray-700 dark:text-gray-100 sm:text-lg\"\n              placeholder=\"What do you want to talk about?\"\n              rows={10}\n              name=\"text\"\n              id=\"text\"\n              textarea\n            />\n            <div className=\"mt-5 m-1 sm:mt-4 flex justify-between  items-center\">\n              <div className=\"flex items-center gap-x-4\">\n                <Button\n                  gradient\n                  invert\n                  // className=\"dark:border-gray-600\"\n                  Icon={HiOutlinePhotograph}\n                  label=\"Photo\"\n                  onClick={() => {\n                    setOpen(false)\n                    setShowOtherModals('photo')\n                  }}\n                />\n                <Button\n                  gradient\n                  Icon={BsCameraVideo}\n                  // className=\"dark:border-gray-600\"\n                  bgColor=\"blue\"\n                  invert\n                  onClick={() => {\n                    setOpen(false)\n                    return setShowOtherModals('video')\n                  }}\n                  label=\"Video\"\n                />\n              </div>\n              <Button\n                gradient\n                loading={isLoading}\n                // @ts-ignore\n                disabled={formRef?.current?.values.text.length <= 0}\n                type=\"submit\"\n                label=\"Post\"\n                size=\"lg\"\n              />\n            </div>\n            {isError && <p className=\"text-red-500 text-sm\">{error}</p>}\n          </Form>\n        </Formik>\n      </div>\n    </Modal>\n  )\n}\n\nexport default PostModal\n","import Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport CreateEvent from 'components/event/CreateEvent'\nimport { IPost } from 'interfaces/UniversalInterface'\nimport PostModal from 'pages/dashboard/PostModal'\nimport PostPhotoModal from 'pages/dashboard/PostPhotoModal'\nimport React, { useState } from 'react'\nimport { BiCalendarEvent } from 'react-icons/bi'\nimport { BsCameraVideo } from 'react-icons/bs'\nimport { HiOutlinePhotograph } from 'react-icons/hi'\nimport { RiArticleLine } from 'react-icons/ri'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst PostInput = ({\n  profilePicture,\n  customButtons = null,\n  placeholder = 'Start a post',\n  disabled,\n  postingIn = 'general',\n  customInId,\n  fullName = '',\n}: {\n  profilePicture?: string\n  customButtons?: React.ReactNode\n  placeholder?: string\n  disabled?: boolean\n  postingIn?: IPost['postedIn']\n  fullName: string\n  customInId?: string\n}) => {\n  const [showPostModal, setShowPostModal] = useState(false)\n  const [showOtherModals, setShowOtherModals] = useState('init')\n  const [showEventModal, setShowEventModal] = useState(false)\n\n  const defaultButtons = (\n    <>\n      <Button\n        gradient\n        invert\n        // className=\"dark:border-gray-600\"\n        Icon={HiOutlinePhotograph}\n        label=\"Photo\"\n        onClick={() => setShowOtherModals('photo')}\n      />\n      <Button\n        gradient\n        Icon={BsCameraVideo}\n        // className=\"dark:border-gray-600\"\n        bgColor=\"blue\"\n        invert\n        onClick={() => setShowOtherModals('video')}\n        label=\"Video\"\n      />\n      <Button\n        gradient\n        Icon={BiCalendarEvent}\n        // className=\"dark:border-gray-600\"\n        invert\n        bgColor=\"blue\"\n        onClick={() => setShowEventModal(true)}\n        label=\"Event\"\n      />\n      <Button\n        gradient\n        Icon={RiArticleLine}\n        invert\n        // className=\"dark:border-gray-600\"\n        bgColor=\"blue\"\n        label=\"Write articles\"\n      />\n    </>\n  )\n\n  return (\n    <>\n      {!disabled && (\n        <PostModal\n          customInId={customInId}\n          postingIn={postingIn}\n          setShowOtherModals={setShowOtherModals}\n          open={showPostModal}\n          setOpen={setShowPostModal}\n        />\n      )}\n      {(showOtherModals === 'photo' || showOtherModals === 'video') && (\n        <PostPhotoModal\n          isPhoto={showOtherModals === 'photo'}\n          open\n          setOpen={() => setShowOtherModals('init')}\n        />\n      )}\n      <CreateEvent\n        fullName={fullName}\n        open={showEventModal}\n        setOpen={setShowEventModal}\n      />\n      <Card\n        content={\n          <div className=\"flex flex-col space-y-8\">\n            <div className=\"flex w-full\">\n              <img\n                src={profilePicture ? profilePicture : avatarPlaceholder}\n                alt=\"13RMS\"\n                className=\"sm:h-14 h-12 w-12 sm:w-14  border-gradient border-transparent border-2 rounded-full\"\n              />\n              <div\n                onClick={() => setShowPostModal(true)}\n                className=\"cursor-pointer sm:h-14 h-12  transition-all duration-300 hover:bg-gray-200 dark:hover:bg-gray-700 ml-4 w-full rounded-full bg-white flex items-center text-gray-500 dark:text-gray-400 justify-start px-4 text-left dark:bg-gray-800 border border-gray-400 dark:border-gray-700\"\n              >\n                {placeholder}\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              {customButtons || defaultButtons}\n            </div>\n          </div>\n        }\n      />\n    </>\n  )\n}\n\nexport default PostInput\n","export default __webpack_public_path__ + \"static/media/no-posts.25d46d19.svg\";","import Modal from 'components/atoms/Modal'\nimport { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent, IShortProfile } from 'interfaces/UniversalInterface'\nimport React from 'react'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst UsersListModal = ({\n  open,\n  setOpen,\n  title,\n  userList,\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  title: string\n  userList: IShortProfile[]\n}) => {\n  const { getType } = useAccountType()\n\n  const onUserClick = (user: IShortProfile) => {\n    window.open(links.getProfile(user), '_blank')\n  }\n  return (\n    <Modal header={title} open={open} setOpen={setOpen}>\n      {userList.map((user: IParent) => {\n        const { isBusiness, isPersonal } = getType(user)\n\n        return (\n          <div\n            key={user._id}\n            className={`p-2 py-4 relative cursor-pointer border-b border-gray-200 dark:border-gray-700 dark:hover:bg-gray-800 hover:bg-gray-100 transition-all`}\n            onClick={() => onUserClick(user)}\n          >\n            <div className=\"flex  cursor-pointer items-center \">\n              <img\n                src={user.profilePicture || avatarPlaceholder}\n                alt=\"\"\n                className=\"rounded-full mr-2 h-12 w-12\"\n              />\n              <div>\n                <h4 className=\"dark:text-white text-gray-900\">\n                  {user.fullName}\n                </h4>\n                <p className=\"dark:text-gray-500 text-gray-600 text-sm\">\n                  {isBusiness\n                    ? user?.business?.name\n                    : isPersonal\n                    ? user?.company?.companyName\n                    : user?.background?.education &&\n                      user?.background?.education[0].name}\n                </p>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n    </Modal>\n  )\n}\n\nexport default UsersListModal\n","import { XIcon } from '@heroicons/react/solid'\nimport { sendInvite } from 'apis/mutations'\nimport { fetchUsers } from 'apis/queries'\nimport Error from 'components/alerts/Error'\nimport Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport Spinner from 'components/Spinner'\nimport useAccountType from 'hooks/useAccountType'\nimport { IGroup, IGroupMember, IParent } from 'interfaces/UniversalInterface'\nimport { findIndex, remove } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useMutation, useQuery } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst InviteUserModal = ({\n  open,\n  setOpen,\n  followingList,\n  group,\n  refetchGroup,\n}: {\n  open: boolean\n  group: IGroup\n  followingList: string[]\n  refetchGroup: any\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState<IParent[]>([])\n\n  const config = {\n    users: followingList,\n  }\n  const { data, isFetched, isLoading, isSuccess } = useQuery(`user-list`, () =>\n    fetchUsers(config)\n  )\n\n  const {\n    mutate,\n    isLoading: sendingInvites,\n    error: errorSendingInvites,\n  } = useMutation(sendInvite, {\n    onSuccess: () => {\n      setOpen(false)\n      unselectAll()\n      refetchGroup()\n    },\n  })\n\n  const onUserClick = (user: IParent) => {\n    const selectedIdx = findIndex(selectedUsers, ['_id', user._id])\n    if (selectedIdx !== -1) {\n      // selected\n      remove(selectedUsers, ['_id', user._id])\n    } else {\n      selectedUsers.unshift(user)\n\n      // not selected\n    }\n    setSelectedUsers([...selectedUsers])\n  }\n\n  const unselectAll = () => {\n    setSelectedUsers([])\n  }\n\n  const unselect = (userId: string) => {\n    remove(selectedUsers, ['_id', userId])\n    setSelectedUsers([...selectedUsers])\n  }\n\n  const users: IParent[] =\n    !isLoading && isFetched && isSuccess ? data.data.data.users : []\n\n  const [localUsers, setLocalUsers] = useState<IParent[]>([])\n  useEffect(() => {\n    if (users && users.length > 0) {\n      setLocalUsers([...users])\n    }\n  }, [users])\n\n  const { getType } = useAccountType()\n\n  const onSendInvite = () => {\n    const targetIdArray = selectedUsers.map((user) => user._id)\n    mutate({ targetIdArray, groupId: group._id })\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toLowerCase()\n    let searchedList = users.filter((user) => {\n      return (\n        user.firstName.toLowerCase().includes(value) ||\n        user.lastName.toLowerCase().includes(value) ||\n        user.fullName.toLowerCase().includes(value)\n      )\n    })\n    setLocalUsers([...searchedList])\n  }\n\n  const members = group.members as IGroupMember[]\n\n  return (\n    <Modal\n      fixedBottom={\n        <div>\n          {!isLoading && isFetched && (\n            <div className=\"flex items-center justify-end  p-4\">\n              <Button\n                label={`Invite ${\n                  selectedUsers.length > 0 ? selectedUsers.length : ''\n                }`}\n                size=\"lg\"\n                loading={sendingInvites}\n                loadingText=\"Sending invites\"\n                onClick={() => onSendInvite()}\n                disabled={selectedUsers.length <= 0}\n                gradient\n                rounded=\"rounded-full\"\n              />\n            </div>\n          )}\n        </div>\n      }\n      header=\"Invite connections\"\n      open={open}\n      setOpen={setOpen}\n    >\n      <div className=\"lg:min-w-160 min-w-132 max-w-256\">\n        {!isLoading && isFetched ? (\n          <div>\n            <div className=\"w-full\">\n              <input\n                type=\"search\"\n                placeholder=\"Search by name\"\n                className=\"w-full py-2 px-4 outline-none border-none focus:ring-1 text-gray-600 dark:text-gray-400 text-sm focus:ring-yellow-500 bg-transparent h-full\"\n                onChange={onChange}\n              />\n            </div>\n            <div className=\"grid grid-cols-5 p-2 border-t border-gray-200 dark:border-gray-800\">\n              <div className=\"col-span-3 min-h-136 pb-12  max-h-136 flex flex-col  overflow-y-scroll overflow-x-hidden \">\n                {localUsers.map((user: IParent) => {\n                  const { isBusiness, isPersonal } = getType(user)\n                  const alreadyMember = !!members?.find(\n                    (g) => g._id === user._id\n                  )\n\n                  const requestSent = !!group?.requests?.find(\n                    (g) => g === user._id\n                  )\n                  return (\n                    <div\n                      key={user._id}\n                      className={`p-2 py-4 relative cursor-pointer border-b border-gray-200 dark:border-gray-700 ${\n                        alreadyMember || requestSent\n                          ? 'dark:bg-gray-800 opacity-75 bg-gray-100 pointer-events-none'\n                          : 'dark:hover:bg-gray-800 hover:bg-gray-100'\n                      }  transition-all`}\n                      onClick={() => onUserClick(user)}\n                    >\n                      <div className=\"flex  cursor-pointer items-center \">\n                        <input\n                          id=\"users\"\n                          // onChange={(e) => onUserClick(user)}\n                          name=\"candidates\"\n                          checked={Boolean(\n                            selectedUsers?.find((d) => d._id === user._id)\n                          )}\n                          type=\"checkbox\"\n                          className=\"focus:ring-yellow-500 mr-4 h-5 w-5 text-yellow-600 border-gray-300 rounded\"\n                        />\n                        <img\n                          src={user?.profilePicture || avatarPlaceholder}\n                          alt=\"\"\n                          className=\"rounded-full mr-2 h-12 w-12\"\n                        />\n                        <div>\n                          <h4 className=\"dark:text-white text-gray-900\">\n                            {user?.fullName}\n                          </h4>\n                          <p className=\"dark:text-gray-500 text-gray-600 text-sm\">\n                            {isBusiness\n                              ? user?.business?.name\n                              : isPersonal\n                              ? user?.company?.companyName\n                              : user?.background?.education &&\n                                user?.background?.education[0].name}\n                          </p>\n                        </div>\n                      </div>\n                      {(alreadyMember || requestSent) && (\n                        <p className=\"absolute text-xs italic dark:text-gray-500 text-gray-400 bottom-1 right-2 \">\n                          {alreadyMember ? 'Already member' : 'Request sent'}\n                        </p>\n                      )}\n                    </div>\n                  )\n                })}\n              </div>\n              <div className=\"col-span-2 ml-2\">\n                <div className=\"border-b text-sm border-gray-200 dark:border-gray-800  text-gray-500 dark:text-gray-400 p-4 flex items-center justify-between\">\n                  <p>{selectedUsers?.length} selected</p>\n                  <button\n                    onClick={unselectAll}\n                    className=\"font-medium dark:text-gray-300\"\n                  >\n                    Unselect all\n                  </button>\n                </div>\n                <div className=\"p-4 pr-0 flex flex-col gap-y-4 max-w-56 min-w-56  max-h-136 pb-20 overflow-y-scroll mx-2\">\n                  {selectedUsers?.length > 0 &&\n                    selectedUsers.map((user: IParent) => (\n                      <div className=\"flex  items-center  justify-between\">\n                        <div className=\"flex items-center\">\n                          <img\n                            src={user.profilePicture || avatarPlaceholder}\n                            alt=\"\"\n                            className=\"rounded-full mr-2 h-8 w-8\"\n                          />\n                          <h4 className=\"dark:text-white\">{user.fullName}</h4>\n                        </div>\n                        <div\n                          onClick={() => unselect(user._id)}\n                          className=\"dark:hover:bg-gray-700 transition-all rounded-full p-0.5\"\n                        >\n                          <XIcon\n                            className=\"cursor-pointer h-5 w-5   dark:text-gray-400\"\n                            aria-hidden=\"true\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-center\">\n            <Spinner />\n          </div>\n        )}\n        <div>\n          {errorSendingInvites && (\n            <Error errors={[errorSendingInvites.toString()]} />\n          )}\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\nexport default InviteUserModal\n","import { fetchGroupById, fetchMultiplePostsById } from 'apis/queries'\nimport { exitGroup } from 'apis/mutations'\nimport NoPosts from 'assets/svg/no-posts.svg'\nimport Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport Meta from 'components/atoms/Meta/Meta'\nimport DiscoverCard from 'components/DiscoverButton'\nimport Loading from 'components/Loading'\nimport Spinner from 'components/Spinner'\nimport VerticalProfileCard from 'components/VerticalProfileCard'\nimport { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport {\n  IGroup,\n  IParent,\n  IPost,\n  IShortProfile,\n} from 'interfaces/UniversalInterface'\nimport moment from 'moment'\nimport PostInput from 'pages/dashboard/PostInput'\nimport DashboardHeader from 'pages/DashboardHeader'\nimport DashboardLayout from 'pages/DashboardLayout'\nimport InviteUserModal from 'pages/groups/InviteUserModal'\nimport { useEffect, useState } from 'react'\nimport { BsCameraVideo } from 'react-icons/bs'\nimport { CgPoll } from 'react-icons/cg'\nimport { HiOutlinePhotograph } from 'react-icons/hi'\nimport { useMutation, useQuery } from 'react-query'\nimport { useHistory, useParams } from 'react-router'\nimport Modal from 'components/atoms/Modal'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport UsersListModal from 'components/UserListModal'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport Post from 'components/posts/Post'\nimport PostPhotoModal from 'pages/dashboard/PostPhotoModal'\nimport { usePostContext } from 'context/PostContext'\n\nconst ExitGroup = ({\n  userId,\n  groupId,\n}: {\n  userId: string\n  groupId: string\n}) => {\n  const [showModal, setShowModal] = useState(false)\n  const history = useHistory()\n  const { mutate } = useMutation(exitGroup, {\n    onSuccess: () => {\n      history.push(links.groups())\n    },\n  })\n\n  return (\n    <>\n      <Modal header=\"Confirm\" open={showModal} setOpen={setShowModal}>\n        <div className=\" \">\n          <p className=\"dark:text-gray-400 text-gray-500 text-lg\">\n            Are you sure you want to exit this group?\n          </p>\n          <div className=\"flex items-center p-4 justify-end\">\n            <Button\n              label=\"Confirm\"\n              gradient\n              onClick={() => mutate({ targetId: userId, groupId: groupId })}\n            />\n          </div>\n        </div>\n      </Modal>\n      <div className=\"rounded-lg border dark:border-gray-700  border-gray-200  overflow-hidden lg:max-w-xs bg-white dark:bg-gray-800 \">\n        <h1\n          onClick={() => setShowModal(true)}\n          className=\"text-center hover:bg-red-500 hover:text-white rounded-lg p-2 cursor-pointer text-red-500\"\n        >\n          Exit group\n        </h1>\n      </div>\n    </>\n  )\n}\n\nconst SingleGroupView = ({ userData }: { userData: IParent }) => {\n  const params: any = useParams()\n  const groupId = params.groupId\n\n  // check if the current user is a member of group\n  const verifyMember = () => {\n    let isMember = false\n    if (groupId) {\n      if (\n        !userData ||\n        userData?.groups === undefined ||\n        userData?.groups?.length === 0\n      ) {\n        isMember = false\n      } else if (userData.groups.includes(groupId)) {\n        isMember = true\n      } else {\n        isMember = false\n      }\n    } else {\n      isMember = false\n    }\n    return isMember\n  }\n\n  const history = useHistory()\n\n  const isMember = verifyMember()\n  useEffect(() => {\n    if (!isMember) {\n      history.push(links.FEED)\n    }\n  }, [groupId, isMember])\n\n  const { data, isLoading, isFetched, refetch } = useQuery('group-data', () =>\n    fetchGroupById(groupId)\n  )\n  const groupData: IGroup = isFetched && !isLoading ? data?.data?.data : []\n\n  const fetchPost = useQuery(\n    'group-posts',\n    () => fetchMultiplePostsById(groupData?.posts as string[]),\n    { enabled: !!groupData?.posts?.length && !(isLoading && !isFetched) }\n  )\n\n  const { getType } = useAccountType(userData)\n  const [showModal, setShowModal] = useState(false)\n\n  const [showGroupMembersModal, setShowGroupMembersModal] = useState(false)\n  const [showOtherModals, setShowOtherModals] = useState('init')\n\n  if (isLoading && !isFetched) {\n    return <Loading />\n  }\n\n  const isOwner = groupData?.createdBy?.toString() === userData._id\n  const isAdmin = groupData?.admin?.includes(userData._id)\n  const members = (groupData?.members as IShortProfile[]) || []\n  const authorized = isOwner || isAdmin\n\n  const posts = (fetchPost.data?.data?.data.posts as IPost[]) || []\n  const postCount = fetchPost.data?.data?.data.count || 0\n  const fetchMoreData = () => {}\n\n  return (\n    isMember && (\n      <div className=\"relative  dark:bg-gray-900 bg-gray-100 min-h-screen \">\n        <DashboardHeader userData={userData} />\n        <Meta pageTitle={`Post | Feed | 13RMS`} />\n\n        {authorized && (\n          <InviteUserModal\n            refetchGroup={refetch}\n            group={groupData}\n            followingList={userData.following}\n            open={showModal}\n            setOpen={setShowModal}\n          />\n        )}\n\n        {(showOtherModals === 'photo' || showOtherModals === 'video') && (\n          <PostPhotoModal\n            postingIn={'group'}\n            customInId={groupData._id}\n            isPhoto={showOtherModals === 'photo'}\n            open\n            setOpen={() => setShowOtherModals('init')}\n          />\n        )}\n\n        <UsersListModal\n          title={`Group members (${members?.length})`}\n          userList={members}\n          open={showGroupMembersModal}\n          setOpen={setShowGroupMembersModal}\n        />\n\n        <div\n          className={`h-auto pt-4 relative flow-root  transition-all duration-500 `}\n        >\n          <DashboardLayout\n            firstColClass={`   max-h-152 hidden  xl:block w-full `}\n            firstCol={\n              <div className=\"flex flex-col gap-y-12\">\n                {isFetched && !isLoading ? (\n                  <>\n                    <VerticalProfileCard\n                      content={\n                        <div>\n                          <div>\n                            <div className=\"ml-2 flex-shrink-0 items-center justify-center flex\">\n                              <p className=\"px-2 inline-flex text-sm items-center justify-center leading-5 font-semibold rounded-md bg-gray-100 text-gray-800 dark:bg-gray-600 dark:text-gray-200\">\n                                {isOwner\n                                  ? 'Owner'\n                                  : isAdmin\n                                  ? 'Admin'\n                                  : 'Member'}\n                              </p>\n                            </div>\n\n                            <p className=\"mb-4 text-gray-600 dark:text-gray-400 text-sm tracking-wide mt-1\">\n                              Group created:{' '}\n                              {moment(groupData.createdOn).format('MMM YYYY')}\n                            </p>\n                            {authorized && (\n                              <div className=\"flex border-t py-2 text-xs font-medium text-gray-500 dark:text-gray-500 border-gray-200 dark:border-gray-700 transition-all  item-center px-4 cursor-pointer justify-between\">\n                                <h6 className=\"font-medium \">\n                                  Requests to join\n                                </h6>\n                                <a\n                                  href={links.followers(userData?.profileUrl)}\n                                  className=\"hover:underline text-link cursor-pointer font-semibold\"\n                                >\n                                  {groupData?.requests?.length || 0}\n                                </a>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      }\n                      user={userData}\n                    />\n                    <DiscoverCard />\n                    {!isOwner && (\n                      <ExitGroup groupId={groupId} userId={userData._id} />\n                    )}\n\n                    {/* <Modal\n                      setOpen={setShowCreateGroupModal}\n                      header=\"Create group\"\n                      open={showCreateGroupModal}\n                    >\n                      <div className=\" min-w-132 max-w-164 min-h-56 max-h-132 overflow-y-auto\">\n                        <CreateGroup\n                          refetchGroup={refetch}\n                          groupData={groupData}\n                          onSuccess={() => setShowCreateGroupModal(false)}\n                        />\n                      </div>\n                    </Modal>\n\n                    {authorized && (\n                      <Button\n                        label=\"Edit group details\"\n                        gradient\n                        onClick={() => setShowCreateGroupModal(true)}\n                        // link={links.editGroup(groupData._id)}\n                      />\n                    )} */}\n                  </>\n                ) : (\n                  <Spinner />\n                )}\n              </div>\n            }\n            secondCol={\n              <div className=\"\">\n                {isLoading && !isFetched ? (\n                  <Spinner />\n                ) : (\n                  <div className=\"flex gap-y-12 mx-auto lg:max-w-2xl  flex-col\">\n                    <div className=\"rounded-lg border dark:border-gray-700  border-gray-200 overflow-hidden  bg-white dark:bg-gray-800\">\n                      <img\n                        alt=\"\"\n                        src={\n                          groupData?.coverPicture\n                            ? groupData?.coverPicture\n                            : 'https://source.unsplash.com/1600x900/?nature,water'\n                        }\n                        className=\"w-full lg:h-28 sm:h-24 object-cover h-20\"\n                      />\n                      <div className=\"flex justify-start mx-8 -mt-5\">\n                        <img\n                          alt=\"\"\n                          src={\n                            groupData.profilePicture\n                              ? groupData.profilePicture\n                              : avatarPlaceholder\n                          }\n                          className=\" border-solid lg:h-16 lg:w-16 h-12 w-12  border-white border-2 -mt-3\"\n                        />\n                      </div>\n                      <div className=\"text-left mx-8 mt-2 pb-6 pt-2\">\n                        <h3 className=\"dark:text-white text-gray-900 text-2xl font-medium \">\n                          {groupData.groupName}\n                        </h3>\n                      </div>\n                    </div>\n\n                    <PostInput\n                      fullName={userData.fullName}\n                      postingIn=\"group\"\n                      customInId={groupData._id}\n                      placeholder=\"Start a post in this group\"\n                      customButtons={\n                        <>\n                          <Button\n                            gradient\n                            invert\n                            Icon={HiOutlinePhotograph}\n                            label=\"Photo\"\n                            onClick={() => setShowOtherModals('photo')}\n                          />\n                          <Button\n                            gradient\n                            Icon={BsCameraVideo}\n                            invert\n                            onClick={() => setShowOtherModals('video')}\n                            label=\"Video\"\n                          />\n                          <Button gradient Icon={CgPoll} invert label=\"Poll\" />\n                        </>\n                      }\n                      profilePicture={userData?.profilePicture}\n                    />\n\n                    {posts && posts.length > 0 ? (\n                      <InfiniteScroll\n                        endMessage={\n                          <div className=\"text-center\">\n                            <span className=\"dark:text-gray-600 text-center text-gray-400\">\n                              •\n                            </span>\n                          </div>\n                        }\n                        dataLength={posts.length}\n                        scrollableTarget=\"main_content\"\n                        next={fetchMoreData}\n                        hasMore={postCount > posts?.length}\n                        loader={<h4>Loading...</h4>}\n                      >\n                        <div className=\"grid grid-cols-1 gap-y-6\">\n                          {posts.map((post) => (\n                            <Post\n                              key={post._id}\n                              userData={userData}\n                              userId={userData._id}\n                              post={post}\n                            />\n                          ))}\n                        </div>\n                      </InfiniteScroll>\n                    ) : (\n                      <Card\n                        content={\n                          <div className=\"m-4 text-center flex items-center justify-center flex-col\">\n                            <img\n                              src={NoPosts}\n                              alt=\"\"\n                              className=\"h-28 sm:h-32 lg:h-36 xl:h-40 w-full\"\n                            />\n                            <h3 className=\"mt-4 text-xl font-medium dark:text-gray-300 text-gray-900\">\n                              Create the first post\n                            </h3>\n                            <p className=\"mt-1 text-base text-gray-500\">\n                              Get the conversation going. Be the first to post\n                              in this event!\n                            </p>\n                          </div>\n                        }\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            }\n            thirdColClass=\"lg:block\"\n            thirdCol={\n              <div className=\"space-y-12 lg:max-w-84 max-w-full\">\n                <Card\n                  cardTitle={`${groupData.members.length} member${\n                    groupData.members.length > 1 ? 's' : ''\n                  }`}\n                  content={\n                    <div className=\"mt-4 flex-shrink-0 sm:mt-0 \">\n                      <div className=\"flex overflow-hidden -space-x-2\">\n                        {groupData.members\n                          .slice(0, 4)\n                          // @ts-ignore\n                          .map((member: IParent) => (\n                            <img\n                              key={member._id}\n                              className=\"inline-block lg:h-12 lg:w-12 h-12 w-12 rounded-full ring-2 dark:ring-transparent ring-white\"\n                              src={member.profilePicture}\n                              alt={''}\n                            />\n                          ))}\n                      </div>\n                      <div className=\"flex gap-x-4 items-center justify-start\">\n                        {authorized && (\n                          <Button\n                            onClick={() => setShowModal(true)}\n                            gradient\n                            rounded=\"rounded-full\"\n                            className=\"mt-4\"\n                            label=\"Invite connections\"\n                          />\n                        )}\n                        <Button\n                          onClick={() =>\n                            setShowGroupMembersModal(!showGroupMembersModal)\n                          }\n                          gradient\n                          rounded=\"rounded-full\"\n                          invert\n                          className=\"mt-4\"\n                          label=\"see all members\"\n                        />\n                      </div>\n                    </div>\n                  }\n                />\n                {groupData?.groupDescription && (\n                  <Card\n                    cardTitle=\"About this group\"\n                    content={\n                      <p className=\"text-gray-900 dark:text-gray-200 line-clamp \">\n                        {groupData?.groupDescription}\n                      </p>\n                    }\n                  />\n                )}\n                {groupData.groupRules && (\n                  <Card\n                    cardTitle=\"Group rules\"\n                    content={\n                      <p className=\"text-gray-900 dark:text-gray-200 line-clamp \">\n                        {groupData.groupRules}\n                      </p>\n                    }\n                  />\n                )}\n                <Card\n                  cardTitle=\"Admin\"\n                  content={\n                    <div>\n                      {/* Start */}\n                      {/* @ts-ignore */}\n                      {groupData.admin.map((_admin: IParent) => {\n                        const { isBusiness, isPersonal } = getType(_admin)\n                        return (\n                          <div className=\"flex \">\n                            <div className=\"mr-4 mt-2 flex-shrink-0\">\n                              <img\n                                alt=\"\"\n                                src={\n                                  _admin.profilePicture\n                                    ? _admin.profilePicture\n                                    : avatarPlaceholder\n                                }\n                                className=\"rounded-full border-solid lg:h-12 lg:w-12 h-12 w-12  border-white border-2 -mt-3\"\n                              />\n                            </div>\n                            <div>\n                              <a\n                                href={links.getProfile(_admin)}\n                                className=\"text-base  dark:text-white font-semibold\"\n                              >\n                                {_admin.fullName}\n                              </a>\n                              <p className=\"mt-1 text-sm dark:text-gray-500\">\n                                {isBusiness\n                                  ? _admin?.business?.name\n                                  : isPersonal\n                                  ? _admin?.company?.companyName\n                                  : _admin?.background?.education &&\n                                    _admin?.background?.education[0].name}\n                              </p>\n                            </div>\n                          </div>\n                        )\n                      })}\n                    </div>\n                  }\n                />\n\n                {/* <Following\n                  showSingleCard\n                  list={userData?.following}\n                  interests={userData?.background?.interests}\n                /> */}\n              </div>\n            }\n          />\n        </div>\n      </div>\n    )\n  )\n}\n\nexport default SingleGroupView\n"],"sourceRoot":""}