{"version":3,"sources":["pages/account/personal/CompanyStep.jsx"],"names":["CompanyStep","user","useState","isLoaded","history","useHistory","PersonalStepOne","initialState","setInitialState","company","useEffect","hasOwnProperty","accountFilled","push","links","DASHBAORD","checkAccount","isEmpty","jobTitle","jobType","currentCompany","setValues","useUserContext","onSubmit","values","a","setSaving","token","getAccessToken","updatedData","companyName","other","accountFinishedStep","network","post","headers","Authorization","password","PERSONAL_STEP_2","console","error","validationSchema","Yup","required","saving","title","withButton","text","onClick","STUDENT_STEP_1","subtitle","className","initialValues","enableReinitialize","label","id","name","type","fullWidth","rounded","gradient","loading"],"mappings":"iRAoKeA,UAlJK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,EAAmBC,oBAAS,GAArBC,EAAP,oBACMC,EAAUC,cAEhB,EAAwCH,mBAASI,KAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAUR,EAAKQ,QAWrBC,qBAAU,YANW,WACnB,GAAIT,GAAQA,EAAKU,eAAe,mBAA5B,OAAgDV,QAAhD,IAAgDA,OAAhD,EAAgDA,EAAMW,eACjDR,EAAQS,KAAKC,IAAMC,WAK5BC,KACC,IAEHN,qBAAU,YACHO,kBAAQR,IAAYA,EAAQS,UAC/BV,EAAgB,CACdU,SAAUT,EAAQS,SAClBC,QAASV,EAAQU,QACjBC,eAAgBX,EAAQW,mBAG3B,CAACX,IAEJ,IAAQY,EAAcC,cAAdD,UACFE,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACfC,GAAU,GADK,SAGPC,EAAQC,cACVC,EAJS,2BAKR5B,GALQ,IAMXQ,QAAQ,2BACHR,EAAKQ,SADH,IAELS,SAAUM,EAAON,SACjBC,QAASK,EAAOL,QAChBC,eAAgBI,EAAOJ,eACvBU,YAAaN,EAAOJ,iBAEtBW,MAAM,2BACD9B,EAAK8B,OADL,IAEHC,oBAAqB,cAfZ,SAkBPC,IAAQC,KACZ,eADI,eAGCL,GAEL,CACEM,QAAS,CAAEC,cAAeT,KAxBjB,cA6BNE,EAAYQ,SACnBhB,EAAU,eAAKQ,IAEfzB,EAAQS,KAAKC,IAAMwB,iBAhCN,kDAkCbC,QAAQC,MAAR,MAlCa,yBAoCbd,GAAU,GApCG,6EAAH,sDAwCRe,EAAmBC,IAAW,CAClCxB,SAAUwB,MAAaC,SAAS,6BAChCxB,QAASuB,MAAaC,SAAS,4BAC/BvB,eAAgBsB,MAAaC,SAC3B,0CAIJ,EAA4BzC,oBAAS,GAArC,mBAAO0C,EAAP,KAAelB,EAAf,KAEA,OAAQvB,EAGN,cAAC,IAAD,CACE0C,MAAM,sBACNC,WACE,cAAC,IAAD,CACEC,KAAK,8BACLC,QAAS,kBAAM5C,EAAQS,KAAKC,IAAMmC,mBAGtCC,SACE,4EAC6C,uBAD7C,mBATJ,SAcE,cAAC,IAAD,CAAaC,UAAU,wCAAvB,SACE,qBAAKA,UAAU,sHAAf,SACE,cAAC,IAAD,CACEC,cAAe7C,EACfkC,iBAAkBA,EAClBlB,SAAUA,EACV8B,oBAAkB,EAJpB,SAME,eAAC,IAAD,CAAMF,UAAU,YAAhB,UACE,cAAC,IAAD,CACEG,MAAM,wBACNC,GAAG,WACHC,KAAK,WACLb,UAAQ,IAEV,cAAC,IAAD,CACEW,MAAM,WACNC,GAAG,UACHC,KAAK,UACLb,UAAQ,IAGV,cAAC,IAAD,CACEW,MAAM,kBACNC,GAAG,iBACHC,KAAK,iBACLb,UAAQ,IAGV,8BACE,cAAC,IAAD,CACEc,KAAK,SACLC,WAAS,EACTC,QAAQ,aACRC,UAAQ,EACRC,QAASjB,EACTU,MAAM,2BApDpB,cAAC,IAAD","file":"static/js/8.0fc354f3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport TextButton from 'components/atoms/TextButton'\nimport Loading from 'components/Loading'\nimport { links } from 'constants/Links'\nimport Layout from 'containers/Layout'\nimport { useHistory } from 'react-router-dom'\n\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { PersonalStepOne } from 'initials'\n\nimport { getAccessToken, network } from 'helpers'\nimport AnimatedDiv from 'components/animation/AnimatedDiv'\nimport { isEmpty } from 'lodash'\nimport { useUserContext } from 'context/UserContext'\n\nconst CompanyStep = ({ user }) => {\n  const [isLoaded] = useState(true)\n  const history = useHistory()\n\n  const [initialState, setInitialState] = useState(PersonalStepOne)\n\n  const company = user.company\n\n  /**\n   * Check if account is already selected\n   */\n  const checkAccount = () => {\n    if (user && user.hasOwnProperty('accountFilled') && user?.accountFilled) {\n      return history.push(links.DASHBAORD)\n    }\n  }\n\n  useEffect(() => {\n    checkAccount()\n  }, [])\n\n  useEffect(() => {\n    if (!isEmpty(company) && company.jobTitle) {\n      setInitialState({\n        jobTitle: company.jobTitle,\n        jobType: company.jobType,\n        currentCompany: company.currentCompany,\n      })\n    }\n  }, [company])\n\n  const { setValues } = useUserContext()\n  const onSubmit = async (values) => {\n    setSaving(true)\n    try {\n      const token = getAccessToken()\n      let updatedData = {\n        ...user,\n        company: {\n          ...user.company,\n          jobTitle: values.jobTitle,\n          jobType: values.jobType,\n          currentCompany: values.currentCompany,\n          companyName: values.currentCompany,\n        },\n        other: {\n          ...user.other,\n          accountFinishedStep: 'company',\n        },\n      }\n      await network.post(\n        '/user/update',\n        {\n          ...updatedData,\n        },\n        {\n          headers: { Authorization: token },\n        }\n      )\n\n      //@ts-ignore\n      delete updatedData.password\n      setValues({ ...updatedData })\n\n      history.push(links.PERSONAL_STEP_2)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const validationSchema = Yup.object({\n    jobTitle: Yup.string().required('Please add your job title'),\n    jobType: Yup.string().required('Please add your job type'),\n    currentCompany: Yup.string().required(\n      'Please add your current company name'\n    ),\n  })\n\n  const [saving, setSaving] = useState(false)\n\n  return !isLoaded ? (\n    <Loading />\n  ) : (\n    <Layout\n      title=\"Company Information\"\n      withButton={\n        <TextButton\n          text=\"or create a student account\"\n          onClick={() => history.push(links.STUDENT_STEP_1)}\n        />\n      }\n      subtitle={\n        <p>\n          Your profile helps you find new people and <br /> oppurtunites\n        </p>\n      }\n    >\n      <AnimatedDiv className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-white dark:bg-gray-800 border border-transparent dark:border-gray-700  py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n          <Formik\n            initialValues={initialState}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            enableReinitialize\n          >\n            <Form className=\"space-y-6\">\n              <FormInput\n                label=\"Most recent job title\"\n                id=\"jobTitle\"\n                name=\"jobTitle\"\n                required\n              />\n              <FormInput\n                label=\"Job Type\"\n                id=\"jobType\"\n                name=\"jobType\"\n                required\n              />\n\n              <FormInput\n                label=\"Current Company\"\n                id=\"currentCompany\"\n                name=\"currentCompany\"\n                required\n              />\n\n              <div>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  rounded=\"rounded-lg\"\n                  gradient\n                  loading={saving}\n                  label=\"Next Step\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </AnimatedDiv>\n    </Layout>\n  )\n}\n\nexport default CompanyStep\n"],"sourceRoot":""}