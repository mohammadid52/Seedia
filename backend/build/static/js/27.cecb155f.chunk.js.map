{"version":3,"sources":["components/atoms/Modal.tsx","components/Spinner.tsx","components/Dropdown/Dropdown.tsx","assets/svg/placeholder.png","components/Tabs.tsx","hooks/useTabs.ts","pages/groups/GroupItem.tsx","assets/svg/no-groups.svg","components/animation/AnimatedContainer.tsx","pages/groups/CreateGroup.tsx","pages/groups/GroupsView.tsx"],"names":["Modal","open","setOpen","children","header","onClose","disableBackdropClose","hideCloseBtn","fixedBottom","disablePadding","Root","show","as","Fragment","static","style","zIndex","className","noop","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","type","onClick","Spinner","Dropdown","list","Button","Items","map","item","Item","active","e","stopPropagation","classNames","Icon","name","Tabs","tabs","currentTab","setCurrentTab","htmlFor","id","defaultValue","find","tab","tabIndex","useTabs","initCurrentTab","useState","helpers","GroupItem","group","userId","isOwner","createdBy","toString","dropdownList","navigator","clipboard","writeText","window","origin","links","groupById","_id","filter","Boolean","alt","src","profilePicture","avatarPlaceholder","href","groupName","members","length","AnimatedContainer","animationType","duration","customAnimation","fixWidth","hide","genAnimation","CreateGroup","onSuccess","refetchGroup","groupData","userData","validationSchema","Yup","required","min","max","groupDescription","initialValues","groupRules","formRef","useRef","setNotification","useNotifications","postMutation","useMutation","addPost","createGroup","data","title","firstName","buttonText","buttonUrl","mutate","postData","text","fullName","postType","customInId","isLoading","isError","error","upload","uploadMultipleImages","a","finalImageList","img","current","values","coverPhoto","originalname","location","profilePhoto","uploadFunction","fd","FormData","append","setTimeout","editMode","isEmpty","useEffect","setCoverPhoto","coverPicture","setProfilePhoto","onSubmit","profileImageSelectorRef","coverImageSelectorRef","ref","onChange","target","files","accept","enableReinitialize","innerRef","click","showFileExplorerForCover","URL","createObjectURL","placeholder","showFileExplorerForProfile","FormInput","label","textarea","rows","cols","rounded","loading","disabled","gradient","size","Error","errors","NoGroups","IdleUser","Groups","groups","GroupsView","useQuery","fetchGroups","isFetched","refetch","requestedGroups","fetchRequestedGroups","requestedGroupsData","localGroups","setLocalGroups","onYourGroups","onRequested","groupsLen","showCreateGroupModal","setShowCreateGroupModal","NarrowLayout","customMaxWidth","Meta","pageTitle","Card","content","invert"],"mappings":"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","file":"static/js/27.cecb155f.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { Dialog, Transition } from '@headlessui/react'\nimport { XIcon } from '@heroicons/react/outline'\nimport { noop } from 'lodash'\n\nconst Modal = ({\n  open = false,\n  setOpen,\n  children,\n  header,\n  onClose,\n  disableBackdropClose = true,\n  hideCloseBtn = false,\n  fixedBottom,\n  disablePadding = false,\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  children: React.ReactNode\n  header?: string\n\n  disableBackdropClose?: boolean\n  hideCloseBtn?: boolean\n  disablePadding?: boolean\n  fixedBottom?: React.ReactNode\n  onClose?: () => void\n}) => {\n  return (\n    <Transition.Root show={open} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        static\n        style={{ zIndex: 9999 }}\n        className=\"fixed inset-0 overflow-y-auto\"\n        open={open}\n        onClose={!disableBackdropClose ? (onClose ? onClose : setOpen) : noop}\n      >\n        <div\n          className={`pb-20 flex items-end justify-center min-h-screen pt-4 px-4 text-center sm:block sm:p-0`}\n        >\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed dark:bg-black inset-0 bg-gray-500 opacity-50 transition-opacity\" />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\n            aria-hidden=\"true\"\n          >\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div\n              className={`inline-block overflow-visible align-bottom  bg-white dark:bg-gray-900 rounded-lg ${\n                disablePadding ? '' : 'px-4 sm:p-6'\n              } pt-5  text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-top   pb-4`}\n            >\n              {!hideCloseBtn && (\n                <div className=\"hidden sm:block absolute top-0 right-0 pt-6 pr-6\">\n                  <button\n                    type=\"button\"\n                    className=\"bg-white dark:bg-gray-900 rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500\"\n                    onClick={() => (onClose ? onClose() : setOpen(false))}\n                  >\n                    <span className=\"sr-only\">Close</span>\n                    <XIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                  </button>\n                </div>\n              )}\n              <div className=\"modal-body\">\n                {header && (\n                  <div className=\"modal-header divider dark:divider px-2\">\n                    <h3 className=\"dark:text-white text-gray-900 text-xl font-normal\">\n                      {header}\n                    </h3>\n                  </div>\n                )}\n                <div className=\"\">{children}</div>\n                {fixedBottom && (\n                  <div className=\"absolute dark:border-gray-800 border-t bg-white dark:bg-gray-900 bottom-0 mx-6 inset-x-0\">\n                    {fixedBottom}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  )\n}\nexport default Modal\n","const Spinner = () => {\n  return (\n    <div className=\" flex m-4 justify-center items-center\">\n      <div className=\"animate-spin rounded-full h-24 w-24 border-t-2 border-b-2 border-pink-500\"></div>\n    </div>\n  )\n}\n\nexport default Spinner\n","/* This example requires Tailwind CSS v2.0+ */\nimport { Fragment } from 'react'\nimport { Menu, Transition } from '@headlessui/react'\nimport { DotsVerticalIcon } from '@heroicons/react/solid'\nimport { classNames } from 'utils/classNames'\nimport map from 'lodash/map'\nimport { IProduct } from 'interfaces/UniversalInterface'\nimport { IconType } from 'react-icons/lib'\n\ntype Item = {\n  id: string\n  onClick: (product?: IProduct) => void\n  name: string\n  Icon?: IconType\n}\n\nconst Dropdown = ({ list }: { list: Item[] }) => {\n  return (\n    <Menu as=\"div\" className=\"relative inline-block text-left\">\n      <div>\n        <Menu.Button className=\"rounded-full flex items-center text-gray-400 hover:text-yellow-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-yellow-100 focus:ring-yellow-500\">\n          <span className=\"sr-only\">Open options</span>\n          <DotsVerticalIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n        </Menu.Button>\n      </div>\n\n      <Transition\n        as={Fragment}\n        enter=\"transition ease-out duration-100\"\n        enterFrom=\"transform opacity-0 scale-95\"\n        enterTo=\"transform opacity-100 scale-100\"\n        leave=\"transition ease-in duration-75\"\n        leaveFrom=\"transform opacity-100 scale-100\"\n        leaveTo=\"transform opacity-0 scale-95\"\n      >\n        <Menu.Items\n          style={{ zIndex: 999 }}\n          className=\"origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none\"\n        >\n          <div className=\"py-1\">\n            {map(list, (item) => (\n              <Menu.Item>\n                {({ active }) => (\n                  <div\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      if (typeof item.onClick === 'function') {\n                        item.onClick()\n                      }\n                    }}\n                    className={classNames(\n                      active\n                        ? 'bg-gray-100 dark:bg-gray-600 dark:text-white text-gray-900'\n                        : 'text-gray-700 dark:bg-gray-700 dark:text-white',\n                      'items-center px-4 py-2 flex text-sm cursor-pointer'\n                    )}\n                  >\n                    {item.Icon && <item.Icon className=\"mr-2\" />}\n                    {item.name}\n                  </div>\n                )}\n              </Menu.Item>\n            ))}\n          </div>\n        </Menu.Items>\n      </Transition>\n    </Menu>\n  )\n}\n\nexport default Dropdown\n","export default __webpack_public_path__ + \"static/media/placeholder.c69d1bed.png\";","import { classNames } from 'utils/classNames'\n\nexport interface ITab {\n  name: string\n}\n\nexport interface TabsProps {\n  tabs: ITab[]\n  currentTab: string\n  setCurrentTab: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst Tabs = ({ tabs, currentTab, setCurrentTab }: TabsProps) => {\n  return (\n    <div>\n      <div className=\"sm:hidden\">\n        <label htmlFor=\"tabs\" className=\"sr-only\">\n          Select a tab\n        </label>\n\n        <select\n          id=\"tabs\"\n          name=\"tabs\"\n          className=\"block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\n          defaultValue={tabs.find((tab) => tab.name === currentTab).name}\n        >\n          {tabs.map((tab) => (\n            <option key={tab.name}>{tab.name}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"hidden sm:block\">\n        <div className=\"\">\n          <nav className=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">\n            {tabs.map((tab) => (\n              <div\n                tabIndex={0}\n                key={tab.name}\n                onClick={() => setCurrentTab(tab.name)}\n                className={classNames(\n                  currentTab === tab.name\n                    ? ' gradient-text border-b-2 dark:border-pink-700 border-pink-200'\n                    : 'dark:hover:text-pink-600 border-transparent border-b-2 text-gray-500 hover:text-gray-700 dark:hover:border-gray-600 hover:border-gray-300',\n                  'whitespace-nowrap py-4 cursor-pointer px-1  font-medium text-sm'\n                )}\n              >\n                {tab.name}\n              </div>\n            ))}\n          </nav>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default Tabs\n","import { ITab } from 'components/Tabs'\nimport { useState } from 'react'\n\nconst useTabs = (tabs: ITab[]) => {\n  const initCurrentTab = tabs[0].name\n  const [currentTab, setCurrentTab] = useState(initCurrentTab)\n\n  const helpers = tabs.map((tab) => tab.name === currentTab)\n\n  return { currentTab, setCurrentTab, helpers }\n}\n\nexport default useTabs\n","import Dropdown from 'components/Dropdown/Dropdown'\nimport { links } from 'constants/Links'\nimport { IGroup } from 'interfaces/UniversalInterface'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst GroupItem = ({ group, userId }: { group: IGroup; userId: string }) => {\n  const isOwner = group?.createdBy?.toString() === userId\n\n  const dropdownList = [\n    {\n      id: '1',\n      name: 'Copy link to group',\n      onClick: () => {\n        navigator.clipboard.writeText(\n          window.origin + links.groupById(group._id)\n        )\n      },\n    },\n    isOwner && {\n      id: '2',\n      name: 'Update your settings',\n      onClick: () => {},\n    },\n    {\n      id: '3',\n      name: `Leave this group`,\n      onClick: () => {},\n    },\n  ].filter(Boolean)\n\n  return (\n    <div key={group._id}>\n      <div className=\"block border-b border-gray-200 dark:border-gray-700 pt-2\">\n        <div className=\"px-4 py-4 flex items-center sm:px-6\">\n          <img\n            alt=\"\"\n            src={\n              group.profilePicture ? group.profilePicture : avatarPlaceholder\n            }\n            className=\"h-14 w-14  2 -mt-3\"\n          />\n          <div className=\"min-w-0 ml-2 flex-1 sm:flex sm:items-center sm:justify-between\">\n            <div className=\"truncate\">\n              <div className=\"flex text-sm relative\">\n                <a\n                  href={links.groupById(group._id)}\n                  className=\"font-medium  hover:underline text-lg dark:text-gray-300 text-gray-900 truncate\"\n                >\n                  {group.groupName}\n                </a>\n                {isOwner && (\n                  <div className=\"ml-2 flex-shrink-0 flex\">\n                    <p className=\"px-2 inline-flex text-sm items-center justify-center leading-5 font-semibold rounded-md bg-gray-100 text-gray-800 dark:bg-gray-600 dark:text-gray-200\">\n                      Owner\n                    </p>\n                  </div>\n                )}\n              </div>\n              <div className=\"mt-0 flex text-sm text-gray-600 dark:text-gray-500\">\n                {group.members.length}{' '}\n                {group.members.length > 1 ? 'members' : 'member'}\n              </div>\n            </div>\n          </div>\n          <div className=\"relative z-10\">\n            <Dropdown list={dropdownList} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GroupItem\n","export default __webpack_public_path__ + \"static/media/no-groups.3aa1c7b9.svg\";","import { classNames } from 'utils/classNames'\n\nconst AnimatedContainer = ({\n  children,\n  show,\n  animationType = 'scale',\n  duration = '300',\n  className,\n  customAnimation,\n  fixWidth = false,\n}: {\n  show: boolean\n  fixWidth?: boolean\n  className?: string\n  customAnimation?: { show: string; hide: string }\n  children: React.ReactNode\n  duration?: '150' | '200' | '300' | '500' | '700' | '1000' | string\n  animationType?: 'slider' | 'opacity' | 'scale' | 'translateY' | string\n}) => {\n  const genAnimation = () => {\n    switch (animationType) {\n      case 'slider':\n        return show\n          ? 'opacity-100 translate-x-0'\n          : 'opacity-0 -translate-x-full'\n      case 'opacity':\n        return show ? 'opacity-100' : 'opacity-0'\n      case 'scale':\n        return show ? 'scale-100 opacity-100' : 'scale-95 opacity-0'\n      case 'translateY':\n        return show ? 'translate-y-0 opacity-100' : '-translate-y-3 opacity-0'\n      case 'custom':\n        return show ? customAnimation.show : customAnimation.hide\n\n      default:\n        return show\n          ? 'opacity-100 translate-x-0'\n          : 'opacity-0 -translate-x-full'\n    }\n  }\n  return (\n    <div\n      className={classNames(\n        genAnimation(),\n        'transition-all  transform',\n        `duration-${duration}`,\n        fixWidth ? (show ? className : 'w-0') : className\n      )}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default AnimatedContainer\n","import { addPost, createGroup, uploadMultipleImages } from 'apis/mutations'\nimport placeholder from 'assets/svg/placeholder.png'\nimport Error from 'components/alerts/Error'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport { links } from 'constants/Links'\nimport { useNotifications } from 'context/NotificationContext'\nimport { Form, Formik } from 'formik'\nimport { IGroup, IParent } from 'interfaces/UniversalInterface'\nimport { isEmpty, map } from 'lodash'\nimport { useEffect, useRef, useState } from 'react'\nimport { AiOutlineEdit } from 'react-icons/ai'\nimport { useMutation } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport * as Yup from 'yup'\n\nconst CreateGroup = ({\n  onSuccess,\n  refetchGroup,\n  groupData = null,\n  userData,\n}: {\n  onSuccess?: () => void\n  refetchGroup: any\n  groupData?: IGroup\n  userData: IParent\n}) => {\n  const validationSchema = Yup.object({\n    groupName: Yup.string().required('Group Name is required').min(10).max(150),\n    groupDescription: Yup.string()\n      .required('Group Description is required')\n      .min(10)\n      .max(150),\n  })\n\n  // @ts-ignore\n  const initialValues: IGroup = {\n    groupName: groupData?.groupName || '',\n    groupDescription: groupData?.groupDescription || '',\n    groupRules: groupData?.groupRules || '',\n  }\n\n  const formRef = useRef()\n  const { setNotification } = useNotifications()\n\n  const postMutation = useMutation(addPost, {\n    onSuccess: () => {\n      onSuccess()\n    },\n  })\n\n  const { mutate, isLoading, isError, error } = useMutation(createGroup, {\n    onSuccess: (data) => {\n      const group = data?.data?.data\n      const groupName = group?.groupName\n\n      setNotification({\n        show: true,\n        title: `Dear ${userData.firstName}. You have successfully created the group ${groupName} `,\n        buttonText: 'View',\n        buttonUrl: links.groupById(group._id),\n      })\n\n      refetchGroup()\n\n      postMutation.mutate({\n        postData: {\n          text: `${userData.fullName} created group: ${groupName}`,\n          postType: 'group',\n          customInId: group._id,\n        },\n      })\n    },\n  })\n\n  const upload = useMutation(uploadMultipleImages, {\n    onSuccess: (a) => {\n      const finalImageList: any[] = map(a.data.data, (img) => img)\n      // @ts-ignore\n      if (formRef?.current && formRef?.current?.values) {\n        mutate({\n          // @ts-ignore\n          ...formRef?.current?.values,\n          coverPhoto: finalImageList.find(\n            (img) => img.originalname === coverPhoto.name\n          )?.location,\n\n          profilePhoto: finalImageList.find(\n            (img) => img.originalname === profilePhoto.name\n          )?.location,\n        })\n      }\n    },\n  })\n\n  const uploadFunction = () => {\n    const fd = new FormData()\n\n    fd.append('images', profilePhoto)\n    fd.append('images', coverPhoto)\n\n    setTimeout(() => {\n      upload.mutate(fd)\n    }, 500)\n  }\n\n  const editMode = !isEmpty(groupData)\n\n  useEffect(() => {\n    if (editMode) {\n      setCoverPhoto(groupData?.coverPicture)\n      setProfilePhoto(groupData?.profilePicture)\n    }\n  }, [editMode])\n\n  const onSubmit = async () => {\n    uploadFunction()\n  }\n\n  const profileImageSelectorRef = useRef()\n\n  const showFileExplorerForProfile = () =>\n    //@ts-ignore\n    profileImageSelectorRef?.current?.click()\n\n  const coverImageSelectorRef = useRef()\n\n  const showFileExplorerForCover = () =>\n    //@ts-ignore\n    coverImageSelectorRef?.current?.click()\n\n  const [profilePhoto, setProfilePhoto] = useState<any>()\n\n  const [coverPhoto, setCoverPhoto] = useState<any>()\n\n  return (\n    <div className=\"px-1\">\n      {/* HIDDEN IMAGE INPUT */}\n      <input\n        // @ts-ignore\n        ref={coverImageSelectorRef}\n        className=\"hidden\"\n        type=\"file\"\n        onChange={(e) => setCoverPhoto(e.target.files[0])}\n        accept=\"image/x-png,image/jpeg\"\n      />\n      {/* HIDDEN IMAGE INPUT */}\n      <input\n        // @ts-ignore\n        ref={profileImageSelectorRef}\n        className=\"hidden\"\n        type=\"file\"\n        onChange={(e) => setProfilePhoto(e.target.files[0])}\n        accept=\"image/x-png,image/jpeg\"\n      />\n\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize\n        innerRef={formRef}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form className=\"space-y-6\">\n          <div className=\" overflow-hidden  bg-white dark:bg-gray-900\">\n            <div className=\"relative  group\">\n              <div className=\"absolute top-0 right-0 p-4\">\n                <AiOutlineEdit className=\"bg-gray-100   transition-all hover:bg-gray-300 duration-300 rounded-full p-2 text-gray-700 h-8 w-8\" />\n              </div>\n              <img\n                alt=\"\"\n                onClick={() => showFileExplorerForCover()}\n                src={\n                  coverPhoto\n                    ? editMode\n                      ? coverPhoto\n                      : URL.createObjectURL(coverPhoto)\n                    : placeholder\n                }\n                className=\"w-full lg:h-36 sm:h-24 object-cover h-20\"\n              />\n            </div>\n            <div className=\"flex  relative justify-start mr-8 ml-4 -mt-12\">\n              <img\n                onClick={() => showFileExplorerForProfile()}\n                alt=\"\"\n                src={\n                  profilePhoto\n                    ? editMode\n                      ? profilePhoto\n                      : URL.createObjectURL(profilePhoto)\n                    : avatarPlaceholder\n                }\n                className=\" border-solid lg:h-24 lg:w-24 h-16 w-16  border-white border-2 -mt-3\"\n              />\n            </div>\n          </div>\n          <FormInput\n            label=\"Group Name\"\n            id=\"groupName\"\n            name=\"groupName\"\n            required\n            placeholder=\"Add group name\"\n          />\n\n          <FormInput\n            label=\"Description\"\n            id=\"groupDescription\"\n            name=\"groupDescription\"\n            placeholder=\"What is the purpose of this group?\"\n            textarea\n            rows={2}\n            cols={255}\n          />\n          <FormInput\n            label=\"Group rules\"\n            id=\"groupRules\"\n            name=\"groupRules\"\n            placeholder=\"Set the tone and expectations of your group\"\n            textarea\n            rows={2}\n            cols={255}\n          />\n\n          <div className=\"flex  items-center justify-end\">\n            <Button\n              type=\"submit\"\n              rounded=\"rounded-lg\"\n              loading={upload.isLoading || isLoading}\n              disabled={upload.isLoading || isLoading}\n              gradient\n              size=\"lg\"\n              label=\"Create group\"\n            />\n          </div>\n\n          {isError && <Error errors={[error.toString()]} />}\n        </Form>\n      </Formik>\n    </div>\n  )\n}\n\nexport default CreateGroup\n","import { fetchGroups, fetchRequestedGroups } from 'apis/queries'\nimport IdleUser from 'assets/svg/no-groups.svg'\nimport AnimatedContainer from 'components/animation/AnimatedContainer'\nimport Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport Meta from 'components/atoms/Meta/Meta'\nimport Modal from 'components/atoms/Modal'\nimport Dropdown from 'components/Dropdown/Dropdown'\nimport Spinner from 'components/Spinner'\nimport Tabs from 'components/Tabs'\nimport { links } from 'constants/Links'\nimport NarrowLayout from 'containers/NarrowLayout'\nimport useTabs from 'hooks/useTabs'\nimport { IGroup, IParent } from 'interfaces/UniversalInterface'\nimport CreateGroup from 'pages/groups/CreateGroup'\nimport GroupItem from 'pages/groups/GroupItem'\nimport { useEffect, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst NoGroups = () => (\n  <div className=\"m-4 text-center flex items-center justify-center flex-col\">\n    <img\n      src={IdleUser}\n      alt=\"\"\n      className=\"h-28 sm:h-32 lg:h-36 xl:h-40 w-full\"\n    />\n    <h3 className=\"mt-4 text-xl font-medium dark:text-gray-300 text-gray-900\">\n      Discover groups\n    </h3>\n    <p className=\"mt-1 text-base text-gray-500\">\n      Find other trusted communities that share and support your goals.\n    </p>\n    <div className=\"mt-6\">\n      <Button\n        size=\"sm\"\n        //   invert\n        rounded=\"rounded-full\"\n        label={'Discover'}\n        gradient\n        onClick={() => {}}\n      />\n    </div>\n  </div>\n)\n\nconst Groups = ({ groups, userId }: { groups: IGroup[]; userId: string }) => {\n  return (\n    <div className=\"bg-white dark:bg-gray-800\">\n      <ul className=\"\">\n        {groups.map((group) => (\n          <GroupItem group={group} userId={userId} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nconst tabs = [{ name: 'Your groups' }, { name: 'Requested' }]\n\nconst GroupsView = ({ userData }: { userData: IParent }) => {\n  const { data, isLoading, isFetched, refetch } = useQuery(\n    'group-list',\n    fetchGroups\n  )\n  const requestedGroups = useQuery('requested-group-list', fetchRequestedGroups)\n\n  const groups: IGroup[] = isFetched && !isLoading ? data?.data?.data : []\n  const requestedGroupsData: IGroup[] =\n    requestedGroups.isFetched && !requestedGroups.isLoading\n      ? requestedGroups.data?.data?.data\n      : []\n\n  const [localGroups, setLocalGroups] = useState([])\n\n  const { currentTab, setCurrentTab, helpers } = useTabs(tabs)\n  const [onYourGroups, onRequested] = helpers\n\n  useEffect(() => {\n    if (onYourGroups) {\n      if (groups && groups.length > 0) {\n        setLocalGroups([...groups])\n      } else {\n        setLocalGroups([])\n      }\n    }\n  }, [groups, onYourGroups])\n\n  useEffect(() => {\n    if (onRequested) {\n      if (requestedGroupsData && requestedGroupsData.length > 0) {\n        setLocalGroups([...requestedGroupsData])\n      } else {\n        setLocalGroups([])\n      }\n    }\n  }, [requestedGroupsData, onRequested])\n\n  const groupsLen = localGroups ? localGroups.length : 0\n\n  const [showCreateGroupModal, setShowCreateGroupModal] = useState(false)\n\n  return (\n    <NarrowLayout userData={userData} customMaxWidth=\"max-w-7xl\">\n      <Modal\n        setOpen={setShowCreateGroupModal}\n        header=\"Create group\"\n        open={showCreateGroupModal}\n      >\n        <div className=\" min-w-132 max-w-164 min-h-56 max-h-132 overflow-y-auto\">\n          <CreateGroup\n            userData={userData}\n            refetchGroup={refetch}\n            onSuccess={() => setShowCreateGroupModal(false)}\n          />\n        </div>\n      </Modal>\n      <Meta\n        pageTitle={`(${groupsLen}) Groups | 13RMS`}\n        title={`(${groupsLen}) Groups | 13RMS`}\n      />\n      <Card\n        content={\n          <div className=\"\">\n            <div className=\"border-b flex items-center justify-between border-gray-200 dark:border-gray-700\">\n              <Tabs\n                tabs={tabs}\n                currentTab={currentTab}\n                setCurrentTab={setCurrentTab}\n              />\n              <Button\n                size=\"md\"\n                rounded=\"rounded-full\"\n                label={'Create group'}\n                onClick={() => setShowCreateGroupModal(true)}\n                gradient\n                invert\n              />\n            </div>\n            {isLoading && !isFetched ? (\n              <Spinner />\n            ) : localGroups.length > 0 ? (\n              <div className=\"mt-4\">\n                <AnimatedContainer show={onYourGroups}>\n                  {onYourGroups && (\n                    <Groups userId={userData._id} groups={localGroups} />\n                  )}\n                </AnimatedContainer>\n                <AnimatedContainer show={onRequested}>\n                  {onRequested && (\n                    <Groups groups={localGroups} userId={userData._id} />\n                  )}\n                </AnimatedContainer>\n              </div>\n            ) : (\n              <NoGroups />\n            )}\n          </div>\n        }\n      />\n    </NarrowLayout>\n  )\n}\n\nexport default GroupsView\n"],"sourceRoot":""}