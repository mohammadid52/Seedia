{"version":3,"sources":["components/atoms/SectionTitle.tsx","pages/project/ProjectCard.tsx","pages/project/ListView/ProjectListView.tsx"],"names":["SectionTitle","title","gradient","className","ProjectCard","project","userId","userData","isLoading","iAmOwnerOfThisProject","postedBy","toString","company","location","salary","history","useHistory","onClick","push","links","viewProject","_id","content","src","profilePicture","avatarPlaceholder","alt","size","business","name","textColor","fontWeight","city","country","min","max","duration","getFromNowTime","postedOn","views","label","e","stopPropagation","disabled","link","website","ProjectsListView","skills","background","map","d","jobTitleTags","getTags","jobTitle","jobTypeTags","jobType","isBusiness","useAccountType","useQuery","fetchRelatedJobs","relatedJobsData","data","isFetched","relatedJobs","to","viewMyProjects","customMaxWidth","keywords","pageUrl","window","href","pageTitle"],"mappings":"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","file":"static/js/49.cfa41c8f.chunk.js","sourcesContent":["const SectionTitle = ({\n  title,\n  gradient = true,\n  className,\n}: {\n  title: string\n  gradient?: boolean\n  className?: string\n}) => {\n  return (\n    <h2\n      className={`${className} text-2xl mb-6 font-extrabold ${\n        gradient ? 'gradient-border' : ''\n      } border-b pb-2 tracking-tight\n         dark:text-white text-gray-900`}\n    >\n      {title}\n    </h2>\n  )\n}\n\nexport default SectionTitle\n","import Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport Title from 'components/atoms/Title'\nimport { links } from 'constants/Links'\nimport { IParent, IProject } from 'interfaces/UniversalInterface'\nimport { useHistory } from 'react-router'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport { getFromNowTime } from 'utils/functions'\n\nconst ProjectCard = ({\n  project,\n  userId,\n  userData,\n  isLoading = false,\n}: {\n  project?: IProject\n  userId?: string\n  userData?: IParent\n  isLoading?: boolean\n}) => {\n  const iAmOwnerOfThisProject = project.postedBy.toString() === userId\n  const company = userData\n  const { location } = project.company\n  const { salary } = project\n  const history = useHistory()\n  return (\n    <div onClick={() => history.push(links.viewProject(project._id))}>\n      <Card\n        isLoading={isLoading}\n        className=\"box   hover:shadow-xl transition-all  cursor-pointer\"\n        content={\n          <div className=\"relative max-h-64 h-64\">\n            {isLoading ? (\n              <div className=\"bg-gray-400 h-12 w-12 mb-4 cursor-pointer rounded-lg shadow-md\"></div>\n            ) : (\n              <img\n                className=\"h-12 w-12 border-gradient border-transparent border-2 mb-4 cursor-pointer rounded-lg shadow-md\"\n                src={\n                  company?.profilePicture\n                    ? company?.profilePicture\n                    : avatarPlaceholder\n                }\n                alt=\"\"\n              />\n            )}\n            <Title isLoading={isLoading} size=\"text-xl\">\n              {project.title}\n            </Title>\n            <Title\n              size=\"text-base\"\n              isLoading={isLoading}\n              className=\"tracking-wide mt-1 gradient-text\"\n            >\n              {company?.business?.name}\n            </Title>\n            <Title\n              size=\"text-base\"\n              textColor=\"dark:text-gray-500 text-gray-400\"\n              fontWeight=\"font-medium\"\n              isLoading={isLoading}\n              className=\"tracking-wide mt-1 \"\n            >\n              {`${location?.city || '--'}, ${location?.country || '--'}`}\n            </Title>\n            <Title\n              size=\"text-base\"\n              isLoading={isLoading}\n              textColor=\"dark:text-gray-300 text-gray-700\"\n              fontWeight=\"font-medium\"\n              className=\"tracking-wide mt-4 \"\n            >\n              {`Salary: ${salary.min} - ${salary.max} / ${salary.duration}`}\n            </Title>\n            {!isLoading && (\n              <div className=\"flex items-center justify-between inset-x-0 absolute bottom-0\">\n                <div className=\"text-sm text-gray-400  dark:text-gray-500\">\n                  {getFromNowTime(project.postedOn)}\n                  {'  '}\n                  {iAmOwnerOfThisProject && ` â€¢ ${project.views || 0} views`}\n                </div>\n\n                <div>\n                  {iAmOwnerOfThisProject ? (\n                    <Button\n                      label=\"View\"\n                      onClick={(e: any) => {\n                        e.stopPropagation()\n                        history.push(links.viewProject(project._id))\n                      }}\n                      disabled={isLoading}\n                      gradient\n                    />\n                  ) : (\n                    <Button\n                      disabled={isLoading}\n                      label=\"Apply\"\n                      link={project.website}\n                      gradient\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        }\n      />\n    </div>\n  )\n}\n\nexport default ProjectCard\n","import { fetchRelatedJobs } from 'apis/queries'\nimport Meta from 'components/atoms/Meta/Meta'\nimport SectionTitle from 'components/atoms/SectionTitle'\nimport Loading from 'components/Loading'\nimport { links } from 'constants/Links'\nimport NarrowLayout from 'containers/NarrowLayout'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent, IProject } from 'interfaces/UniversalInterface'\nimport map from 'lodash/map'\nimport ProjectCard from 'pages/project/ProjectCard'\nimport { useQuery } from 'react-query'\nimport { Redirect } from 'react-router'\nimport { getTags } from 'utils/functions'\n\nconst ProjectsListView = ({ userData }: { userData: IParent }) => {\n  const skills = userData?.background\n    ? map(userData?.background.skills, (d) => d.name)\n    : []\n  const company = userData?.company\n\n  const jobTitleTags = getTags(company?.jobTitle)\n  const jobTypeTags = getTags(company?.jobType)\n\n  const { isBusiness } = useAccountType(userData)\n  const {\n    isLoading,\n    data: relatedJobsData,\n    isFetched,\n  } = useQuery('related-jobs', () =>\n    fetchRelatedJobs([...skills, ...jobTitleTags, ...jobTypeTags])\n  )\n\n  const relatedJobs: IProject[] =\n    isFetched && !isLoading ? relatedJobsData.data.data : {}\n\n  if (isBusiness) {\n    return <Redirect to={links.viewMyProjects()} />\n  }\n\n  if (isLoading && !isFetched) {\n    return <Loading />\n  }\n\n  return (\n    <NarrowLayout userData={userData} customMaxWidth=\"max-w-7xl\">\n      <Meta\n        keywords=\"jobs, jobs at 13RMS, 13rms\"\n        pageUrl={window.location.href}\n        pageTitle={`Jobs | 13RMS `}\n      />\n      <SectionTitle title={`Jobs Related To Your Preference`} />\n\n      <div className=\"grid gap-4 grid-cols-4\">\n        {map(relatedJobs, (project) => (\n          <ProjectCard userId={userData._id.toString()} project={project} />\n        ))}\n      </div>\n    </NarrowLayout>\n  )\n}\n\nexport default ProjectsListView\n"],"sourceRoot":""}