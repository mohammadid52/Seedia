{"version":3,"sources":["assets/svg/placeholder.png","components/VerticalProfileCard.tsx","components/DiscoverButton.tsx","pages/dashboard/PostPhotoModal.tsx","components/event/CreateEvent.tsx","pages/dashboard/PostInput.tsx","assets/svg/no-posts.svg","components/UserListModal.tsx","pages/groups/InviteUserModal.tsx","pages/groups/SingleGroupView.tsx"],"names":["VerticalProfileCard","user","content","isBusiness","useAccountType","defaultContent","className","business","name","company","jobTitle","href","links","getProfile","alt","src","coverPicture","profilePicture","avatarPlaceholder","fullName","DiscoverCard","extraItems","useQuery","fetchEvents","isFetched","isLoading","data","shortEventsData","groups","length","map","ev","viewEvent","_id","eventName","item","link","PostPhotoModal","open","setOpen","isPhoto","postingIn","customInId","setNotification","useNotifications","usePostContext","setPosts","posts","useMutation","addPost","onSuccess","post","unshift","show","title","buttonText","buttonUrl","postById","postUrl","mutate","isError","error","useState","media","setMedia","upload","uploadMediaToServer","a","modifiedData","postData","postType","text","altText","postedIn","id","nanoid","url","location","type","postImageRef","useRef","onAltText","setOnAltText","setAltText","disablePadding","header","value","onChange","e","target","textarea","rows","gradient","rounded","onClick","invert","label","size","URL","createObjectURL","controls","controlsList","current","click","ref","img","files","accept","loading","preventDefault","fd","FormData","append","CreateEvent","eventData","validationSchema","Yup","required","min","max","eventDescription","initialValues","startDate","Date","endDate","startTime","endTime","timezone","formRef","postMutation","createEvent","message","eventId","values","setValues","uploadMultipleImages","b","finalImageList","coverPhoto","find","originalname","profilePhoto","setCoverPhoto","setProfilePhoto","uploadFunction","setTimeout","onSubmit","editMode","isEmpty","useEffect","setSelectedTimeZone","profileImageSelectorRef","coverImageSelectorRef","selectedTimeZone","enableReinitialize","innerRef","showFileExplorerForCover","placeholder","showFileExplorerForProfile","selectedItem","list","t","cols","errors","toString","disabled","PostInput","customButtons","showPostModal","setShowPostModal","showOtherModals","setShowOtherModals","showEventModal","setShowEventModal","defaultButtons","Icon","HiOutlinePhotograph","BsCameraVideo","bgColor","BiCalendarEvent","RiArticleLine","UsersListModal","userList","getType","isPersonal","window","onUserClick","companyName","background","education","InviteUserModal","followingList","group","refetchGroup","selectedUsers","setSelectedUsers","config","users","fetchUsers","isSuccess","sendInvite","unselectAll","sendingInvites","errorSendingInvites","localUsers","setLocalUsers","members","Modal","fixedBottom","Button","loadingText","targetIdArray","groupId","onSendInvite","toLowerCase","searchedList","filter","firstName","includes","lastName","alreadyMember","g","requestSent","requests","findIndex","remove","checked","Boolean","d","userId","Spinner","Error","ExitGroup","showModal","setShowModal","history","useHistory","exitGroup","push","targetId","SingleGroupView","userData","useParams","isMember","undefined","verifyMember","FEED","fetchGroupById","refetch","groupData","fetchPost","fetchMultiplePostsById","enabled","showGroupMembersModal","setShowGroupMembersModal","Loading","isOwner","createdBy","isAdmin","admin","authorized","postCount","count","DashboardHeader","Meta","pageTitle","following","DashboardLayout","firstColClass","firstCol","moment","createdOn","format","followers","profileUrl","secondCol","groupName","CgPoll","endMessage","dataLength","scrollableTarget","next","hasMore","loader","Post","Card","NoPosts","thirdColClass","thirdCol","cardTitle","slice","member","groupDescription","groupRules","_admin"],"mappings":"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","file":"static/js/21.025dd5f9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/placeholder.c69d1bed.png\";","import { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent } from 'interfaces/UniversalInterface'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst VerticalProfileCard = ({\n  user,\n  content = null,\n}: {\n  user: IParent\n  content?: React.ReactNode\n}) => {\n  const { isBusiness } = useAccountType(user)\n\n  const defaultContent = (\n    <>\n      <p className=\"text-sm font-medium dark:text-white text-gray-500 \">\n        {isBusiness ? user?.business?.name : user?.company?.jobTitle}\n      </p>\n      <a\n        className=\"dark:text-white text-gray-900 text-lg font-medium\"\n        href={links.getProfile(user)}\n      >\n        <div className=\"mt-2\">View full profile</div>\n      </a>\n    </>\n  )\n\n  return (\n    <div className=\"plain-card\">\n      <img\n        alt=\"\"\n        src={\n          user?.coverPicture\n            ? user?.coverPicture\n            : 'https://source.unsplash.com/1600x900/?nature,water'\n        }\n        className=\"w-full lg:h-28 sm:h-24 object-cover h-20\"\n      />\n      <div className=\"flex justify-center -mt-8\">\n        <img\n          alt=\"\"\n          src={user.profilePicture ? user.profilePicture : avatarPlaceholder}\n          className=\"rounded-full  border-gradient border-transparent  lg:h-16 lg:w-16 h-12 w-12 dark:border-gray-800 border-white  border-2 -mt-3\"\n        />\n      </div>\n      <div className={`text-center ${content ? '' : 'px-3 pb-6 pt-2'}`}>\n        <a\n          href={links.getProfile(user, true)}\n          className=\"dark:text-white cursor-pointer text-gray-900 text-base font-bold \"\n        >\n          {user.fullName}\n        </a>\n        {content || defaultContent}\n      </div>\n    </div>\n  )\n}\n\nexport default VerticalProfileCard\n","import { links } from 'constants/Links'\nimport { useQuery } from 'react-query'\nimport { fetchEvents } from 'apis/queries'\n\nconst DiscoverCard = ({\n  extraItems,\n}: {\n  extraItems?: { name: string; link: string }[]\n}) => {\n  const { isFetched, isLoading, data } = useQuery('short-event-names', () =>\n    fetchEvents(true)\n  )\n\n  const shortEventsData: { _id: string; eventName: string }[] =\n    isFetched && !isLoading ? data?.data?.data : []\n  return (\n    <div className=\"rounded-lg  border dark:border-gray-700  border-gray-200  overflow-hidden lg:max-w-xs bg-white dark:bg-gray-800 \">\n      <div className=\"\">\n        <div className=\"p-4 flex flex-col gap-y-3 text-xs font-medium text-link\">\n          <a href={links.groups()} className=\"hover:underline cursor-pointer\">\n            Groups\n          </a>\n          <div className=\"flex flex-col\">\n            <div className=\" cursor-pointer flex  items-center justify-between\">\n              <div className=\"hover:underline \">Events</div>\n              <div className=\"text-gray-900 dark:text-gray-500 text-base hover:bg-gray-700 rounded-full h-6 transition-all w-6 flex items-center justify-center\">\n                +\n              </div>\n            </div>\n            {shortEventsData &&\n              shortEventsData.length > 0 &&\n              shortEventsData.map((ev) => (\n                <a\n                  href={links.viewEvent(ev._id)}\n                  className=\"py-2 text-xs font-medium text-gray-500 dark:text-gray-500 hover:underline cursor-pointer\"\n                >\n                  {ev.eventName}\n                </a>\n              ))}\n          </div>\n          <div className=\"hover:underline cursor-pointer\">Followed Hastags</div>\n          {extraItems &&\n            extraItems.length > 0 &&\n            extraItems.map((item) => (\n              <a\n                href={item.link}\n                key={item.name}\n                className=\"hover:underline cursor-pointer\"\n              >\n                {item.name}\n              </a>\n            ))}\n        </div>\n        <div className=\"flex items-center cursor-pointer hover:bg-gray-200 transition-all dark:hover:bg-gray-700 gap-y-2  justify-center px-4 border-t py-4  text-sm font-medium text-gray-500 dark:text-gray-500 border-gray-200 dark:border-gray-700\">\n          <p>Discover more</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DiscoverCard\n","import { addPost, uploadMediaToServer } from 'apis/mutations'\nimport Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport NormalFormInput from 'components/atoms/NormalFormInput'\nimport { links } from 'constants/Links'\nimport { useNotifications } from 'context/NotificationContext'\nimport { usePostContext } from 'context/PostContext'\nimport { IPost } from 'interfaces/UniversalInterface'\nimport { nanoid } from 'nanoid'\nimport React, { useRef, useState } from 'react'\nimport { useMutation } from 'react-query'\n\nconst PostPhotoModal = ({\n  open,\n  setOpen,\n  isPhoto = true,\n  postingIn = 'general',\n  customInId,\n}: {\n  open: boolean\n  postingIn?: IPost['postedIn']\n  customInId?: string\n  isPhoto: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n}) => {\n  const { setNotification } = useNotifications()\n\n  const { setPosts, posts } = usePostContext()\n\n  const { mutate, isLoading, isError, error } = useMutation(addPost, {\n    onSuccess: (data) => {\n      const post = data.data.data\n      posts.unshift(post)\n      setPosts([...posts])\n\n      setOpen(false)\n      setNotification({\n        show: true,\n        title: 'New post added.',\n        buttonText: 'View',\n        buttonUrl: links.postById(post.postUrl),\n      })\n    },\n  })\n\n  const [media, setMedia] = useState(null)\n\n  const upload = useMutation(uploadMediaToServer, {\n    onSuccess: (a) => {\n      const modifiedData = {\n        postData: {\n          postType: isPhoto ? 'withPhoto' : 'withVideo',\n          text: altText || '',\n          postedIn: postingIn,\n          customInId: customInId,\n          links: [\n            {\n              id: nanoid(12),\n              url: a?.data?.data?.location,\n              type: isPhoto ? 'image' : 'video',\n            },\n          ],\n        },\n      }\n      mutate(modifiedData)\n    },\n  })\n\n  const postImageRef: any = useRef()\n\n  const onImageSelect = (e: any) => {\n    const img = e.target.files[0]\n    setMedia(img)\n  }\n\n  const showFileExplorer = () => postImageRef?.current?.click()\n\n  const onCancel = () => {\n    setMedia(null)\n    setOpen(false)\n  }\n\n  const onSubmit = (e: any) => {\n    e.preventDefault()\n    const fd = new FormData()\n    fd.append('image', media)\n\n    upload.mutate(fd)\n  }\n\n  const [onAltText, setOnAltText] = useState(false)\n  const [altText, setAltText] = useState('')\n\n  const onAltTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target\n    setAltText(value)\n  }\n\n  return (\n    <Modal\n      disablePadding\n      setOpen={setOpen}\n      header={`Edit your ${isPhoto ? 'photo' : 'video'}`}\n      open={open}\n    >\n      <div className=\" min-w-132 max-w-132 min-h-56 max-h-132 flex items-center justify-center overflow-y-auto\">\n        {media ? (\n          <div className=\"\">\n            {onAltText ? (\n              <div className=\"px-12\">\n                <h4 className=\"mb-1 text-gray-600 dark:text-gray-500\">\n                  Alt text\n                </h4>\n                <p className=\"dark:text-gray-700 text-gray-400 mb-2\">\n                  Alt text describes images for people who have trouble seeing\n                  them. If you don’t add alt text, it may be automatically\n                  generated after you post. You can edit it anytime.\n                </p>\n                <NormalFormInput\n                  value={altText}\n                  onChange={onAltTextChange}\n                  textarea\n                  rows={6}\n                />\n                <div className=\"mt-5 gap-x-4 px-4 m-1 sm:mt-4 flex justify-end  items-center\">\n                  <Button\n                    gradient\n                    rounded=\"rounded-full\"\n                    onClick={() => {\n                      setAltText('')\n                      setOnAltText(false)\n                    }}\n                    invert\n                    label=\"Cancel\"\n                    size=\"sm\"\n                  />\n                  <Button\n                    gradient\n                    rounded=\"rounded-full\"\n                    label=\"Save\"\n                    onClick={() => {\n                      setOnAltText(false)\n                    }}\n                    size=\"sm\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div>\n                {isPhoto ? (\n                  <img\n                    className=\"w-full\"\n                    src={URL.createObjectURL(media)}\n                    alt=\"\"\n                  />\n                ) : (\n                  <video\n                    controls\n                    className=\"w-full\"\n                    controlsList=\"nodownload\"\n                    src={URL.createObjectURL(media)}\n                  />\n                )}\n              </div>\n            )}\n            <div className=\"absolute bottom-5 left-5 pt-4 mb-2 pl-4\">\n              <Button\n                onClick={() => setOnAltText(!onAltText)}\n                invert={!onAltText}\n                label=\"Alt text\"\n              />\n            </div>\n          </div>\n        ) : (\n          <Button\n            onClick={showFileExplorer}\n            label={`Select ${isPhoto ? 'image' : 'video'} to share`}\n            gradient\n            invert\n            size=\"lg\"\n          />\n        )}\n\n        {/* HIDDEN IMAGE INPUT */}\n        <input\n          // @ts-ignore\n          ref={postImageRef}\n          className=\"hidden\"\n          type=\"file\"\n          onChange={onImageSelect}\n          accept={isPhoto ? 'image/*' : 'video/*'}\n        />\n      </div>\n      <div className=\"mt-5 border-t border-gray-200 dark:border-gray-700 pt-4 gap-x-4 px-4 m-1 sm:mt-4 flex justify-end  items-center\">\n        <Button\n          gradient\n          rounded=\"rounded-full\"\n          onClick={onCancel}\n          invert\n          label=\"Cancel\"\n          size=\"lg\"\n        />\n        <Button\n          gradient\n          rounded=\"rounded-full\"\n          loading={isLoading || upload.isLoading}\n          label=\"Done\"\n          onClick={onSubmit}\n          size=\"lg\"\n        />\n      </div>\n      {isError && <p className=\"text-red-500 text-sm\">{error}</p>}\n    </Modal>\n  )\n}\n\nexport default PostPhotoModal\n","import { addPost, createEvent, uploadMultipleImages } from 'apis/mutations'\nimport placeholder from 'assets/svg/placeholder.png'\nimport Error from 'components/alerts/Error'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport FormSelector from 'components/atoms/FormSelector'\nimport Modal from 'components/atoms/Modal'\nimport { links } from 'constants/Links'\nimport { useNotifications } from 'context/NotificationContext'\nimport { Form, Formik } from 'formik'\nimport { IEvent } from 'interfaces/UniversalInterface'\nimport { isEmpty, map } from 'lodash'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { AiOutlineEdit } from 'react-icons/ai'\nimport { useMutation } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport { timezone } from 'values/values'\nimport * as Yup from 'yup'\n\nconst CreateEvent = ({\n  open,\n  setOpen,\n  eventData,\n  fullName = '',\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  eventData?: IEvent\n  fullName: string\n}) => {\n  const validationSchema = Yup.object({\n    eventName: Yup.string().required('Event Name is required').min(10).max(150),\n    eventDescription: Yup.string()\n      .required('Event Description is required')\n      .min(10)\n      .max(600),\n\n    // startTime\n  })\n\n  // @ts-ignore\n  const initialValues: IEvent = {\n    eventName: eventData?.eventName || '',\n    eventDescription: eventData?.eventDescription || '',\n    startDate: eventData?.startDate || new Date(),\n    endDate: eventData?.endDate || new Date(),\n    startTime: eventData?.startTime || '',\n    endTime: eventData?.endTime || '',\n    timezone: eventData?.timezone || '',\n  }\n\n  const formRef = useRef()\n  const { setNotification } = useNotifications()\n\n  const postMutation = useMutation(addPost)\n\n  const { mutate, isLoading, isError, error } = useMutation(createEvent, {\n    onSuccess: (data) => {\n      // console.log(data)\n      const message = data.data.message\n      const eventId = data.data.data\n      setNotification({\n        show: true,\n        title: message,\n        buttonText: 'View',\n        buttonUrl: links.viewEvent(eventId),\n      })\n\n      postMutation.mutate({\n        postData: {\n          text: `${fullName} has organized an event.`,\n          postType: 'event',\n          customInId: eventId,\n        },\n      })\n    },\n  })\n\n  const [values, setValues] = useState(null)\n\n  const upload = useMutation(uploadMultipleImages, {\n    onSuccess: (a, b) => {\n      if (values) {\n        if (a.data.data && a.data.data.length) {\n          const finalImageList: any[] = map(a.data.data, (img) => img)\n\n          mutate({\n            ...values,\n            coverPhoto: finalImageList.find(\n              (img) => img.originalname === coverPhoto.name\n            )?.location,\n\n            profilePhoto: finalImageList.find(\n              (img) => img.originalname === profilePhoto.name\n            )?.location,\n          })\n        } else {\n          mutate({\n            ...values,\n          })\n        }\n        setOpen(false)\n        setCoverPhoto(null)\n        setProfilePhoto(null)\n      }\n    },\n  })\n\n  const uploadFunction = () => {\n    const fd = new FormData()\n\n    fd.append('images', profilePhoto)\n    fd.append('images', coverPhoto)\n\n    setTimeout(() => {\n      upload.mutate(fd)\n    }, 500)\n  }\n\n  const onSubmit = async (values: any) => {\n    setValues({ ...values })\n    uploadFunction()\n  }\n\n  const editMode = !isEmpty(eventData)\n\n  useEffect(() => {\n    if (editMode) {\n      setCoverPhoto(eventData.coverPicture)\n      setProfilePhoto(eventData.profilePicture)\n      setSelectedTimeZone(eventData?.timezone || timezone[0].text)\n    }\n  }, [editMode])\n\n  const profileImageSelectorRef = useRef()\n\n  const showFileExplorerForProfile = () =>\n    //@ts-ignore\n    profileImageSelectorRef?.current?.click()\n\n  const coverImageSelectorRef = useRef()\n\n  const showFileExplorerForCover = () =>\n    //@ts-ignore\n    coverImageSelectorRef?.current?.click()\n\n  const [profilePhoto, setProfilePhoto] = useState<any>()\n\n  const [coverPhoto, setCoverPhoto] = useState<any>()\n\n  const [selectedTimeZone, setSelectedTimeZone] = useState(timezone[0].text)\n\n  return (\n    <Modal\n      disablePadding\n      setOpen={setOpen}\n      header={`${editMode ? 'Edit' : 'Create'} event`}\n      open={open}\n    >\n      <div className=\" min-w-200 pb-4  max-w-200 min-h-164 max-h-164 overflow-y-auto\">\n        <div className=\"px-1\">\n          {/* HIDDEN IMAGE INPUT */}\n          <input\n            // @ts-ignore\n            ref={coverImageSelectorRef}\n            className=\"hidden\"\n            type=\"file\"\n            onChange={(e) => setCoverPhoto(e.target.files[0])}\n            accept=\"image/x-png,image/jpeg\"\n          />\n          {/* HIDDEN IMAGE INPUT */}\n          <input\n            // @ts-ignore\n            ref={profileImageSelectorRef}\n            className=\"hidden\"\n            type=\"file\"\n            onChange={(e) => setProfilePhoto(e.target.files[0])}\n            accept=\"image/x-png,image/jpeg\"\n          />\n\n          <Formik\n            initialValues={initialValues}\n            enableReinitialize={editMode}\n            innerRef={formRef}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            <Form className=\"space-y-6 \">\n              <div className=\" overflow-hidden  bg-white dark:bg-gray-900\">\n                <div className=\"relative  group\">\n                  <div className=\"absolute top-0 right-0 p-4\">\n                    <AiOutlineEdit className=\"bg-gray-100   transition-all hover:bg-gray-300 duration-300 rounded-full p-2 text-gray-700 h-8 w-8\" />\n                  </div>\n                  <img\n                    alt=\"\"\n                    onClick={() => showFileExplorerForCover()}\n                    src={\n                      coverPhoto\n                        ? typeof coverPhoto === 'string'\n                          ? coverPhoto\n                          : URL.createObjectURL(coverPhoto)\n                        : placeholder\n                    }\n                    className=\"w-full lg:h-36 sm:h-24 object-cover h-20\"\n                  />\n                </div>\n                <div className=\"flex  relative justify-start mr-8 ml-8 -mt-12\">\n                  <img\n                    onClick={() => showFileExplorerForProfile()}\n                    alt=\"\"\n                    src={\n                      profilePhoto\n                        ? typeof profilePhoto === 'string'\n                          ? profilePhoto\n                          : URL.createObjectURL(profilePhoto)\n                        : avatarPlaceholder\n                    }\n                    className=\" border-solid  lg:h-24 lg:w-24 h-16 w-16  border-white border-2 -mt-3\"\n                  />\n                </div>\n              </div>\n              <div className=\"px-8 space-y-4\">\n                <h3 className=\"dark:text-white text-gray-900 font-semibold \">\n                  Details\n                </h3>\n                <FormInput\n                  label=\"Event Name\"\n                  id=\"eventName\"\n                  name=\"eventName\"\n                  required\n                />\n\n                <FormSelector\n                  label=\"Timezone\"\n                  required\n                  name=\"timezone\"\n                  selectedItem={selectedTimeZone}\n                  list={timezone.map((t) => ({ name: t.text, id: t.value }))}\n                  placeholder=\"What is the purpose of this group?\"\n                />\n\n                <div className=\"flex items-center justify-between w-full gap-x-2\">\n                  <div className=\"grid grid-cols-2 \">\n                    <div className=\"mx-2\">\n                      <FormInput\n                        name=\"startDate\"\n                        label=\"Start date\"\n                        type=\"date\"\n                      />\n                    </div>\n                    <div className=\"mx-2\">\n                      <FormInput\n                        name=\"startTime\"\n                        label=\"Start time\"\n                        required\n                        type=\"time\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 \">\n                    <div className=\"mx-2\">\n                      <FormInput name=\"endDate\" label=\"End date\" type=\"date\" />\n                    </div>\n                    <div className=\"mx-2\">\n                      <FormInput\n                        name=\"endTime\"\n                        required\n                        label=\"End time\"\n                        type=\"time\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <FormInput\n                  label=\"Description\"\n                  required\n                  id=\"eventDescription\"\n                  name=\"eventDescription\"\n                  placeholder=\"Ex. Topics, schedule, etc.\"\n                  textarea\n                  rows={2}\n                  cols={255}\n                />\n              </div>\n\n              {isError && (\n                <div className=\"px-8\">\n                  <Error errors={[error.toString()]} />\n                </div>\n              )}\n              <div className=\"flex p-4 items-center justify-end\">\n                <Button\n                  rounded=\"rounded-full\"\n                  loading={upload.isLoading || isLoading}\n                  disabled={upload.isLoading || isLoading}\n                  gradient\n                  size=\"lg\"\n                  type=\"submit\"\n                  label=\"Submit\"\n                />\n              </div>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\nexport default CreateEvent\n","import Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport CreateEvent from 'components/event/CreateEvent'\nimport { IPost } from 'interfaces/UniversalInterface'\nimport PostModal from 'pages/dashboard/PostModal'\nimport PostPhotoModal from 'pages/dashboard/PostPhotoModal'\nimport React, { useState } from 'react'\nimport { BiCalendarEvent } from 'react-icons/bi'\nimport { BsCameraVideo } from 'react-icons/bs'\nimport { HiOutlinePhotograph } from 'react-icons/hi'\nimport { RiArticleLine } from 'react-icons/ri'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst PostInput = ({\n  profilePicture,\n  customButtons = null,\n  placeholder = 'Start a post',\n  disabled,\n  postingIn = 'general',\n  customInId,\n  fullName = '',\n}: {\n  profilePicture?: string\n  customButtons?: React.ReactNode\n  placeholder?: string\n  disabled?: boolean\n  postingIn?: IPost['postedIn']\n  fullName: string\n  customInId?: string\n}) => {\n  const [showPostModal, setShowPostModal] = useState(false)\n  const [showOtherModals, setShowOtherModals] = useState('init')\n  const [showEventModal, setShowEventModal] = useState(false)\n\n  const defaultButtons = (\n    <>\n      <Button\n        gradient\n        invert\n        // className=\"dark:border-gray-600\"\n        Icon={HiOutlinePhotograph}\n        label=\"Photo\"\n        onClick={() => setShowOtherModals('photo')}\n      />\n      <Button\n        gradient\n        Icon={BsCameraVideo}\n        // className=\"dark:border-gray-600\"\n        bgColor=\"blue\"\n        invert\n        onClick={() => setShowOtherModals('video')}\n        label=\"Video\"\n      />\n      <Button\n        gradient\n        Icon={BiCalendarEvent}\n        // className=\"dark:border-gray-600\"\n        invert\n        bgColor=\"blue\"\n        onClick={() => setShowEventModal(true)}\n        label=\"Event\"\n      />\n      <Button\n        gradient\n        Icon={RiArticleLine}\n        invert\n        // className=\"dark:border-gray-600\"\n        bgColor=\"blue\"\n        label=\"Write articles\"\n      />\n    </>\n  )\n\n  return (\n    <>\n      {!disabled && (\n        <PostModal\n          customInId={customInId}\n          postingIn={postingIn}\n          setShowOtherModals={setShowOtherModals}\n          open={showPostModal}\n          setOpen={setShowPostModal}\n        />\n      )}\n      {(showOtherModals === 'photo' || showOtherModals === 'video') && (\n        <PostPhotoModal\n          isPhoto={showOtherModals === 'photo'}\n          open\n          setOpen={() => setShowOtherModals('init')}\n        />\n      )}\n      <CreateEvent\n        fullName={fullName}\n        open={showEventModal}\n        setOpen={setShowEventModal}\n      />\n      <Card\n        content={\n          <div className=\"flex flex-col space-y-8\">\n            <div className=\"flex w-full\">\n              <img\n                src={profilePicture ? profilePicture : avatarPlaceholder}\n                alt=\"13RMS\"\n                className=\"sm:h-14 h-12 w-12 sm:w-14  border-gradient border-transparent border-2 rounded-full\"\n              />\n              <div\n                onClick={() => setShowPostModal(true)}\n                className=\"cursor-pointer sm:h-14 h-12  transition-all duration-300 hover:bg-gray-200 dark:hover:bg-gray-700 ml-4 w-full rounded-full bg-white flex items-center text-gray-500 dark:text-gray-400 justify-start px-4 text-left dark:bg-gray-800 border border-gray-400 dark:border-gray-700\"\n              >\n                {placeholder}\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              {customButtons || defaultButtons}\n            </div>\n          </div>\n        }\n      />\n    </>\n  )\n}\n\nexport default PostInput\n","export default __webpack_public_path__ + \"static/media/no-posts.25d46d19.svg\";","import Modal from 'components/atoms/Modal'\nimport { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport { IParent, IShortProfile } from 'interfaces/UniversalInterface'\nimport React from 'react'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst UsersListModal = ({\n  open,\n  setOpen,\n  title,\n  userList,\n}: {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  title: string\n  userList: IShortProfile[]\n}) => {\n  const { getType } = useAccountType()\n\n  const onUserClick = (user: IShortProfile) => {\n    window.open(links.getProfile(user), '_blank')\n  }\n  return (\n    <Modal header={title} open={open} setOpen={setOpen}>\n      {userList.map((user: IParent) => {\n        const { isBusiness, isPersonal } = getType(user)\n\n        return (\n          <div\n            key={user._id}\n            className={`p-2 py-4 relative cursor-pointer border-b border-gray-200 dark:border-gray-700 dark:hover:bg-gray-800 hover:bg-gray-100 transition-all`}\n            onClick={() => onUserClick(user)}\n          >\n            <div className=\"flex  cursor-pointer items-center \">\n              <img\n                src={user.profilePicture || avatarPlaceholder}\n                alt=\"\"\n                className=\"rounded-full  border-gradient border-transparent mr-2 h-12 w-12\"\n              />\n              <div>\n                <h4 className=\"dark:text-white text-gray-900\">\n                  {user.fullName}\n                </h4>\n                <p className=\"dark:text-gray-500 text-gray-600 text-sm\">\n                  {isBusiness\n                    ? user?.business?.name\n                    : isPersonal\n                    ? user?.company?.companyName\n                    : user?.background?.education &&\n                      user?.background?.education[0].name}\n                </p>\n              </div>\n            </div>\n          </div>\n        )\n      })}\n    </Modal>\n  )\n}\n\nexport default UsersListModal\n","import { XIcon } from '@heroicons/react/solid'\nimport { sendInvite } from 'apis/mutations'\nimport { fetchUsers } from 'apis/queries'\nimport Error from 'components/alerts/Error'\nimport Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport Spinner from 'components/Spinner'\nimport useAccountType from 'hooks/useAccountType'\nimport { IGroup, IGroupMember, IParent } from 'interfaces/UniversalInterface'\nimport { findIndex, remove } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useMutation, useQuery } from 'react-query'\nimport { avatarPlaceholder } from 'state/Redux/constants'\n\nconst InviteUserModal = ({\n  open,\n  setOpen,\n  followingList,\n  group,\n  refetchGroup,\n}: {\n  open: boolean\n  group: IGroup\n  followingList: string[]\n  refetchGroup: any\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState<IParent[]>([])\n\n  const config = {\n    users: followingList,\n  }\n  const { data, isFetched, isLoading, isSuccess } = useQuery(`user-list`, () =>\n    fetchUsers(config)\n  )\n\n  const {\n    mutate,\n    isLoading: sendingInvites,\n    error: errorSendingInvites,\n  } = useMutation(sendInvite, {\n    onSuccess: () => {\n      setOpen(false)\n      unselectAll()\n      refetchGroup()\n    },\n  })\n\n  const onUserClick = (user: IParent) => {\n    const selectedIdx = findIndex(selectedUsers, ['_id', user._id])\n    if (selectedIdx !== -1) {\n      // selected\n      remove(selectedUsers, ['_id', user._id])\n    } else {\n      selectedUsers.unshift(user)\n\n      // not selected\n    }\n    setSelectedUsers([...selectedUsers])\n  }\n\n  const unselectAll = () => {\n    setSelectedUsers([])\n  }\n\n  const unselect = (userId: string) => {\n    remove(selectedUsers, ['_id', userId])\n    setSelectedUsers([...selectedUsers])\n  }\n\n  const users: IParent[] =\n    !isLoading && isFetched && isSuccess ? data.data.data.users : []\n\n  const [localUsers, setLocalUsers] = useState<IParent[]>([])\n  useEffect(() => {\n    if (users && users.length > 0) {\n      setLocalUsers([...users])\n    }\n  }, [users])\n\n  const { getType } = useAccountType()\n\n  const onSendInvite = () => {\n    const targetIdArray = selectedUsers.map((user) => user._id)\n    mutate({ targetIdArray, groupId: group._id })\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toLowerCase()\n    let searchedList = users.filter((user) => {\n      return (\n        user.firstName.toLowerCase().includes(value) ||\n        user.lastName.toLowerCase().includes(value) ||\n        user.fullName.toLowerCase().includes(value)\n      )\n    })\n    setLocalUsers([...searchedList])\n  }\n\n  const members = group.members as IGroupMember[]\n\n  return (\n    <Modal\n      fixedBottom={\n        <div>\n          {!isLoading && isFetched && (\n            <div className=\"flex items-center justify-end  p-4\">\n              <Button\n                label={`Invite ${\n                  selectedUsers.length > 0 ? selectedUsers.length : ''\n                }`}\n                size=\"lg\"\n                loading={sendingInvites}\n                loadingText=\"Sending invites\"\n                onClick={() => onSendInvite()}\n                disabled={selectedUsers.length <= 0}\n                gradient\n                rounded=\"rounded-full\"\n              />\n            </div>\n          )}\n        </div>\n      }\n      header=\"Invite connections\"\n      open={open}\n      setOpen={setOpen}\n    >\n      <div className=\"lg:min-w-160 min-w-132 max-w-256\">\n        {!isLoading && isFetched ? (\n          <div>\n            <div className=\"w-full\">\n              <input\n                type=\"search\"\n                placeholder=\"Search by name\"\n                className=\"w-full py-2 px-4 outline-none border-none focus:ring-1 text-gray-600 dark:text-gray-400 text-sm focus:ring-yellow-500 bg-transparent h-full\"\n                onChange={onChange}\n              />\n            </div>\n            <div className=\"grid grid-cols-5 p-2 border-t border-gray-200 dark:border-gray-800\">\n              <div className=\"col-span-3 min-h-136 pb-12  max-h-136 flex flex-col  overflow-y-scroll overflow-x-hidden \">\n                {localUsers.map((user: IParent) => {\n                  const { isBusiness, isPersonal } = getType(user)\n                  const alreadyMember = !!members?.find(\n                    (g) => g._id === user._id\n                  )\n\n                  const requestSent = !!group?.requests?.find(\n                    (g) => g === user._id\n                  )\n                  return (\n                    <div\n                      key={user._id}\n                      className={`p-2 py-4 relative cursor-pointer border-b border-gray-200 dark:border-gray-700 ${\n                        alreadyMember || requestSent\n                          ? 'dark:bg-gray-800 opacity-75 bg-gray-100 pointer-events-none'\n                          : 'dark:hover:bg-gray-800 hover:bg-gray-100'\n                      }  transition-all`}\n                      onClick={() => onUserClick(user)}\n                    >\n                      <div className=\"flex  cursor-pointer items-center \">\n                        <input\n                          id=\"users\"\n                          // onChange={(e) => onUserClick(user)}\n                          name=\"candidates\"\n                          checked={Boolean(\n                            selectedUsers?.find((d) => d._id === user._id)\n                          )}\n                          type=\"checkbox\"\n                          className=\"focus:ring-yellow-500 mr-4 h-5 w-5 text-yellow-600 border-gray-300 rounded\"\n                        />\n                        <img\n                          src={user?.profilePicture || avatarPlaceholder}\n                          alt=\"\"\n                          className=\"border-gradient border-transparent border-2 rounded-full mr-2 h-12 w-12\"\n                        />\n                        <div>\n                          <h4 className=\"dark:text-white text-gray-900\">\n                            {user?.fullName}\n                          </h4>\n                          <p className=\"dark:text-gray-500 text-gray-600 text-sm\">\n                            {isBusiness\n                              ? user?.business?.name\n                              : isPersonal\n                              ? user?.company?.companyName\n                              : user?.background?.education &&\n                                user?.background?.education[0].name}\n                          </p>\n                        </div>\n                      </div>\n                      {(alreadyMember || requestSent) && (\n                        <p className=\"absolute text-xs italic dark:text-gray-500 text-gray-400 bottom-1 right-2 \">\n                          {alreadyMember ? 'Already member' : 'Request sent'}\n                        </p>\n                      )}\n                    </div>\n                  )\n                })}\n              </div>\n              <div className=\"col-span-2 ml-2\">\n                <div className=\"border-b text-sm border-gray-200 dark:border-gray-800  text-gray-500 dark:text-gray-400 p-4 flex items-center justify-between\">\n                  <p>{selectedUsers?.length} selected</p>\n                  <button\n                    onClick={unselectAll}\n                    className=\"font-medium dark:text-gray-300\"\n                  >\n                    Unselect all\n                  </button>\n                </div>\n                <div className=\"p-4 pr-0 flex flex-col gap-y-4 max-w-56 min-w-56  max-h-136 pb-20 overflow-y-scroll mx-2\">\n                  {selectedUsers?.length > 0 &&\n                    selectedUsers.map((user: IParent) => (\n                      <div className=\"flex  items-center  justify-between\">\n                        <div className=\"flex items-center\">\n                          <img\n                            src={user.profilePicture || avatarPlaceholder}\n                            alt=\"\"\n                            className=\"border-gradient border-transparent border-2 rounded-full mr-2 h-8 w-8\"\n                          />\n                          <h4 className=\"dark:text-white\">{user.fullName}</h4>\n                        </div>\n                        <div\n                          onClick={() => unselect(user._id)}\n                          className=\"dark:hover:bg-gray-700 transition-all rounded-full p-0.5\"\n                        >\n                          <XIcon\n                            className=\"cursor-pointer h-5 w-5   dark:text-gray-400\"\n                            aria-hidden=\"true\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-center\">\n            <Spinner />\n          </div>\n        )}\n        <div>\n          {errorSendingInvites && (\n            <Error errors={[errorSendingInvites.toString()]} />\n          )}\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\nexport default InviteUserModal\n","import { fetchGroupById, fetchMultiplePostsById } from 'apis/queries'\nimport { exitGroup } from 'apis/mutations'\nimport NoPosts from 'assets/svg/no-posts.svg'\nimport Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport Meta from 'components/atoms/Meta/Meta'\nimport DiscoverCard from 'components/DiscoverButton'\nimport Loading from 'components/Loading'\nimport Spinner from 'components/Spinner'\nimport VerticalProfileCard from 'components/VerticalProfileCard'\nimport { links } from 'constants/Links'\nimport useAccountType from 'hooks/useAccountType'\nimport {\n  IGroup,\n  IParent,\n  IPost,\n  IShortProfile,\n} from 'interfaces/UniversalInterface'\nimport moment from 'moment'\nimport PostInput from 'pages/dashboard/PostInput'\nimport DashboardHeader from 'pages/DashboardHeader'\nimport DashboardLayout from 'pages/DashboardLayout'\nimport InviteUserModal from 'pages/groups/InviteUserModal'\nimport { useEffect, useState } from 'react'\nimport { BsCameraVideo } from 'react-icons/bs'\nimport { CgPoll } from 'react-icons/cg'\nimport { HiOutlinePhotograph } from 'react-icons/hi'\nimport { useMutation, useQuery } from 'react-query'\nimport { useHistory, useParams } from 'react-router'\nimport Modal from 'components/atoms/Modal'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport UsersListModal from 'components/UserListModal'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport Post from 'components/posts/Post'\nimport PostPhotoModal from 'pages/dashboard/PostPhotoModal'\nimport { usePostContext } from 'context/PostContext'\n\nconst ExitGroup = ({\n  userId,\n  groupId,\n}: {\n  userId: string\n  groupId: string\n}) => {\n  const [showModal, setShowModal] = useState(false)\n  const history = useHistory()\n  const { mutate } = useMutation(exitGroup, {\n    onSuccess: () => {\n      history.push(links.groups())\n    },\n  })\n\n  return (\n    <>\n      <Modal header=\"Confirm\" open={showModal} setOpen={setShowModal}>\n        <div className=\" \">\n          <p className=\"dark:text-gray-400 text-gray-500 text-lg\">\n            Are you sure you want to exit this group?\n          </p>\n          <div className=\"flex items-center p-4 justify-end\">\n            <Button\n              label=\"Confirm\"\n              gradient\n              onClick={() => mutate({ targetId: userId, groupId: groupId })}\n            />\n          </div>\n        </div>\n      </Modal>\n      <div className=\"rounded-lg border dark:border-gray-700  border-gray-200  overflow-hidden lg:max-w-xs bg-white dark:bg-gray-800 \">\n        <h1\n          onClick={() => setShowModal(true)}\n          className=\"text-center hover:bg-red-500 hover:text-white rounded-lg p-2 cursor-pointer text-red-500\"\n        >\n          Exit group\n        </h1>\n      </div>\n    </>\n  )\n}\n\nconst SingleGroupView = ({ userData }: { userData: IParent }) => {\n  const params: any = useParams()\n  const groupId = params.groupId\n\n  // check if the current user is a member of group\n  const verifyMember = () => {\n    let isMember = false\n    if (groupId) {\n      if (\n        !userData ||\n        userData?.groups === undefined ||\n        userData?.groups?.length === 0\n      ) {\n        isMember = false\n      } else if (userData.groups.includes(groupId)) {\n        isMember = true\n      } else {\n        isMember = false\n      }\n    } else {\n      isMember = false\n    }\n    return isMember\n  }\n\n  const history = useHistory()\n\n  const isMember = verifyMember()\n  useEffect(() => {\n    if (!isMember) {\n      history.push(links.FEED)\n    }\n  }, [groupId, isMember])\n\n  const { data, isLoading, isFetched, refetch } = useQuery('group-data', () =>\n    fetchGroupById(groupId)\n  )\n  const groupData: IGroup = isFetched && !isLoading ? data?.data?.data : []\n\n  const fetchPost = useQuery(\n    'group-posts',\n    () => fetchMultiplePostsById(groupData?.posts as string[]),\n    { enabled: !!groupData?.posts?.length && !(isLoading && !isFetched) }\n  )\n\n  const { getType } = useAccountType(userData)\n  const [showModal, setShowModal] = useState(false)\n\n  const [showGroupMembersModal, setShowGroupMembersModal] = useState(false)\n  const [showOtherModals, setShowOtherModals] = useState('init')\n\n  if (isLoading && !isFetched) {\n    return <Loading />\n  }\n\n  const isOwner = groupData?.createdBy?.toString() === userData._id\n  const isAdmin = groupData?.admin?.includes(userData._id)\n  const members = (groupData?.members as IShortProfile[]) || []\n  const authorized = isOwner || isAdmin\n\n  const posts = (fetchPost.data?.data?.data.posts as IPost[]) || []\n  const postCount = fetchPost.data?.data?.data.count || 0\n  const fetchMoreData = () => {}\n\n  return (\n    isMember && (\n      <div className=\"relative  dark:bg-gray-900 bg-gray-100 min-h-screen \">\n        <DashboardHeader userData={userData} />\n        <Meta pageTitle={`Post | Feed | 13RMS`} />\n\n        {authorized && (\n          <InviteUserModal\n            refetchGroup={refetch}\n            group={groupData}\n            followingList={userData.following}\n            open={showModal}\n            setOpen={setShowModal}\n          />\n        )}\n\n        {(showOtherModals === 'photo' || showOtherModals === 'video') && (\n          <PostPhotoModal\n            postingIn={'group'}\n            customInId={groupData._id}\n            isPhoto={showOtherModals === 'photo'}\n            open\n            setOpen={() => setShowOtherModals('init')}\n          />\n        )}\n\n        <UsersListModal\n          title={`Group members (${members?.length})`}\n          userList={members}\n          open={showGroupMembersModal}\n          setOpen={setShowGroupMembersModal}\n        />\n\n        <div\n          className={`h-auto pt-4 relative flow-root  transition-all duration-500 `}\n        >\n          <DashboardLayout\n            firstColClass={`   max-h-152 hidden  xl:block w-full `}\n            firstCol={\n              <div className=\"flex flex-col gap-y-12\">\n                {isFetched && !isLoading ? (\n                  <>\n                    <VerticalProfileCard\n                      content={\n                        <div>\n                          <div>\n                            <div className=\"ml-2 flex-shrink-0 items-center justify-center flex\">\n                              <p className=\"px-2 inline-flex text-sm items-center justify-center leading-5 font-semibold rounded-md bg-gray-100 text-gray-800 dark:bg-gray-600 dark:text-gray-200\">\n                                {isOwner\n                                  ? 'Owner'\n                                  : isAdmin\n                                  ? 'Admin'\n                                  : 'Member'}\n                              </p>\n                            </div>\n\n                            <p className=\"mb-4 text-gray-600 dark:text-gray-400 text-sm tracking-wide mt-1\">\n                              Group created:{' '}\n                              {moment(groupData.createdOn).format('MMM YYYY')}\n                            </p>\n                            {authorized && (\n                              <div className=\"flex border-t py-2 text-xs font-medium text-gray-500 dark:text-gray-500 border-gray-200 dark:border-gray-700 transition-all  item-center px-4 cursor-pointer justify-between\">\n                                <h6 className=\"font-medium \">\n                                  Requests to join\n                                </h6>\n                                <a\n                                  href={links.followers(userData?.profileUrl)}\n                                  className=\"hover:underline text-link cursor-pointer font-semibold\"\n                                >\n                                  {groupData?.requests?.length || 0}\n                                </a>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      }\n                      user={userData}\n                    />\n                    <DiscoverCard />\n                    {!isOwner && (\n                      <ExitGroup groupId={groupId} userId={userData._id} />\n                    )}\n\n                    {/* <Modal\n                      setOpen={setShowCreateGroupModal}\n                      header=\"Create group\"\n                      open={showCreateGroupModal}\n                    >\n                      <div className=\" min-w-132 max-w-164 min-h-56 max-h-132 overflow-y-auto\">\n                        <CreateGroup\n                          refetchGroup={refetch}\n                          groupData={groupData}\n                          onSuccess={() => setShowCreateGroupModal(false)}\n                        />\n                      </div>\n                    </Modal>\n\n                    {authorized && (\n                      <Button\n                        label=\"Edit group details\"\n                        gradient\n                        onClick={() => setShowCreateGroupModal(true)}\n                        // link={links.editGroup(groupData._id)}\n                      />\n                    )} */}\n                  </>\n                ) : (\n                  <Spinner />\n                )}\n              </div>\n            }\n            secondCol={\n              <div className=\"\">\n                {isLoading && !isFetched ? (\n                  <Spinner />\n                ) : (\n                  <div className=\"flex gap-y-12 mx-auto lg:max-w-2xl  flex-col\">\n                    <div className=\"rounded-lg border dark:border-gray-700  border-gray-200 overflow-hidden  bg-white dark:bg-gray-800\">\n                      <img\n                        alt=\"\"\n                        src={\n                          groupData?.coverPicture\n                            ? groupData?.coverPicture\n                            : 'https://source.unsplash.com/1600x900/?nature,water'\n                        }\n                        className=\"w-full lg:h-28 sm:h-24 object-cover h-20\"\n                      />\n                      <div className=\"flex justify-start mx-8 -mt-5\">\n                        <img\n                          alt=\"\"\n                          src={\n                            groupData.profilePicture\n                              ? groupData.profilePicture\n                              : avatarPlaceholder\n                          }\n                          className=\"lg:h-16 lg:w-16 h-12 w-12  border-gradient border-transparent border-2 -mt-3\"\n                        />\n                      </div>\n                      <div className=\"text-left mx-8 mt-2 pb-6 pt-2\">\n                        <h3 className=\"dark:text-white text-gray-900 text-2xl font-medium \">\n                          {groupData.groupName}\n                        </h3>\n                      </div>\n                    </div>\n\n                    <PostInput\n                      fullName={userData.fullName}\n                      postingIn=\"group\"\n                      customInId={groupData._id}\n                      placeholder=\"Start a post in this group\"\n                      customButtons={\n                        <>\n                          <Button\n                            gradient\n                            invert\n                            Icon={HiOutlinePhotograph}\n                            label=\"Photo\"\n                            onClick={() => setShowOtherModals('photo')}\n                          />\n                          <Button\n                            gradient\n                            Icon={BsCameraVideo}\n                            invert\n                            onClick={() => setShowOtherModals('video')}\n                            label=\"Video\"\n                          />\n                          <Button gradient Icon={CgPoll} invert label=\"Poll\" />\n                        </>\n                      }\n                      profilePicture={userData?.profilePicture}\n                    />\n\n                    {posts && posts.length > 0 ? (\n                      <InfiniteScroll\n                        endMessage={\n                          <div className=\"text-center\">\n                            <span className=\"dark:text-gray-600 text-center text-gray-400\">\n                              •\n                            </span>\n                          </div>\n                        }\n                        dataLength={posts.length}\n                        scrollableTarget=\"main_content\"\n                        next={fetchMoreData}\n                        hasMore={postCount > posts?.length}\n                        loader={<h4>Loading...</h4>}\n                      >\n                        <div className=\"grid grid-cols-1 gap-y-6\">\n                          {posts.map((post) => (\n                            <Post\n                              key={post._id}\n                              userData={userData}\n                              userId={userData._id}\n                              post={post}\n                            />\n                          ))}\n                        </div>\n                      </InfiniteScroll>\n                    ) : (\n                      <Card\n                        content={\n                          <div className=\"m-4 text-center flex items-center justify-center flex-col\">\n                            <img\n                              src={NoPosts}\n                              alt=\"\"\n                              className=\"h-28 sm:h-32 lg:h-36 xl:h-40 w-full\"\n                            />\n                            <h3 className=\"mt-4 text-xl font-medium dark:text-gray-300 text-gray-900\">\n                              Create the first post\n                            </h3>\n                            <p className=\"mt-1 text-base text-gray-500\">\n                              Get the conversation going. Be the first to post\n                              in this event!\n                            </p>\n                          </div>\n                        }\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            }\n            thirdColClass=\"lg:block\"\n            thirdCol={\n              <div className=\"space-y-12 lg:max-w-84 max-w-full\">\n                <Card\n                  cardTitle={`${groupData.members.length} member${\n                    groupData.members.length > 1 ? 's' : ''\n                  }`}\n                  content={\n                    <div className=\"mt-4 flex-shrink-0 sm:mt-0 \">\n                      <div className=\"flex overflow-hidden -space-x-2\">\n                        {groupData.members\n                          .slice(0, 4)\n                          // @ts-ignore\n                          .map((member: IParent) => (\n                            <img\n                              key={member._id}\n                              className=\"inline-block lg:h-12 lg:w-12 h-12 w-12 rounded-full ring-2 dark:ring-transparent border-gradient border-transparent border-2\"\n                              src={member.profilePicture}\n                              alt={''}\n                            />\n                          ))}\n                      </div>\n                      <div className=\"flex gap-x-4 items-center justify-start\">\n                        {authorized && (\n                          <Button\n                            onClick={() => setShowModal(true)}\n                            gradient\n                            rounded=\"rounded-full\"\n                            className=\"mt-4\"\n                            label=\"Invite connections\"\n                          />\n                        )}\n                        <Button\n                          onClick={() =>\n                            setShowGroupMembersModal(!showGroupMembersModal)\n                          }\n                          gradient\n                          rounded=\"rounded-full\"\n                          invert\n                          className=\"mt-4\"\n                          label=\"see all members\"\n                        />\n                      </div>\n                    </div>\n                  }\n                />\n                {groupData?.groupDescription && (\n                  <Card\n                    cardTitle=\"About this group\"\n                    content={\n                      <p className=\"text-gray-900 dark:text-gray-200 line-clamp \">\n                        {groupData?.groupDescription}\n                      </p>\n                    }\n                  />\n                )}\n                {groupData.groupRules && (\n                  <Card\n                    cardTitle=\"Group rules\"\n                    content={\n                      <p className=\"text-gray-900 dark:text-gray-200 line-clamp \">\n                        {groupData.groupRules}\n                      </p>\n                    }\n                  />\n                )}\n                <Card\n                  cardTitle=\"Admin\"\n                  content={\n                    <div>\n                      {/* Start */}\n                      {/* @ts-ignore */}\n                      {groupData.admin.map((_admin: IParent) => {\n                        const { isBusiness, isPersonal } = getType(_admin)\n                        return (\n                          <div className=\"flex \">\n                            <div className=\"mr-4 mt-2 flex-shrink-0\">\n                              <img\n                                alt=\"\"\n                                src={\n                                  _admin.profilePicture\n                                    ? _admin.profilePicture\n                                    : avatarPlaceholder\n                                }\n                                className=\"rounded-full lg:h-12 lg:w-12 h-12 w-12 border-gradient border-transparent  border-2 -mt-3\"\n                              />\n                            </div>\n                            <div>\n                              <a\n                                href={links.getProfile(_admin)}\n                                className=\"text-base  dark:text-white font-semibold\"\n                              >\n                                {_admin.fullName}\n                              </a>\n                              <p className=\"mt-1 text-sm dark:text-gray-500\">\n                                {isBusiness\n                                  ? _admin?.business?.name\n                                  : isPersonal\n                                  ? _admin?.company?.companyName\n                                  : _admin?.background?.education &&\n                                    _admin?.background?.education[0].name}\n                              </p>\n                            </div>\n                          </div>\n                        )\n                      })}\n                    </div>\n                  }\n                />\n\n                {/* <Following\n                  showSingleCard\n                  list={userData?.following}\n                  interests={userData?.background?.interests}\n                /> */}\n              </div>\n            }\n          />\n        </div>\n      </div>\n    )\n  )\n}\n\nexport default SingleGroupView\n"],"sourceRoot":""}