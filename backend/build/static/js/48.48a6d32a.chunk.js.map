{"version":3,"sources":["utils/functions/index.js","components/atoms/Title.tsx","pages/request/RequestCard.tsx","pages/request/SearchedEmployees.tsx"],"names":["eclipse","str","len","length","substring","join","arr","key","joinPattern","map","d","doResize","e","textbox","target","txt","value","cols","arraytxt","split","rows","i","parseInt","getTags","filter","tags","getFromNowTime","time","moment","fromNow","Title","className","children","size","fontWeight","textColor","isLoading","RequestCard","request","userId","userData","iAmOwnerOfThisProject","postedBy","toString","history","useHistory","user","onClick","push","links","viewRequestById","_id","content","src","profilePicture","avatarPlaceholder","alt","title","email","description","postedOn","stopPropagation","label","disabled","gradient","link","getProfileById","profileUrl","other","template","SearchedEmployees","useHeaderContext","setIsSearched","isSearched","useQuery","fetchSearchedEmployees","searchQuery","enabled","data","searchApi","refetch","isFetched","searchedQuery","queryString","parse","window","location","search","q","useState","setSearchQuery","useEffect","searchedData","customParentMaxWidth","customMaxWidth","keywords","pageUrl","href","pageTitle"],"mappings":"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","file":"static/js/48.48a6d32a.chunk.js","sourcesContent":["import moment from 'moment'\n\nconst createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', (error) => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nfunction getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n * @param {number} rotation - optional rotation parameter\n */\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  const maxSize = Math.max(image.width, image.height)\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2))\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea\n  canvas.height = safeArea\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2)\n  ctx.rotate(getRadianAngle(rotation))\n  ctx.translate(-safeArea / 2, -safeArea / 2)\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5\n  )\n  const data = ctx.getImageData(0, 0, safeArea, safeArea)\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    Math.round(0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x),\n    Math.round(0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y)\n  )\n\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n\n  // As a blob\n  return new Promise((resolve) => {\n    canvas.toBlob((file) => {\n      resolve(URL.createObjectURL(file))\n    }, 'image/jpeg')\n  })\n}\n\nexport const eclipse = (str = '', len = 50) => {\n  if (str.length > len) {\n    return str.substring(0, len) + '...'\n  } else return str\n}\n\nexport const join = (arr, key, joinPattern = ',') =>\n  arr.map((d) => d[key]).join(joinPattern)\n\nexport const doResize = (e) => {\n  const textbox = e.target\n  var maxrows = 50\n  var txt = textbox.value\n  var cols = textbox.cols\n\n  var arraytxt = txt?.split('\\n')\n  var rows = arraytxt.length\n\n  for (let i = 0; i < arraytxt.length; i++)\n    // @ts-ignore\n    rows += parseInt(arraytxt[i].length / cols)\n\n  if (rows > maxrows) textbox.rows = maxrows\n  else textbox.rows = rows\n}\n\nexport const getTags = (str) => {\n  if (str && str.length > 0) {\n    return str\n      .split(' ')\n      .filter(\n        (tags) =>\n          tags !== 'in' ||\n          tags !== 'or' ||\n          tags !== 'of' ||\n          tags !== 'the' ||\n          tags !== 'is' ||\n          tags !== 'can' ||\n          tags !== 'so' ||\n          tags !== '.' ||\n          tags !== 'to'\n      )\n  }\n}\n\nexport const getFromNowTime = (time) => moment(time).fromNow()\n","import React from 'react'\n\nconst Title = ({\n  className,\n  children,\n  size = 'text-3xl',\n  fontWeight = 'font-semibld',\n  textColor = 'text-gray-900 dark:text-white',\n  isLoading = false,\n}: {\n  className?: string\n  size?: string\n  isLoading?: boolean\n  textColor?: string\n  fontWeight?: string\n  children: React.ReactNode\n}) => {\n  if (isLoading) {\n    return (\n      <div\n        className={`h-4 animate-pulse bg-gray-400 rounded ${className} ${size} ${fontWeight} ${textColor}`}\n      ></div>\n    )\n  }\n  return (\n    <h1 className={`${className} ${size} ${fontWeight} ${textColor}`}>\n      {children}\n    </h1>\n  )\n}\n\nexport default Title\n","import Button from 'components/atoms/Button'\nimport Card from 'components/atoms/Card'\nimport Title from 'components/atoms/Title'\nimport { links } from 'constants/Links'\nimport { IParent, IRequest } from 'interfaces/UniversalInterface'\nimport { useHistory } from 'react-router'\nimport { avatarPlaceholder } from 'state/Redux/constants'\nimport { getFromNowTime } from 'utils/functions'\n\nconst RequestCard = ({\n  request,\n  userId,\n  userData,\n  isLoading = false,\n}: {\n  request?: IRequest\n  userId?: string\n  userData?: IParent\n  isLoading?: boolean\n}) => {\n  const iAmOwnerOfThisProject = request.postedBy.toString() === userId\n\n  const history = useHistory()\n\n  const { user } = request\n\n  return (\n    <div onClick={() => history.push(links.viewRequestById(request._id))}>\n      <Card\n        isLoading={isLoading}\n        className=\"box   hover:shadow-xl transition-all  cursor-pointer\"\n        content={\n          <div className=\"relative max-h-64 h-64\">\n            {isLoading ? (\n              <div className=\"bg-gray-400 h-12 w-12 mb-4 cursor-pointer rounded-lg shadow-md\"></div>\n            ) : (\n              <img\n                className=\"h-12 w-12 mb-4 cursor-pointer rounded-lg shadow-md\"\n                src={\n                  user?.profilePicture\n                    ? user?.profilePicture\n                    : avatarPlaceholder\n                }\n                alt=\"\"\n              />\n            )}\n            <Title isLoading={isLoading} size=\"text-xl\">\n              {request.title}\n            </Title>\n            <Title\n              size=\"text-base\"\n              isLoading={isLoading}\n              className=\"tracking-wide mt-1 gradient-text\"\n            >\n              {user?.email}\n            </Title>\n            <Title\n              size=\"text-sm\"\n              isLoading={isLoading}\n              className=\"tracking-wide truncate whitespace-pre-line mt-1\"\n            >\n              {request.description}\n            </Title>\n\n            {!isLoading && (\n              <div className=\"flex items-center justify-between inset-x-0 absolute bottom-0\">\n                <div className=\"text-sm text-gray-400  dark:text-gray-500\">\n                  {getFromNowTime(request.postedOn)}\n                </div>\n\n                <div onClick={(e) => e.stopPropagation()}>\n                  {iAmOwnerOfThisProject ? (\n                    <Button\n                      label=\"View\"\n                      onClick={() => {\n                        history.push(links.viewRequestById(request._id))\n                      }}\n                      disabled={isLoading}\n                      gradient\n                    />\n                  ) : (\n                    <Button\n                      disabled={isLoading}\n                      label=\"View Profile\"\n                      gradient\n                      link={links.getProfileById(\n                        user.profileUrl,\n                        user?.other?.template || 1\n                      )}\n                    />\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        }\n      />\n    </div>\n  )\n}\n\nexport default RequestCard\n","import { fetchSearchedEmployees } from 'apis/queries'\nimport Card from 'components/atoms/Card'\nimport Meta from 'components/atoms/Meta/Meta'\nimport Title from 'components/atoms/Title'\nimport Loading from 'components/Loading'\nimport NarrowLayout from 'containers/NarrowLayout'\nimport { useHeaderContext } from 'context/HeaderContext'\nimport { IParent, IRequest } from 'interfaces/UniversalInterface'\nimport { map } from 'lodash'\nimport RequestCard from 'pages/request/RequestCard'\nimport queryString from 'query-string'\nimport { useEffect, useState } from 'react'\nimport { useQuery } from 'react-query'\n\nconst SearchedEmployees = ({ userData }: { userData: IParent }) => {\n  const { setIsSearched, isSearched } = useHeaderContext()\n\n  const {\n    data,\n    refetch: searchApi,\n    isLoading,\n\n    isFetched,\n  } = useQuery('searched-jobs', () => fetchSearchedEmployees(searchQuery), {\n    enabled: false,\n  })\n\n  const parsed = queryString.parse(window.location.search)\n\n  const searchedQuery = parsed.q.toString()\n\n  const [searchQuery, setSearchQuery] = useState(searchedQuery)\n\n  useEffect(() => {\n    if (isSearched) {\n      const parsed = queryString.parse(window.location.search)\n      const searchedQuery = parsed.q.toString()\n      setSearchQuery(searchedQuery)\n    }\n  }, [window.location.search, isSearched])\n\n  useEffect(() => {\n    if (searchQuery.length >= 3) {\n      searchApi()\n      setIsSearched(false)\n    }\n  }, [searchQuery])\n\n  const searchedData: IRequest[] = isFetched && !isLoading ? data.data.data : []\n\n  if (isLoading && !isFetched) {\n    return <Loading />\n  }\n\n  return (\n    <NarrowLayout\n      userData={userData}\n      customParentMaxWidth=\"max-w-360 relative\"\n      customMaxWidth=\"max-w-360\"\n    >\n      <Meta\n        keywords=\"jobs, jobs at 13RMS, 13rms\"\n        pageUrl={window.location.href}\n        pageTitle={`Search ${searchQuery} | Jobs | 13RMS `}\n      />\n\n      {searchQuery && (\n        <Card\n          content={\n            <Title>\n              You have searched for `\n              <span className=\"gradient-text\">{searchQuery}</span>`. Found{' '}\n              {searchedData?.length || 0} results\n            </Title>\n          }\n        />\n      )}\n\n      {searchedData && searchedData.length > 0 && (\n        <div className=\"mt-12\">\n          {searchedData.length > 0 && (\n            <div className=\"grid  gap-4 grid-cols-4\">\n              {map(searchedData, (request) => (\n                <RequestCard\n                  isLoading={!isFetched && isLoading}\n                  userData={userData}\n                  userId={userData._id.toString()}\n                  request={request}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      {/* \n      {!isBusiness &&\n        searchedJobsData.length === 0 &&\n        relatedJobs.length > 0 && (\n          <SectionTitle title={`Jobs Related To Your Preference`} />\n        )}\n\n      {!isBusiness && searchedJobsData.length === 0 && relatedJobs.length > 0 && (\n        <div className=\"grid gap-4 grid-cols-4\">\n          {map(relatedJobs, (project) => (\n            <ProjectCard userId={userData._id.toString()} project={project} />\n          ))}\n        </div>\n      )} */}\n    </NarrowLayout>\n  )\n}\n\nexport default SearchedEmployees\n"],"sourceRoot":""}