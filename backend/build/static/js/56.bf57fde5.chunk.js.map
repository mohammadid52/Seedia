{"version":3,"sources":["pages/ForgotPassword.tsx"],"names":["defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","ForgotPassword","useBoolean","showModal","onShow","onCancel","useState","emailSendingStatus","setEmailSendingStatus","onResetMailSend","email","link","expiresIn","emailjs","send","mailConfig","serviceID","template","resetPassordTemplateId","to_email","moment","Number","format","userId","then","result","error","validationSchema","Yup","required","verifyingEmail","setVerifyingEmail","setError","verifyEmail","successCallback","a","network","post","data","verified","message","console","formik","useFormik","initialValues","onSubmit","values","open","setOpen","hideCloseBtn","className","title","handleSubmit","onChange","handleChange","value","autoComplete","label","name","errors","id","gradient","disabled","loading","loadingText","fullWidth","type","options","height","width","onClick"],"mappings":"sSAgBMA,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,mBA6JVC,UAzJQ,WACrB,MAAsCC,cAAtC,mBAAOC,EAAP,KAAkBC,EAAlB,KAA0BC,EAA1B,KACA,EAAoDC,mBAAS,WAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KAEMC,EAAkB,SAACC,EAAeC,EAAcC,GAEpDR,IACAI,EAAsB,WACtBK,IACGC,KACCC,IAAWC,UACXD,IAAWE,SAASC,uBACpB,CACEP,OACAQ,SAAUT,EACVE,UAAWQ,IAAOC,OAAOT,IAAYU,OAAO,OAE9CP,IAAWQ,QAEZC,MACC,SAACC,GAECpB,IACAG,EAAsB,WAExB,SAACkB,GACClB,EAAsB,cAKxBmB,EAAmBC,IAAW,CAClClB,MAAOkB,MACJlB,MAAM,yBACNmB,SAAS,uCAGd,EAA4CvB,oBAAS,GAArD,mBAAOwB,EAAP,KAAuBC,EAAvB,KAEA,EAA0BzB,mBAAS,IAAnC,mBAAOoB,EAAP,KAAcM,EAAd,KAEMC,EAAW,uCAAG,WAAOvB,EAAewB,GAAtB,uBAAAC,EAAA,6DAClBJ,GAAkB,GADA,kBAGOK,IAAQC,KAAK,oBAAqB,CAAE3B,UAH3C,iBAGR4B,EAHQ,EAGRA,MAECA,KAAKC,SACmB,oBAApBL,IAAiC,EACdI,EAAKA,KAAzB3B,EADiC,EACjCA,KAAMC,EAD2B,EAC3BA,UACdoB,EAAS,IACTE,EAAgBvB,EAAMC,IAGxBoB,EAASM,EAAKE,SAZA,gDAehBC,QAAQf,MAAR,8CAEE,KAAMc,SAjBQ,yBAoBhBT,GAAkB,GApBF,4EAAH,wDAwBXW,EAASC,YAAU,CACvBC,cAAe,CACblC,MAAO,IAETmC,SAAS,WAAD,4BAAE,WAAOC,GAAP,SAAAX,EAAA,sDACRF,EAAYa,EAAOpC,OAAO,SAACC,EAAcC,GAAf,OACxBH,EAAgBqC,EAAOpC,MAAOC,EAAMC,MAF9B,2CAAF,mDAAC,GAKTe,qBAGF,OACE,qCACGxB,GAAoC,SAAvBI,GACZ,eAAC,IAAD,CAEEwC,KAAM5C,EAEN6C,QAAS3C,EACT4C,aAAqC,WAAvB1C,EALhB,UAOE,cAAC,IAAD,CACEA,mBAAoBA,EAEpBF,SAAUA,IAEZ,uBAAO6C,UAAU,eAGrB,cAAC,IAAD,CAAQC,MAAM,iBAAd,SACE,qBAAKD,UAAU,8CAAf,SACE,sBAAKA,UAAU,qHAAf,UAC0B,SAAvB3C,GACC,uBAAMsC,SAAUH,EAAOU,aAAvB,UACE,cAAC,IAAD,CACEC,SAAUX,EAAOY,aACjBC,MAAOb,EAAOI,OAAOpC,MACrB8C,cAAc,EACdC,MAAM,8BACNC,KAAK,QACLhC,MAAOgB,EAAOiB,OAAOjD,OAASgB,EAC9BkC,GAAG,UAEL,qBAAKV,UAAU,8CAAf,SACE,cAAC,IAAD,CACEW,UAAQ,EACRC,SACEhC,GAAyC,YAAvBvB,EAEpBwD,QAASjC,GAAyC,YAAvBvB,EAC3ByD,YACElC,EACI,uBACA,qBAEN2B,MAAM,qBACNQ,WAAS,EACTC,KAAK,gBAKW,SAAvB3D,GACC,gCACE,cAAC,IAAD,CAAQ4D,QAASxE,EAAgByE,OAAQ,IAAKC,MAAO,MACrD,oBAAGnB,UAAU,8BAAb,qDAEE,uBAFF,+BAIA,oBAAGA,UAAU,sCAAb,mCACyB,IACvB,sBACEoB,QAAS,kBAAM9D,EAAsB,YACrC0C,UAAU,iCAFZ,0BAKQ","file":"static/js/56.bf57fde5.chunk.js","sourcesContent":["import Button from 'components/atoms/Button'\nimport Modal from 'components/atoms/Modal'\nimport NormalFormInput from 'components/atoms/NormalFormInput'\nimport EmailVerification from 'components/EmailVerification'\nimport Layout from 'containers/Layout'\nimport emailjs from 'emailjs-com'\nimport { useFormik } from 'formik'\nimport { network } from 'helpers'\nimport useBoolean from 'hooks/useBoolean'\nimport { useState } from 'react'\nimport { mailConfig } from 'state/config'\nimport * as Yup from 'yup'\nimport animationData from 'assets/animation/success.json'\nimport Lottie from 'react-lottie'\nimport moment from 'moment'\n\nconst defaultOptions = {\n  loop: false,\n  autoplay: true,\n  animationData: animationData,\n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice',\n  },\n}\n\nconst ForgotPassword = () => {\n  const [showModal, onShow, onCancel] = useBoolean()\n  const [emailSendingStatus, setEmailSendingStatus] = useState('initial')\n\n  const onResetMailSend = (email: string, link: string, expiresIn: string) => {\n    // @ts-ignore\n    onShow()\n    setEmailSendingStatus('sending')\n    emailjs\n      .send(\n        mailConfig.serviceID,\n        mailConfig.template.resetPassordTemplateId,\n        {\n          link,\n          to_email: email,\n          expiresIn: moment(Number(expiresIn)).format('LT'),\n        },\n        mailConfig.userId\n      )\n      .then(\n        (result) => {\n          // @ts-ignore\n          onCancel()\n          setEmailSendingStatus('sent')\n        },\n        (error) => {\n          setEmailSendingStatus('failed')\n        }\n      )\n  }\n\n  const validationSchema = Yup.object({\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Please add verified email address'),\n  })\n\n  const [verifyingEmail, setVerifyingEmail] = useState(false)\n\n  const [error, setError] = useState('')\n\n  const verifyEmail = async (email: string, successCallback: any) => {\n    setVerifyingEmail(true)\n    try {\n      const { data } = await network.post('/user/verifyEmail', { email })\n\n      if (data.data.verified) {\n        if (typeof successCallback === 'function') {\n          const { link, expiresIn } = data.data\n          setError('')\n          successCallback(link, expiresIn)\n        }\n      } else {\n        setError(data.message)\n      }\n    } catch (error) {\n      console.error(\n        `@error while verifyng email. @verifyEmail: `,\n        error.message\n      )\n    } finally {\n      setVerifyingEmail(false)\n    }\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n    },\n    onSubmit: async (values: { email: string }) => {\n      verifyEmail(values.email, (link: string, expiresIn: string) =>\n        onResetMailSend(values.email, link, expiresIn)\n      )\n    },\n    validationSchema,\n  })\n\n  return (\n    <>\n      {showModal && emailSendingStatus !== 'sent' && (\n        <Modal\n          //  @ts-ignore\n          open={showModal}\n          //  @ts-ignore\n          setOpen={onCancel}\n          hideCloseBtn={emailSendingStatus !== 'failed'}\n        >\n          <EmailVerification\n            emailSendingStatus={emailSendingStatus}\n            //  @ts-ignore\n            onCancel={onCancel}\n          />\n          <input className=\"h-0 w-0\" />\n        </Modal>\n      )}\n      <Layout title=\"Reset password\">\n        <div className=\"mt-8 mb-36 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-white dark:bg-gray-900 border border-transparent dark:border-gray-700 py-8 px-4 shadow-md sm:rounded-lg sm:px-6\">\n            {emailSendingStatus !== 'sent' && (\n              <form onSubmit={formik.handleSubmit}>\n                <NormalFormInput\n                  onChange={formik.handleChange}\n                  value={formik.values.email}\n                  autoComplete={false}\n                  label=\"Please enter verified email\"\n                  name=\"email\"\n                  error={formik.errors.email || error}\n                  id=\"email\"\n                />\n                <div className=\"mt-5 sm:mt-4 flex justify-end  items-center\">\n                  <Button\n                    gradient\n                    disabled={\n                      verifyingEmail || emailSendingStatus === 'sending'\n                    }\n                    loading={verifyingEmail || emailSendingStatus === 'sending'}\n                    loadingText={\n                      verifyingEmail\n                        ? 'Verifying your email'\n                        : 'Sending reset link'\n                    }\n                    label=\"Send Reset Request\"\n                    fullWidth\n                    type=\"submit\"\n                  />\n                </div>\n              </form>\n            )}\n            {emailSendingStatus === 'sent' && (\n              <div>\n                <Lottie options={defaultOptions} height={300} width={300} />\n                <p className=\"text-center dark:text-white\">\n                  We have sent a reset link to your email.\n                  <br /> Please check your inbox.\n                </p>\n                <p className=\"text-center dark:text-gray-400 mt-4\">\n                  Link not received yet?{' '}\n                  <span\n                    onClick={() => setEmailSendingStatus('initial')}\n                    className=\"hover:underline cursor-pointer\"\n                  >\n                    resend email\n                  </span>{' '}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\nexport default ForgotPassword\n"],"sourceRoot":""}