{"version":3,"sources":["../../../src/hooks/use-tree-walker.ts","../../../../src/components/radio-group/radio-group.tsx","../../../src/hooks/use-flags.ts","../../../src/hooks/use-focus-trap.ts","../../../src/hooks/use-inert-others.ts","../../../src/internal/portal-force-root.tsx","../../../../src/components/portal/portal.tsx","../../../src/internal/stack-context.tsx","../../../../src/components/dialog/dialog.tsx"],"names":["useTreeWalker","container","accept","walk","enabled","acceptRef","useRef","walkRef","useEffect","useIsoMorphicEffect","acceptNode","Object","walker","document","NodeFilter","ActionTypes","reducers","options","state","id","action","element","propsRef","idx","radio","RadioGroupContext","createContext","useRadioGroupContext","component","context","useContext","err","Error","RadioGroup","stateReducer","match","props","value","onChange","disabled","passThroughProps","useReducer","dispatch","useLabels","labelledby","LabelProvider","useDescriptions","describedby","DescriptionProvider","useId","radioGroupRef","firstOption","useMemo","option","containsCheckedOption","triggerChange","useCallback","nextValue","nextOption","node","handleKeyDown","all","event","Keys","focusIn","Focus","FocusResult","activeOption","registerOption","type","RegisterOption","api","change","propsWeControl","ref","role","onKeyDown","name","render","defaultTag","OptionState","Option","optionRef","initialFlags","useState","flags","setFlags","addFlag","hasFlag","Boolean","removeFlag","toggleFlag","useFlags","radioGroupDisabled","radioGroupValue","handleClick","handleFocus","handleBlur","isFirstOption","isDisabled","checked","tabIndex","onClick","undefined","onFocus","onBlur","slot","active","Features","useFocusTrap","features","All","initialFocus","containers","restoreElement","window","previousActiveElement","mounted","useIsMounted","featuresRestoreFocus","featuresInitialFocus","focusElement","activeElement","console","useWindowEvent","allContainers","Set","previous","toElement","contains","interactables","originals","inert","restore","original","ForcePortalRootContext","ForcePortalRoot","force","usePortalTarget","forceInRoot","groupTarget","existingRoot","root","target","setTarget","DEFAULT_PORTAL_TAG","Portal","passthroughProps","ready","useServerHandoffComplete","createPortal","DEFAULT_GROUP_TAG","PortalGroupContext","StackMessage","StackContext","StackProvider","children","onUpdate","parentUpdate","notify","args","DialogStates","titleId","DialogContext","useDialogContext","Dialog","DialogRenderFeatures","DialogRoot","forwardRefWithAs","open","onClose","rest","nestedDialogCount","setNestedDialogCount","usesOpenClosedState","useOpenClosed","State","internalDialogRef","dialogRef","useSyncRefs","hasOpen","hasOnClose","dialogState","visible","descriptionId","close","setTitleId","hasNestedDialogs","hasParentDialog","position","parent","FocusTrapFeatures","leaf","child","interactable","useInertOthers","overflow","paddingRight","scrollbarWidth","observer","IntersectionObserver","entries","entry","contextBag","Open","message","count","React","Overlay","overlayRef","isDisabledReactIssue7711","Title","Description"],"mappings":"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","file":"static/js/51.4a1f043d.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n","import { useState, useCallback } from 'react'\n\nexport function useFlags(initialFlags = 0) {\n  let [flags, setFlags] = useState(initialFlags)\n\n  let addFlag = useCallback((flag: number) => setFlags(flags => flags | flag), [setFlags])\n  let hasFlag = useCallback((flag: number) => Boolean(flags & flag), [flags])\n  let removeFlag = useCallback((flag: number) => setFlags(flags => flags & ~flag), [setFlags])\n  let toggleFlag = useCallback((flag: number) => setFlags(flags => flags ^ flag), [setFlags])\n\n  return { addFlag, hasFlag, removeFlag, toggleFlag }\n}\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        console.warn('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Handle `Escape` to close\n  useWindowEvent('keydown', event => {\n    if (event.key !== Keys.Escape) return\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    event.preventDefault()\n    event.stopPropagation()\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (event.target !== event.currentTarget) return\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n"],"sourceRoot":""}