{"version":3,"sources":["pages/products/AddProduct.tsx"],"names":["AddProduct","field","number","userData","minMsg","validationSchema","Yup","productName","required","min","max","productDescription","details","price","matches","setNotification","useNotifications","postMutation","useMutation","addPost","addProduct","onSuccess","data","id","name","message","show","title","buttonText","buttonUrl","links","getProductUrl","mutate","postData","text","fullName","postType","customInId","isLoading","isError","error","isSuccess","useState","imageList","setImageList","productImageRef","useRef","uploadMultipleImages","finalImageList","map","img","idx","nanoid","url","location","isCover","alt","formRef","current","values","images","imageUploadMutate","imageUploadingLoading","upload","fd","FormData","forEach","image","append","setTimeout","history","useHistory","useEffect","push","getProfileById","profileUrl","other","template","onSubmit","a","pageTitle","fontWeight","innerRef","initialValues","availableColors","availableSizes","tags","estimatedDelivery","features","highlights","className","label","autoFocus","placeholder","length","src","URL","createObjectURL","ref","multiple","type","onChange","e","imgs","Object","target","files","prev","accept","onClick","click","size","invert","gradient","Icon","AiOutlineCamera","textarea","rows","cols","disableFieldOption","list","colorsList","sortBy","sizeList","gridClass","props","step","times","d","toString","rounded","loading","errors"],"mappings":"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","file":"static/js/58.2754a789.chunk.js","sourcesContent":["import { addPost, addProduct, uploadMultipleImages } from 'apis/mutations'\nimport Error from 'components/alerts/Error'\nimport Button from 'components/atoms/Button'\nimport FormInput from 'components/atoms/FormInput'\nimport FormMultipleSelector from 'components/atoms/FormMultipleSelector'\nimport FormSelector from 'components/atoms/FormSelector'\nimport FormTagsInput from 'components/atoms/FormTagsInput'\nimport Meta from 'components/atoms/Meta/Meta'\nimport Title from 'components/atoms/Title'\nimport List from 'components/List'\nimport { links } from 'constants/Links'\nimport NarrowLayout from 'containers/NarrowLayout'\nimport { useNotifications } from 'context/NotificationContext'\nimport { Form, Formik } from 'formik'\nimport { IParent, IProduct, IProductImage } from 'interfaces/UniversalInterface'\nimport { forEach, map, times } from 'lodash'\nimport { nanoid } from 'nanoid'\nimport { useEffect, useRef, useState } from 'react'\nimport { AiOutlineCamera } from 'react-icons/ai'\nimport { useMutation } from 'react-query'\nimport { useHistory } from 'react-router'\nimport { colorsList, sizeList } from 'values/values'\nimport * as Yup from 'yup'\n\nconst AddProduct = ({ userData }: { userData: IParent }) => {\n  const minMsg = (field: string, number: number) =>\n    `${field} must be atleast ${number} characters`\n  const maxMsg = (field: string, number: number) =>\n    `${field} must be maximum ${number} characters`\n\n  const validationSchema = Yup.object({\n    productName: Yup.string()\n      .required('Product name is required')\n      .min(8, minMsg('Product Name', 8))\n      .max(200, maxMsg('Product Name', 200)),\n    productDescription: Yup.string()\n      .required('Product description is required')\n      .min(50, minMsg('Product Description', 50)),\n\n    details: Yup.string()\n      .required('Product details is required')\n      .min(50, minMsg('Product details', 50)),\n\n    price: Yup.string()\n      .required('Price is required')\n      .matches(/^[0-9.]+$/, 'Must be only digits'),\n  })\n\n  // @ts-ignore\n  const initialValues: IProduct = {\n    images: [],\n    productName: '',\n    productDescription: '',\n    availableColors: [],\n    availableSizes: [],\n    tags: [],\n    estimatedDelivery: 'In 7 days',\n    price: '',\n    details: '',\n    features: [],\n    highlights: [],\n  }\n\n  const { setNotification } = useNotifications()\n  const postMutation = useMutation(addPost)\n\n  const { mutate, isLoading, isError, error, isSuccess } = useMutation(\n    addProduct,\n    {\n      onSuccess: (data) => {\n        const { id, name: productName } = data.data.data\n        const message = data.data.message\n        setNotification({\n          show: true,\n          title: message,\n          buttonText: 'View',\n          buttonUrl: links.getProductUrl(id),\n        })\n\n        postMutation.mutate({\n          postData: {\n            text: `${userData.fullName} has posted a product: ${productName}.`,\n            postType: 'product',\n            customInId: id,\n          },\n        })\n      },\n    }\n  )\n\n  const [imageList, setImageList] = useState<any[]>([])\n\n  const productImageRef: React.LegacyRef<HTMLInputElement> = useRef()\n\n  const onImageSelect = (e: any): void => {\n    const imgs: File[] = Object.values(e.target.files)\n\n    if (imgs.length > 0) {\n      imgs.forEach((img) => imageList.push(img))\n\n      setImageList((prev) => [...prev])\n    }\n  }\n\n  const showFileExplorer = () => productImageRef?.current?.click()\n\n  const { mutate: imageUploadMutate, isLoading: imageUploadingLoading } =\n    useMutation(uploadMultipleImages, {\n      onSuccess: (data) => {\n        const finalImageList: IProductImage[] = map(\n          data.data.data,\n          (img, idx: number) => ({\n            id: nanoid(24),\n            url: img.location,\n            isCover: idx === 0,\n            alt: '',\n          })\n        )\n\n        if (formRef && formRef.current) {\n          // @ts-ignore\n          mutate({ ...formRef.current.values, images: finalImageList })\n        }\n      },\n    })\n\n  const upload = () => {\n    const fd = new FormData()\n\n    forEach(imageList, (image) => {\n      fd.append('images', image)\n    })\n\n    setTimeout(() => {\n      imageUploadMutate(fd)\n    }, 500)\n  }\n\n  const history = useHistory()\n  useEffect(() => {\n    if (isSuccess) {\n      history.push(\n        links.getProfileById(\n          userData.profileUrl,\n          userData?.other?.template || 1\n        )\n      )\n    }\n  }, [isSuccess])\n\n  const onSubmit = async () => {\n    upload()\n  }\n  const formRef = useRef()\n\n  return (\n    <NarrowLayout userData={userData}>\n      <Meta pageTitle=\"Add Product\" />\n      <Title fontWeight=\"font-bold mb-8\">Add New Product</Title>\n      <Formik\n        innerRef={formRef}\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form className=\"space-y-8\">\n          <FormInput\n            label=\"Product Name\"\n            id=\"productName\"\n            name=\"productName\"\n            autoFocus\n            required\n            placeholder=\"Eg. Programming T-shirts\"\n          />\n          {/* <UploadImages setImagesUploaded={setImagesUploaded} /> */}\n          <div>\n            {imageList && imageList.length > 0 && (\n              <div className=\"grid grid-cols-2 sm:grid-cols-4 mb-8 gap-8\">\n                {imageList.map(\n                  (image, idx) =>\n                    // <div key={idx}>\n                    image && (\n                      // <LightGallery key={idx} speed={500} plugins={[lgZoom]}>\n                      <img\n                        className={`shadow-lg  rounded-lg`}\n                        src={URL.createObjectURL(image)}\n                        alt=\"People working on laptops\"\n                      />\n                      // </LightGallery>\n                    )\n                  // </div>\n                )}\n              </div>\n            )}\n            <input\n              ref={productImageRef}\n              className=\"hidden\"\n              multiple\n              type=\"file\"\n              onChange={onImageSelect}\n              accept=\"image/x-png,image/jpeg\"\n            />\n            <div className=\"flex items-center gap-x-4\">\n              <Button\n                onClick={showFileExplorer}\n                size=\"lg\"\n                invert\n                // className=\"w-32\"\n                gradient\n                Icon={AiOutlineCamera}\n                label=\"+ Add Images\"\n              />\n            </div>\n          </div>\n          <FormInput\n            label=\"Product Description\"\n            id=\"productDescription\"\n            name=\"productDescription\"\n            placeholder=\"Tell your customer about the product in brief\"\n            required\n            textarea\n            rows={4}\n            cols={255}\n          />\n\n          <FormInput\n            label=\"Details\"\n            id=\"details\"\n            name=\"details\"\n            placeholder=\"What includes in product?\"\n            required\n            textarea\n            rows={2}\n            cols={255}\n          />\n          <div className=\"flex items-center w-full space-x-6\">\n            <FormMultipleSelector\n              className=\"w-1/2\"\n              label=\"Available Colors\"\n              disableFieldOption\n              name=\"availableColors\"\n              placeholder=\"Available colors for product\"\n              list={colorsList}\n            />\n            <FormMultipleSelector\n              className=\"w-1/2\"\n              sortBy=\"id\"\n              disableFieldOption\n              label=\"Available Sizes\"\n              name=\"availableSizes\"\n              placeholder=\"XS,M,XL\"\n              list={sizeList}\n            />\n          </div>\n          <div className=\"flex items-start w-full space-x-6\">\n            <FormInput\n              label=\"Product Price\"\n              id=\"price\"\n              gridClass=\"w-1/2\"\n              type=\"number\"\n              props={{\n                step: '2',\n                min: 0,\n              }}\n              name=\"price\"\n              required\n              placeholder=\"99\"\n            />\n\n            <FormSelector\n              required\n              list={map(times(30), (d) => ({\n                name: `In ${d + 1} days`,\n                id: d.toString(),\n              }))}\n              className=\"w-1/2\"\n              name=\"estimatedDelivery\"\n              placeholder=\"In 3 days\"\n              label={'Estimated Delivery'}\n            />\n          </div>\n          <FormTagsInput name=\"tags\" />\n          <List name=\"features\" />\n          <List name=\"highlights\" />\n\n          <div className=\"flex items-center justify-end\">\n            <Button\n              type=\"submit\"\n              rounded=\"rounded-lg\"\n              loading={isLoading || imageUploadingLoading}\n              gradient\n              size=\"lg\"\n              label=\"Add product\"\n            />\n          </div>\n\n          {isError && <Error errors={[error.toString()]} />}\n        </Form>\n      </Formik>\n    </NarrowLayout>\n  )\n}\n\nexport default AddProduct\n"],"sourceRoot":""}