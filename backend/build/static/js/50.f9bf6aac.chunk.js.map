{"version":3,"sources":["../../../../src/components/description/description.tsx","../node_modules/lodash/map.js","../node_modules/lodash/_baseMap.js","../../../src/hooks/use-focus-trap.ts","../../../src/hooks/use-inert-others.ts","../../../src/internal/portal-force-root.tsx","../../../../src/components/portal/portal.tsx","../../../src/internal/stack-context.tsx","../../../../src/components/dialog/dialog.tsx"],"names":["DescriptionContext","createContext","useDescriptionContext","context","useContext","err","Error","useDescriptions","useState","descriptionIds","setDescriptionIds","useMemo","props","register","useCallback","existing","clone","idx","contextBag","slot","name","value","Description","id","useId","useIsoMorphicEffect","passThroughProps","propsWeControl","render","defaultTag","arrayMap","require","baseIteratee","baseMap","isArray","module","exports","collection","iteratee","baseEach","isArrayLike","index","result","Array","length","key","Features","useFocusTrap","container","features","All","initialFocus","containers","restoreElement","useRef","window","document","previousActiveElement","mounted","useIsMounted","featuresRestoreFocus","Boolean","featuresInitialFocus","useEffect","focusElement","activeElement","focusIn","Focus","FocusResult","useWindowEvent","event","Keys","allContainers","Set","previous","toElement","contains","interactables","originals","inert","element","restore","original","ForcePortalRootContext","ForcePortalRoot","force","usePortalTarget","forceInRoot","groupTarget","existingRoot","root","target","setTarget","DEFAULT_PORTAL_TAG","Portal","passthroughProps","ready","useServerHandoffComplete","createPortal","DEFAULT_GROUP_TAG","PortalGroupContext","StackMessage","StackContext","StackProvider","children","onUpdate","type","parentUpdate","notify","args","DialogStates","ActionTypes","reducers","state","action","titleId","DialogContext","useDialogContext","component","Dialog","stateReducer","match","DialogRenderFeatures","DialogRoot","forwardRefWithAs","open","onClose","rest","nestedDialogCount","setNestedDialogCount","usesOpenClosedState","useOpenClosed","State","internalDialogRef","dialogRef","useSyncRefs","hasOpen","hasOnClose","dialogState","visible","useReducer","descriptionId","dispatch","close","setTitleId","enabled","hasNestedDialogs","hasParentDialog","position","parent","FocusTrapFeatures","leaf","child","interactable","useInertOthers","overflow","paddingRight","scrollbarWidth","observer","IntersectionObserver","entries","entry","describedby","DescriptionProvider","Open","ref","role","onClick","onKeyDown","message","count","React","Overlay","overlayRef","handleClick","isDisabledReactIssue7711","Object","Title"],"mappings":"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","file":"static/js/50.f9bf6aac.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet DescriptionContext = createContext<\n  ({ register(value: string): () => void } & SharedData) | null\n>(null)\n\nfunction useDescriptionContext() {\n  let context = useContext(DescriptionContext)\n  if (context === null) {\n    let err = new Error(\n      'You used a <Description /> component, but it is not inside a relevant parent.'\n    )\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext)\n    throw err\n  }\n  return context\n}\n\ninterface DescriptionProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: DescriptionProviderProps) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: DescriptionProviderProps) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let context = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let passThroughProps = props\n  let propsWeControl = { ...context.props, id }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description',\n  })\n}\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        throw new Error('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  KeyboardEvent as ReactKeyboardEvent,\n  MutableRefObject,\n  Ref,\n  useState,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n\n    // Handle `Escape` to close\n    onKeyDown(event: ReactKeyboardEvent) {\n      if (event.key !== Keys.Escape) return\n      if (dialogState !== DialogStates.Open) return\n      if (hasNestedDialogs) return\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n"],"sourceRoot":""}