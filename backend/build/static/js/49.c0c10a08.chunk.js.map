{"version":3,"sources":["../../../../src/components/description/description.tsx","../../../../src/components/label/label.tsx","../../../src/hooks/use-focus-trap.ts","../../../src/hooks/use-inert-others.ts","../../../src/internal/portal-force-root.tsx","../../../../src/components/portal/portal.tsx","../../../src/internal/stack-context.tsx","../../../../src/components/dialog/dialog.tsx","../../../../src/components/radio-group/radio-group.tsx","../../../src/hooks/use-flags.ts"],"names":["DescriptionContext","createContext","useDescriptionContext","context","useContext","err","Error","useDescriptions","useState","descriptionIds","setDescriptionIds","useMemo","props","register","useCallback","existing","clone","idx","contextBag","slot","name","value","Description","id","useId","useIsoMorphicEffect","passThroughProps","propsWeControl","render","defaultTag","LabelContext","useLabelContext","useLabels","labelIds","setLabelIds","Label","passive","allProps","Features","useFocusTrap","container","features","All","initialFocus","containers","restoreElement","useRef","window","document","previousActiveElement","mounted","useIsMounted","featuresRestoreFocus","Boolean","featuresInitialFocus","useEffect","focusElement","activeElement","focusIn","Focus","FocusResult","useWindowEvent","event","Keys","allContainers","Set","previous","toElement","contains","interactables","originals","inert","element","restore","original","ForcePortalRootContext","ForcePortalRoot","force","usePortalTarget","forceInRoot","groupTarget","existingRoot","root","target","setTarget","DEFAULT_PORTAL_TAG","Portal","passthroughProps","ready","useServerHandoffComplete","createPortal","DEFAULT_GROUP_TAG","PortalGroupContext","StackMessage","StackContext","StackProvider","children","onUpdate","type","parentUpdate","notify","args","DialogStates","ActionTypes","reducers","state","action","titleId","DialogContext","useDialogContext","component","Dialog","stateReducer","match","DialogRenderFeatures","DialogRoot","forwardRefWithAs","open","onClose","rest","nestedDialogCount","setNestedDialogCount","usesOpenClosedState","useOpenClosed","State","internalDialogRef","dialogRef","useSyncRefs","hasOpen","hasOnClose","dialogState","visible","useReducer","descriptionId","dispatch","close","setTitleId","enabled","hasNestedDialogs","hasParentDialog","position","parent","FocusTrapFeatures","leaf","child","interactable","useInertOthers","overflow","paddingRight","scrollbarWidth","observer","IntersectionObserver","entries","entry","describedby","DescriptionProvider","Open","ref","role","onClick","onKeyDown","message","count","React","Overlay","overlayRef","handleClick","isDisabledReactIssue7711","Object","Title","options","propsRef","radio","RadioGroupContext","useRadioGroupContext","RadioGroup","onChange","disabled","labelledby","LabelProvider","radioGroupRef","firstOption","option","containsCheckedOption","triggerChange","nextValue","nextOption","useTreeWalker","accept","node","NodeFilter","walk","handleKeyDown","all","activeOption","registerOption","RegisterOption","api","change","OptionState","Option","optionRef","initialFlags","flags","setFlags","addFlag","hasFlag","removeFlag","toggleFlag","useFlags","radioGroupDisabled","radioGroupValue","handleFocus","handleBlur","isFirstOption","isDisabled","checked","tabIndex","undefined","onFocus","onBlur","active"],"mappings":"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","file":"static/js/49.c0c10a08.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet DescriptionContext = createContext<\n  ({ register(value: string): () => void } & SharedData) | null\n>(null)\n\nfunction useDescriptionContext() {\n  let context = useContext(DescriptionContext)\n  if (context === null) {\n    let err = new Error(\n      'You used a <Description /> component, but it is not inside a relevant parent.'\n    )\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext)\n    throw err\n  }\n  return context\n}\n\ninterface DescriptionProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: DescriptionProviderProps) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: DescriptionProviderProps) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let context = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let passThroughProps = props\n  let propsWeControl = { ...context.props, id }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description',\n  })\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet LabelContext = createContext<({ register(value: string): () => void } & SharedData) | null>(\n  null\n)\n\nfunction useLabelContext() {\n  let context = useContext(LabelContext)\n  if (context === null) {\n    let err = new Error('You used a <Label /> component, but it is not inside a relevant parent.')\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext)\n    throw err\n  }\n  return context\n}\n\ninterface LabelProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useLabels(): [string | undefined, (props: LabelProviderProps) => JSX.Element] {\n  let [labelIds, setLabelIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined.\n    labelIds.length > 0 ? labelIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function LabelProvider(props: LabelProviderProps) {\n        let register = useCallback((value: string) => {\n          setLabelIds(existing => [...existing, value])\n\n          return () =>\n            setLabelIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return <LabelContext.Provider value={contextBag}>{props.children}</LabelContext.Provider>\n      }\n    }, [setLabelIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id'\n\nexport function Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl> & {\n    passive?: boolean\n  }\n) {\n  let { passive = false, ...passThroughProps } = props\n  let context = useLabelContext()\n  let id = `headlessui-label-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let propsWeControl = { ...context.props, id }\n\n  let allProps = { ...passThroughProps, ...propsWeControl }\n  // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n  if (passive) delete allProps['onClick']\n\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: context.name || 'Label',\n  })\n}\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        throw new Error('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  KeyboardEvent as ReactKeyboardEvent,\n  MutableRefObject,\n  Ref,\n  useState,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n\n    // Handle `Escape` to close\n    onKeyDown(event: ReactKeyboardEvent) {\n      if (event.key !== Keys.Escape) return\n      if (dialogState !== DialogStates.Open) return\n      if (hasNestedDialogs) return\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n","import { useState, useCallback } from 'react'\n\nexport function useFlags(initialFlags = 0) {\n  let [flags, setFlags] = useState(initialFlags)\n\n  let addFlag = useCallback((flag: number) => setFlags(flags => flags | flag), [setFlags])\n  let hasFlag = useCallback((flag: number) => Boolean(flags & flag), [flags])\n  let removeFlag = useCallback((flag: number) => setFlags(flags => flags & ~flag), [setFlags])\n  let toggleFlag = useCallback((flag: number) => setFlags(flags => flags ^ flag), [setFlags])\n\n  return { addFlag, hasFlag, removeFlag, toggleFlag }\n}\n"],"sourceRoot":""}